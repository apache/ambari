<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<!--
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
-->
<configuration supports_adding_forbidden="true">
  <property>
    <name>yarn_log_dir_prefix</name>
    <value>/var/log/hadoop-yarn</value>
    <display-name>YARN Log Dir Prefix</display-name>
    <description>YARN Log Dir Prefix</description>
    <value-attributes>
      <type>directory</type>
      <overridable>false</overridable>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>yarn_pid_dir_prefix</name>
    <value>/var/run/hadoop-yarn</value>
    <display-name>YARN PID Dir Prefix</display-name>
    <description>YARN PID Dir Prefix</description>
    <value-attributes>
      <type>directory</type>
      <overridable>false</overridable>
      <editable-only-at-install>true</editable-only-at-install>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>yarn_user</name>
    <display-name>Yarn User</display-name>
    <value>yarn</value>
    <property-type>USER</property-type>
    <description>YARN User</description>
    <value-attributes>
      <type>user</type>
      <overridable>false</overridable>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>yarn_heapsize</name>
    <value>1024</value>
    <display-name>YARN Java heap size</display-name>
    <description>Max heapsize for all YARN components using a numerical value in the scale of MB</description>
    <value-attributes>
      <type>int</type>
      <unit>MB</unit>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>resourcemanager_heapsize</name>
    <value>1024</value>
    <display-name>ResourceManager Java heap size</display-name>
    <description>Max heapsize for ResourceManager using a numerical value in the scale of MB</description>
    <value-attributes>
      <type>int</type>
      <overridable>false</overridable>
      <unit>MB</unit>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>nodemanager_heapsize</name>
    <value>1024</value>
    <display-name>NodeManager Java heap size</display-name>
    <description>Max heapsize for NodeManager using a numerical value in the scale of MB</description>
    <value-attributes>
      <type>int</type>
      <unit>MB</unit>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>min_user_id</name>
    <value>1000</value>
    <display-name>Minimum user ID for submitting job</display-name>
    <description>Set to 0 to disallow root from submitting jobs. Set to 1000 to disallow all superusers from submitting jobs</description>
    <value-attributes>
      <type>int</type>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>is_supported_yarn_ranger</name>
    <value>false</value>
    <description>Set to false by default,  needs to be set to true in stacks that use Ranger Yarn Plugin</description>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>yarn_user_nofile_limit</name>
    <value>32768</value>
    <description>Max open files limit setting for YARN user.</description>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>yarn_user_nproc_limit</name>
    <value>65536</value>
    <description>Max number of processes limit setting for YARN user.</description>
    <on-ambari-upgrade add="true"/>
  </property>
  <!-- yarn-env.sh -->
  <property>
    <name>content</name>
    <display-name>yarn-env template</display-name>
    <description>This is the jinja template for yarn-env.sh file</description>
    <value>
export HADOOP_YARN_HOME={{hadoop_yarn_home}}
export YARN_LOG_DIR={{yarn_log_dir_prefix}}/$USER
export YARN_PID_DIR={{yarn_pid_dir_prefix}}/$USER
export HADOOP_LIBEXEC_DIR={{hadoop_libexec_dir}}
export JAVA_HOME={{java64_home}}
export JAVA_LIBRARY_PATH="${JAVA_LIBRARY_PATH}:{{hadoop_java_io_tmpdir}}"

# User for YARN daemons
export HADOOP_YARN_USER=${HADOOP_YARN_USER:-yarn}

# resolve links - $0 may be a softlink
export YARN_CONF_DIR="${YARN_CONF_DIR:-$HADOOP_YARN_HOME/conf}"

# some Java parameters
# export JAVA_HOME=/home/y/libexec/jdk1.6.0/
if [ "$JAVA_HOME" != "" ]; then
  #echo "run java in $JAVA_HOME"
  JAVA_HOME=$JAVA_HOME
fi

if [ "$JAVA_HOME" = "" ]; then
  echo "Error: JAVA_HOME is not set."
  exit 1
fi

JAVA=$JAVA_HOME/bin/java
JAVA_HEAP_MAX=-Xmx1000m

# For setting YARN specific HEAP sizes please use this
# Parameter and set appropriately
YARN_HEAPSIZE={{yarn_heapsize}}

# check envvars which might override default args
if [ "$YARN_HEAPSIZE" != "" ]; then
  JAVA_HEAP_MAX="-Xmx""$YARN_HEAPSIZE""m"
fi

# Resource Manager specific parameters

# Specify the max Heapsize for the ResourceManager using a numerical value
# in the scale of MB. For example, to specify an jvm option of -Xmx1000m, set
# the value to 1000.
# This value will be overridden by an Xmx setting specified in either YARN_OPTS
# and/or YARN_RESOURCEMANAGER_OPTS.
# If not specified, the default value will be picked from either YARN_HEAPMAX
# or JAVA_HEAP_MAX with YARN_HEAPMAX as the preferred option of the two.
export YARN_RESOURCEMANAGER_HEAPSIZE={{resourcemanager_heapsize}}

# Specify the JVM options to be used when starting the ResourceManager.
# These options will be appended to the options specified as YARN_OPTS
# and therefore may override any similar flags set in YARN_OPTS
#export YARN_RESOURCEMANAGER_OPTS=

# Node Manager specific parameters

# Specify the max Heapsize for the NodeManager using a numerical value
# in the scale of MB. For example, to specify an jvm option of -Xmx1000m, set
# the value to 1000.
# This value will be overridden by an Xmx setting specified in either YARN_OPTS
# and/or YARN_NODEMANAGER_OPTS.
# If not specified, the default value will be picked from either YARN_HEAPMAX
# or JAVA_HEAP_MAX with YARN_HEAPMAX as the preferred option of the two.
export YARN_NODEMANAGER_HEAPSIZE={{nodemanager_heapsize}}

# Specify the max Heapsize for the HistoryManager using a numerical value
# in the scale of MB. For example, to specify an jvm option of -Xmx1000m, set
# the value to 1024.
# This value will be overridden by an Xmx setting specified in either YARN_OPTS
# and/or YARN_HISTORYSERVER_OPTS.
# If not specified, the default value will be picked from either YARN_HEAPMAX
# or JAVA_HEAP_MAX with YARN_HEAPMAX as the preferred option of the two.
export YARN_HISTORYSERVER_HEAPSIZE={{apptimelineserver_heapsize}}

# Specify the JVM options to be used when starting the NodeManager.
# These options will be appended to the options specified as YARN_OPTS
# and therefore may override any similar flags set in YARN_OPTS
#export YARN_NODEMANAGER_OPTS=

# so that filenames w/ spaces are handled correctly in loops below
IFS=


# default log directory and file
if [ "$YARN_LOG_DIR" = "" ]; then
  YARN_LOG_DIR="$HADOOP_YARN_HOME/logs"
fi
if [ "$YARN_LOGFILE" = "" ]; then
  YARN_LOGFILE='yarn.log'
fi

# default policy file for service-level authorization
if [ "$YARN_POLICYFILE" = "" ]; then
  YARN_POLICYFILE="hadoop-policy.xml"
fi

# restore ordinary behaviour
unset IFS


YARN_OPTS="$YARN_OPTS -Dhadoop.log.dir=$YARN_LOG_DIR"
YARN_OPTS="$YARN_OPTS -Dyarn.log.dir=$YARN_LOG_DIR"
YARN_OPTS="$YARN_OPTS -Dhadoop.log.file=$YARN_LOGFILE"
YARN_OPTS="$YARN_OPTS -Dyarn.log.file=$YARN_LOGFILE"
YARN_OPTS="$YARN_OPTS -Dyarn.home.dir=$YARN_COMMON_HOME"
YARN_OPTS="$YARN_OPTS -Dyarn.id.str=$YARN_IDENT_STRING"
YARN_OPTS="$YARN_OPTS -Dhadoop.root.logger=${YARN_ROOT_LOGGER:-INFO,console}"
YARN_OPTS="$YARN_OPTS -Dyarn.root.logger=${YARN_ROOT_LOGGER:-INFO,console}"
export YARN_NODEMANAGER_OPTS="$YARN_NODEMANAGER_OPTS -Dnm.audit.logger=INFO,NMAUDIT"
export YARN_RESOURCEMANAGER_OPTS="$YARN_RESOURCEMANAGER_OPTS -Drm.audit.logger=INFO,RMAUDIT"
if [ "x$JAVA_LIBRARY_PATH" != "x" ]; then
  YARN_OPTS="$YARN_OPTS -Djava.library.path=$JAVA_LIBRARY_PATH"
fi
YARN_OPTS="$YARN_OPTS -Dyarn.policy.file=$YARN_POLICYFILE"
YARN_OPTS="$YARN_OPTS -Djava.io.tmpdir={{hadoop_java_io_tmpdir}}"
    </value>
    <value-attributes>
      <type>content</type>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>service_check.queue.name</name>
    <value>default</value>
    <description>
      The queue that used by service check.
    </description>
    <depends-on>
      <property>
        <type>capacity-scheduler</type>
        <name>yarn.scheduler.capacity.root.queues</name>
      </property>
    </depends-on>
    <on-ambari-upgrade add="false"/>
  </property>
</configuration>
