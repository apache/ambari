"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var IsGreaterPipe = (function () {
    function IsGreaterPipe() {
    }
    IsGreaterPipe.prototype.transform = function (first, second) {
        return first > second;
    };
    return IsGreaterPipe;
}());
IsGreaterPipe.decorators = [
    { type: core_1.Pipe, args: [{
                name: 'greater'
            },] },
];
/** @nocollapse */
IsGreaterPipe.ctorParameters = function () { return []; };
exports.IsGreaterPipe = IsGreaterPipe;
var IsGreaterOrEqualPipe = (function () {
    function IsGreaterOrEqualPipe() {
    }
    IsGreaterOrEqualPipe.prototype.transform = function (first, second) {
        return first >= second;
    };
    return IsGreaterOrEqualPipe;
}());
IsGreaterOrEqualPipe.decorators = [
    { type: core_1.Pipe, args: [{
                name: 'greaterOrEqual'
            },] },
];
/** @nocollapse */
IsGreaterOrEqualPipe.ctorParameters = function () { return []; };
exports.IsGreaterOrEqualPipe = IsGreaterOrEqualPipe;
var IsLessPipe = (function () {
    function IsLessPipe() {
    }
    IsLessPipe.prototype.transform = function (first, second) {
        return first < second;
    };
    return IsLessPipe;
}());
IsLessPipe.decorators = [
    { type: core_1.Pipe, args: [{
                name: 'less'
            },] },
];
/** @nocollapse */
IsLessPipe.ctorParameters = function () { return []; };
exports.IsLessPipe = IsLessPipe;
var IsLessOrEqualPipe = (function () {
    function IsLessOrEqualPipe() {
    }
    IsLessOrEqualPipe.prototype.transform = function (first, second) {
        return first <= second;
    };
    return IsLessOrEqualPipe;
}());
IsLessOrEqualPipe.decorators = [
    { type: core_1.Pipe, args: [{
                name: 'lessOrEqual'
            },] },
];
/** @nocollapse */
IsLessOrEqualPipe.ctorParameters = function () { return []; };
exports.IsLessOrEqualPipe = IsLessOrEqualPipe;
var IsEqualPipe = (function () {
    function IsEqualPipe() {
    }
    IsEqualPipe.prototype.transform = function (first, second) {
        return first == second;
    };
    return IsEqualPipe;
}());
IsEqualPipe.decorators = [
    { type: core_1.Pipe, args: [{
                name: 'equal'
            },] },
];
/** @nocollapse */
IsEqualPipe.ctorParameters = function () { return []; };
exports.IsEqualPipe = IsEqualPipe;
var IsNotEqualPipe = (function () {
    function IsNotEqualPipe() {
    }
    IsNotEqualPipe.prototype.transform = function (first, second) {
        return first != second;
    };
    return IsNotEqualPipe;
}());
IsNotEqualPipe.decorators = [
    { type: core_1.Pipe, args: [{
                name: 'notEqual'
            },] },
];
/** @nocollapse */
IsNotEqualPipe.ctorParameters = function () { return []; };
exports.IsNotEqualPipe = IsNotEqualPipe;
var IsIdenticalPipe = (function () {
    function IsIdenticalPipe() {
    }
    IsIdenticalPipe.prototype.transform = function (first, second) {
        return first === second;
    };
    return IsIdenticalPipe;
}());
IsIdenticalPipe.decorators = [
    { type: core_1.Pipe, args: [{
                name: 'identical'
            },] },
];
/** @nocollapse */
IsIdenticalPipe.ctorParameters = function () { return []; };
exports.IsIdenticalPipe = IsIdenticalPipe;
var IsNotIdenticalPipe = (function () {
    function IsNotIdenticalPipe() {
    }
    IsNotIdenticalPipe.prototype.transform = function (first, second) {
        return first !== second;
    };
    return IsNotIdenticalPipe;
}());
IsNotIdenticalPipe.decorators = [
    { type: core_1.Pipe, args: [{
                name: 'notIdentical'
            },] },
];
/** @nocollapse */
IsNotIdenticalPipe.ctorParameters = function () { return []; };
exports.IsNotIdenticalPipe = IsNotIdenticalPipe;
//# sourceMappingURL=conditions.pipe.js.map