import { Pipe } from '@angular/core';
import { isNull, isNil, isUndefined, isFunction, isArray, isString, isObject, isNumber } from '../utils/utils';
var IsNullPipe = (function () {
    function IsNullPipe() {
    }
    IsNullPipe.prototype.transform = function (value) {
        return isNull(value);
    };
    return IsNullPipe;
}());
export { IsNullPipe };
IsNullPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isNull'
            },] },
];
/** @nocollapse */
IsNullPipe.ctorParameters = function () { return []; };
var IsUndefinedPipe = (function () {
    function IsUndefinedPipe() {
    }
    IsUndefinedPipe.prototype.transform = function (value) {
        return isUndefined(value);
    };
    return IsUndefinedPipe;
}());
export { IsUndefinedPipe };
IsUndefinedPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isUndefined'
            },] },
];
/** @nocollapse */
IsUndefinedPipe.ctorParameters = function () { return []; };
var IsNilPipe = (function () {
    function IsNilPipe() {
    }
    IsNilPipe.prototype.transform = function (value) {
        return isNil(value);
    };
    return IsNilPipe;
}());
export { IsNilPipe };
IsNilPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isNil'
            },] },
];
/** @nocollapse */
IsNilPipe.ctorParameters = function () { return []; };
var IsFunctionPipe = (function () {
    function IsFunctionPipe() {
    }
    IsFunctionPipe.prototype.transform = function (value) {
        return isFunction(value);
    };
    return IsFunctionPipe;
}());
export { IsFunctionPipe };
IsFunctionPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isFunction'
            },] },
];
/** @nocollapse */
IsFunctionPipe.ctorParameters = function () { return []; };
var IsNumberPipe = (function () {
    function IsNumberPipe() {
    }
    IsNumberPipe.prototype.transform = function (value) {
        return isNumber(value);
    };
    return IsNumberPipe;
}());
export { IsNumberPipe };
IsNumberPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isNumber'
            },] },
];
/** @nocollapse */
IsNumberPipe.ctorParameters = function () { return []; };
var IsStringPipe = (function () {
    function IsStringPipe() {
    }
    IsStringPipe.prototype.transform = function (value) {
        return isString(value);
    };
    return IsStringPipe;
}());
export { IsStringPipe };
IsStringPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isString'
            },] },
];
/** @nocollapse */
IsStringPipe.ctorParameters = function () { return []; };
var IsArrayPipe = (function () {
    function IsArrayPipe() {
    }
    IsArrayPipe.prototype.transform = function (value) {
        return isArray(value);
    };
    return IsArrayPipe;
}());
export { IsArrayPipe };
IsArrayPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isArray'
            },] },
];
/** @nocollapse */
IsArrayPipe.ctorParameters = function () { return []; };
var IsObjectPipe = (function () {
    function IsObjectPipe() {
    }
    IsObjectPipe.prototype.transform = function (value) {
        return isObject(value);
    };
    return IsObjectPipe;
}());
export { IsObjectPipe };
IsObjectPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isObject'
            },] },
];
/** @nocollapse */
IsObjectPipe.ctorParameters = function () { return []; };
var IsDefinedPipe = (function () {
    function IsDefinedPipe() {
    }
    IsDefinedPipe.prototype.transform = function (value) {
        return !isUndefined(value);
    };
    return IsDefinedPipe;
}());
export { IsDefinedPipe };
IsDefinedPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isDefined'
            },] },
];
/** @nocollapse */
IsDefinedPipe.ctorParameters = function () { return []; };
//# sourceMappingURL=types.pipe.js.map