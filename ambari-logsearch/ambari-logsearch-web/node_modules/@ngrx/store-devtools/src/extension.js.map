{"version":3,"sources":["../../src/extension.ts"],"names":[],"mappings":"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","file":"extension.js","sourceRoot":"","sourcesContent":["import { OpaqueToken, Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { empty } from 'rxjs/observable/empty';\nimport { filter } from 'rxjs/operator/filter';\nimport { map } from 'rxjs/operator/map';\nimport { share } from 'rxjs/operator/share';\nimport { switchMap } from 'rxjs/operator/switchMap';\nimport { takeUntil } from 'rxjs/operator/takeUntil';\n\nimport { ActionTypes } from './actions';\nimport { LiftedState } from './reducer';\nimport { unliftState, unliftAction, applyOperators } from './utils';\n\nexport const ExtensionActionTypes = {\n  START: 'START',\n  DISPATCH: 'DISPATCH',\n  STOP: 'STOP',\n  ACTION: 'ACTION'\n};\n\nexport const REDUX_DEVTOOLS_EXTENSION = new OpaqueToken('Redux Devtools Extension');\n\nexport interface ReduxDevtoolsExtensionConnection {\n  subscribe(listener: (change: any) => void);\n  unsubscribe();\n  send(action: any, state: any);\n}\n\nexport interface ReduxDevtoolsExtension {\n  connect(options: { shouldStringify?: boolean, instanceId: string }): ReduxDevtoolsExtensionConnection;\n  send(action: any, state: any, shouldStringify?: boolean, instanceId?: string);\n}\n\n\n\nexport class DevtoolsExtension {\n  private instanceId = `ngrx-store-${Date.now()}`;\n  private devtoolsExtension: ReduxDevtoolsExtension;\n\n  liftedActions$: Observable<any>;\n  actions$: Observable<any>;\n\n  constructor(\n     devtoolsExtension\n  ) {\n    this.devtoolsExtension = devtoolsExtension;\n    this.createActionStreams();\n  }\n\n  notify(action, state: LiftedState) {\n    if (!this.devtoolsExtension) {\n      return;\n    }\n\n    this.devtoolsExtension.send(null, state, false, this.instanceId);\n  }\n\n  private createChangesObservable(): Observable<any> {\n    if (!this.devtoolsExtension) {\n      return empty();\n    }\n\n    return new Observable(subscriber => {\n      const connection = this.devtoolsExtension.connect({ instanceId: this.instanceId });\n\n      connection.subscribe(change => subscriber.next(change));\n\n      return connection.unsubscribe;\n    });\n  }\n\n  private createActionStreams() {\n    // Listens to all changes based on our instanceId\n    const changes$ = share.call(this.createChangesObservable());\n\n    // Listen for the start action\n    const start$ = filter.call(changes$, change => change.type === ExtensionActionTypes.START);\n\n    // Listen for the stop action\n    const stop$ = filter.call(changes$, change => change.type === ExtensionActionTypes.STOP);\n\n    // Listen for lifted actions\n    const liftedActions$ = applyOperators(changes$, [\n      [ filter, change => change.type === ExtensionActionTypes.DISPATCH ],\n      [ map,  change => this.unwrapAction(change.payload) ]\n    ]);\n\n    // Listen for unlifted actions\n    const actions$ = applyOperators(changes$, [\n      [ filter, change => change.type === ExtensionActionTypes.ACTION ],\n      [ map,  change => this.unwrapAction(change.payload) ]\n    ]);\n\n    const actionsUntilStop$ = takeUntil.call(actions$, stop$);\n    const liftedUntilStop$ = takeUntil.call(liftedActions$, stop$);\n\n    // Only take the action sources between the start/stop events\n    this.actions$ = switchMap.call(start$, () => actionsUntilStop$);\n    this.liftedActions$ = switchMap.call(start$, () => liftedUntilStop$);\n  }\n\n  private unwrapAction(action) {\n    return typeof action === 'string' ? eval(`(${action})`) : action;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [REDUX_DEVTOOLS_EXTENSION, ] }, ]},\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}