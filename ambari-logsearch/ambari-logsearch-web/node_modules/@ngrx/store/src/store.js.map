{"version":3,"file":"store.js","sourceRoot":"","sources":["../../src/store.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,MAAM,EAAmB,MAAM,YAAY,CAAC;AAErD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAS7C;IAA8B,yBAAa;IACzC,eACU,WAA6B,EAC7B,QAAsC,EAC9C,MAAuB;QAHzB,YAKE,iBAAO,SAGR;QAPS,iBAAW,GAAX,WAAW,CAAkB;QAC7B,cAAQ,GAAR,QAAQ,CAA8B;QAQhD,YAAM,GAAuB,MAAM,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;QAH7C,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;;IACvB,CAAC;IAID,oBAAI,GAAJ,UAAQ,QAAwB;QAC9B,IAAM,KAAK,GAAG,IAAI,KAAK,CAAI,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QAClE,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC1B,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED,8BAAc,GAAd,UAAe,OAA2B;QACxC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;IAED,wBAAQ,GAAR,UAAS,MAAc;QACrB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAED,oBAAI,GAAJ,UAAK,MAAc;QACjB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAED,qBAAK,GAAL,UAAM,GAAQ;QACZ,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC9B,CAAC;IAED,wBAAQ,GAAR;QACE,OAAO;IACT,CAAC;IACH,YAAC;AAAD,CAAC,AAtCD,CAA8B,UAAU,GAsCvC","sourcesContent":["import { select, SelectSignature } from '@ngrx/core';\nimport { Observer } from 'rxjs/Observer';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscriber } from 'rxjs/Subscriber';\nimport { Operator } from 'rxjs/Operator';\n\nimport { Action } from './dispatcher';\nimport { State } from './state';\nimport { ActionReducer } from './reducer';\n\n\nexport class Store<T> extends Observable<T> implements Observer<Action> {\n  constructor(\n    private _dispatcher: Observer<Action>,\n    private _reducer: Observer<ActionReducer<any>>,\n    state$: Observable<any>\n  ) {\n    super();\n\n    this.source = state$;\n  }\n\n  select: SelectSignature<T> = select.bind(this);\n\n  lift<R>(operator: Operator<T, R>): Store<R> {\n    const store = new Store<R>(this._dispatcher, this._reducer, this);\n    store.operator = operator;\n    return store;\n  }\n\n  replaceReducer(reducer: ActionReducer<any>) {\n    this._reducer.next(reducer);\n  }\n\n  dispatch(action: Action) {\n    this._dispatcher.next(action);\n  }\n\n  next(action: Action) {\n    this._dispatcher.next(action);\n  }\n\n  error(err: any) {\n    this._dispatcher.error(err);\n  }\n\n  complete() {\n    // noop\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}