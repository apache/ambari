"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const Observable_1 = require("rxjs/Observable");
require("rxjs/add/observable/defer");
require("rxjs/add/observable/from");
require("rxjs/add/operator/concat");
require("rxjs/add/operator/concatMap");
require("rxjs/add/operator/ignoreElements");
require("rxjs/add/operator/last");
require("rxjs/add/operator/map");
require("rxjs/add/operator/mergeMap");
const exception_1 = require("../exception/exception");
const action_1 = require("../tree/action");
const Noop = function () { };
class SimpleSinkBase {
    constructor() {
        this.preCommitAction = Noop;
        this.postCommitAction = Noop;
        this.preCommit = Noop;
        this.postCommit = Noop;
    }
    _fileAlreadyExistException(path) {
        throw new exception_1.FileAlreadyExistException(path);
    }
    _fileDoesNotExistException(path) {
        throw new exception_1.FileDoesNotExistException(path);
    }
    _validateOverwriteAction(action) {
        return this._validateFileExists(action.path)
            .map(b => { if (!b) {
            this._fileDoesNotExistException(action.path);
        } });
    }
    _validateCreateAction(action) {
        return this._validateFileExists(action.path)
            .map(b => { if (b) {
            this._fileAlreadyExistException(action.path);
        } });
    }
    _validateRenameAction(action) {
        return this._validateFileExists(action.path)
            .map(b => { if (!b) {
            this._fileDoesNotExistException(action.path);
        } })
            .mergeMap(() => this._validateFileExists(action.to))
            .map(b => { if (b) {
            this._fileAlreadyExistException(action.to);
        } });
    }
    _validateDeleteAction(action) {
        return this._validateFileExists(action.path)
            .map(b => { if (!b) {
            this._fileDoesNotExistException(action.path);
        } });
    }
    validateSingleAction(action) {
        switch (action.kind) {
            case 'o': return this._validateOverwriteAction(action);
            case 'c': return this._validateCreateAction(action);
            case 'r': return this._validateRenameAction(action);
            case 'd': return this._validateDeleteAction(action);
            default: throw new action_1.UnknownActionException(action);
        }
    }
    commitSingleAction(action) {
        return Observable_1.Observable.empty()
            .concat(new Observable_1.Observable(observer => {
            return this.validateSingleAction(action).subscribe(observer);
        }))
            .concat(new Observable_1.Observable(observer => {
            let committed = null;
            switch (action.kind) {
                case 'o':
                    committed = this._overwriteFile(action.path, action.content);
                    break;
                case 'c':
                    committed = this._createFile(action.path, action.content);
                    break;
                case 'r':
                    committed = this._renameFile(action.path, action.to);
                    break;
                case 'd':
                    committed = this._deleteFile(action.path);
                    break;
            }
            if (committed) {
                committed.subscribe(observer);
            }
            else {
                observer.complete();
            }
        }));
    }
    commit(tree) {
        const actions = Observable_1.Observable.from(tree.actions);
        return (this.preCommit() || Observable_1.Observable.empty())
            .concat(Observable_1.Observable.defer(() => actions))
            .concatMap((action) => {
            const maybeAction = this.preCommitAction(action);
            if (!maybeAction) {
                return Observable_1.Observable.of(action);
            }
            else if (action_1.isAction(maybeAction)) {
                return Observable_1.Observable.of(maybeAction);
            }
            else {
                return maybeAction;
            }
        })
            .mergeMap((action) => {
            return this.commitSingleAction(action).ignoreElements().concat([action]);
        })
            .mergeMap((action) => this.postCommitAction(action) || Observable_1.Observable.empty())
            .concat(Observable_1.Observable.defer(() => this._done()))
            .concat(Observable_1.Observable.defer(() => this.postCommit() || Observable_1.Observable.empty()));
    }
}
exports.SimpleSinkBase = SimpleSinkBase;
//# sourceMappingURL=data:application/json;base64,