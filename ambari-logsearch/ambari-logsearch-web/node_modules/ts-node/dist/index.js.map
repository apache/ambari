{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;AAAA,6BAA0E;AAC1E,yBAAuE;AACvE,yBAAgC;AAChC,qDAAuD;AACvD,8BAAgC;AAChC,+BAAiC;AACjC,+BAAiC;AACjC,uBAAyB;AACzB,+BAAiC;AACjC,yCAAsC;AAEtC,qCAAmC;AAEnC,IAAM,GAAG,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAA;AAyCzB,QAAA,OAAO,GAAG,GAAG,CAAC,OAAO,CAAA;AAwClC,IAAM,QAAQ,GAAG;IACf,OAAO,SAAA;IACP,UAAU,YAAA;IACV,KAAK,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;IACvC,cAAc,EAAE,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC;IACtD,eAAe,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;IAC5D,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC;IACzC,eAAe,EAAE,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;IAC/D,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC;IACvC,MAAM,EAAE,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;IAC5C,cAAc,EAAE,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;IAC7D,IAAI,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;CACtC,CAAA;AAKD,eAAuB,KAAyB;IAC9C,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,SAAS,CAAA;AAClD,CAAC;AAFD,sBAEC;AAKD,eAAuB,KAAyB;IAC9C,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,SAAS,CAAA;AAC9C,CAAC;AAFD,sBAEC;AAKD,eAAuB,KAAa;IAClC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAA;AAClC,CAAC;AAFD,sBAEC;AAYD,kBAA0B,OAAqB;IAArB,wBAAA,EAAA,YAAqB;IAC7C,IAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,YAAY,CAAA;IACjD,IAAM,qBAAqB,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;IAC5C,IAAM,cAAc,GAAG,MAAM,CAC3B,OAAO,CAAC,cAAc,IAAI,QAAQ,CAAC,cAAc,IAAI,EAAE,CACxD,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;IAC3C,IAAM,eAAe,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,eAAe,IAAI,IAAI,GAAG,QAAQ,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,CAAC,CAAA;IAChH,IAAM,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,QAAQ,CAAC,OAAO,CAAA;IACnD,IAAM,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,QAAQ,CAAC,UAAU,CAAA;IAC5D,IAAM,WAAW,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,CAAA;IAC9E,IAAM,IAAI,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;IACpE,IAAM,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,QAAQ,CAAC,OAAO,CAAA;IACnD,IAAM,cAAc,GAAG,OAAO,CAAC,cAAc,IAAI,QAAQ,CAAC,cAAc,IAAI,WAAI,CAAC,WAAM,EAAE,EAAE,SAAS,CAAC,CAAA;IACrG,IAAM,eAAe,GAAG,MAAM,CAAC,QAAQ,CAAC,eAAe,EAAE,OAAO,CAAC,eAAe,CAAC,CAAA;IACjF,IAAM,iBAAiB,GAAG,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;IACnD,IAAI,MAAgB,CAAA;IAEpB,IAAM,MAAM,GAAG,MAAM,CACnB,CACE,OAAO,OAAO,CAAC,MAAM,KAAK,SAAS;QACjC,CAAC,OAAO,CAAC,MAAM,KAAK,KAAK,GAAG,EAAE,GAAG,SAAS,CAAC;QAC3C,CAAC,OAAO,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,CAAC,CACtC;QACD,CAAC,gBAAgB,CAAC,CACnB,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,IAAI,MAAM,CAAC,GAAG,CAAC,EAAf,CAAe,CAAC,CAAA;IAE7B;QACE,IAAM,KAAK,GAAU,EAAE,QAAQ,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,UAAU,EAAE,EAAE,EAAE,CAAA;QAGnE,gBAAgB,CAAC,OAAO,CAAC;YACvB,WAAW,EAAE,MAAM;YACnB,iBAAiB,YAAE,QAAgB;gBACjC,EAAE,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAC/B,MAAM,CAAC;wBACL,GAAG,EAAE,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC;wBAC/B,GAAG,EAAE,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;qBACzC,CAAA;gBACH,CAAC;YACH,CAAC;SACF,CAAC,CAAA;QAGF,IAAM,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,CAAA;QACzB,IAAM,EAAE,GAAc,OAAO,CAAC,QAAQ,CAAC,CAAA;QACvC,IAAM,MAAM,GAAG,UAAU,CAAC,eAAe,EAAE,OAAO,EAAE,GAAG,EAAE,EAAE,CAAC,CAAA;QAC5D,IAAM,iBAAiB,GAAG,iBAAiB,CAAC,MAAM,CAAC,MAAM,EAAE,cAAc,EAAE,eAAe,CAAC,CAAA;QAC3F,IAAM,UAAU,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAA;QAElC,IAAM,QAAQ,GAAG,WAAI,CACnB,cAAO,CAAC,GAAG,EAAE,cAAc,CAAC,EAC5B,iBAAiB,CAAC,EAAE,OAAO,EAAE,EAAE,CAAC,OAAO,EAAE,IAAI,MAAA,EAAE,cAAc,gBAAA,EAAE,eAAe,iBAAA,EAAE,MAAM,QAAA,EAAE,QAAQ,UAAA,EAAE,CAAC,CACpG,CAAA;QAGD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QAGrB,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;YAC7B,MAAM,IAAI,OAAO,CAAC,iBAAiB,CAAC,iBAAiB,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAA;QACrE,CAAC;QAGD,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;YAC3B,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YACtB,iBAAiB,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,iBAAiB,CAAC,CAAA;QAC9D,CAAC;QAGD,GAAG,CAAC,CAAmB,UAAgB,EAAhB,KAAA,MAAM,CAAC,SAAS,EAAhB,cAAgB,EAAhB,IAAgB;YAAlC,IAAM,QAAQ,SAAA;YACjB,EAAE,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAC9B,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAA;YAC9B,CAAC;SACF;QAKD,sBAAuB,QAAgB;YACrC,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,KAAK,EAAE,CAAC,OAAO,CAAC,QAAQ,IAAI,cAAO,CAAC,QAAQ,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC;gBAC/E,MAAM,CAAC,MAAM,CAAA;YACf,CAAC;YAED,MAAM,CAAC,KAAK,CAAA;QACd,CAAC;QAKD,IAAI,SAAS,GAAG,UAAU,IAAY,EAAE,QAAgB,EAAE,UAAc;YAAd,2BAAA,EAAA,cAAc;YACtE,IAAM,MAAM,GAAG,EAAE,CAAC,eAAe,CAAC,IAAI,EAAE;gBACtC,QAAQ,UAAA;gBACR,eAAe,EAAE,MAAM,CAAC,OAAO;gBAC/B,iBAAiB,EAAE,IAAI;aACxB,CAAC,CAAA;YAEF,IAAM,cAAc,GAAG,MAAM,CAAC,WAAW;gBACvC,iBAAiB,CAAC,MAAM,CAAC,WAAW,EAAE,cAAc,EAAE,eAAe,CAAC;gBACtE,EAAE,CAAA;YAEJ,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC1B,MAAM,IAAI,OAAO,CAAC,iBAAiB,CAAC,cAAc,EAAE,GAAG,EAAE,EAAE,EAAE,UAAU,CAAC,CAAC,CAAA;YAC3E,CAAC;YAED,MAAM,CAAC,CAAC,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,aAAuB,CAAC,CAAA;QAC5D,CAAC,CAAA;QAED,IAAI,OAAO,GAAG,WAAW,CACvB,QAAQ,EACR,WAAW,EACX,OAAO,EACP,UAAU,EACV,KAAK,EACL,SAAS,EACT,YAAY,CACb,CAAA;QAED,IAAI,WAAW,GAAG,UAAU,QAAgB,EAAE,QAAgB;YAC5D,MAAM,IAAI,SAAS,CAAC,qDAAmD,CAAC,CAAA;QAC1E,CAAC,CAAA;QAGD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YAEV,IAAM,YAAU,GAAG,UAAU,QAAgB;gBAC3C,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAC7C,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAA;gBAC9B,CAAC;YACH,CAAC,CAAA;YAGD,IAAM,UAAQ,GAAG,UAAU,IAAY,EAAE,QAAgB;gBACvD,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAA;gBAC/B,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAA;YAC/B,CAAC,CAAA;YAGD,IAAM,WAAW,GAAG;gBAClB,kBAAkB,EAAE,cAAM,OAAA,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAA3B,CAA2B;gBACrD,gBAAgB,EAAE,UAAC,QAAgB,IAAK,OAAA,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAAhC,CAAgC;gBACxE,iBAAiB,YAAE,QAAgB;oBACjC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;wBAC7C,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;4BAC1B,MAAM,CAAC,SAAS,CAAA;wBAClB,CAAC;wBAED,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAA;oBAC9C,CAAC;oBAED,MAAM,CAAC,EAAE,CAAC,cAAc,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAA;gBAC/D,CAAC;gBACD,cAAc,EAAE,cAAc;gBAC9B,eAAe,EAAE,eAAe;gBAChC,UAAU,EAAE,cAAM,OAAA,QAAG,EAAH,CAAG;gBACrB,mBAAmB,EAAE,cAAM,OAAA,GAAG,EAAH,CAAG;gBAC9B,sBAAsB,EAAE,cAAM,OAAA,MAAM,CAAC,OAAO,EAAd,CAAc;gBAC5C,qBAAqB,EAAE,UAAC,OAAY,IAAK,OAAA,EAAE,CAAC,qBAAqB,CAAC,MAAM,CAAC,OAAO,CAAC,EAAxC,CAAwC;aAClF,CAAA;YAED,IAAM,SAAO,GAAG,EAAE,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAA;YAErD,SAAS,GAAG,UAAU,IAAY,EAAE,QAAgB,EAAE,UAAsB;gBAAtB,2BAAA,EAAA,cAAsB;gBAC1E,IAAM,MAAM,GAAG,SAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAA;gBAG9C,IAAM,WAAW,GAAG,SAAO,CAAC,6BAA6B,EAAE;qBACxD,MAAM,CAAC,SAAO,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;qBACjD,MAAM,CAAC,SAAO,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC,CAAA;gBAEnD,IAAM,cAAc,GAAG,iBAAiB,CAAC,WAAW,EAAE,cAAc,EAAE,eAAe,CAAC,CAAA;gBAEtF,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC;oBAC1B,MAAM,IAAI,OAAO,CAAC,iBAAiB,CAAC,cAAc,EAAE,GAAG,EAAE,EAAE,EAAE,UAAU,CAAC,CAAC,CAAA;gBAC3E,CAAC;gBAED,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;oBACvB,MAAM,IAAI,SAAS,CAAI,eAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,mBAAgB,CAAC,CAAA;gBACjE,CAAC;gBAGD,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;oBACpC,MAAM,IAAI,SAAS,CACjB,mCAAmC;wBACnC,kEAAkE;wBAClE,0EAA0E;wBAC1E,yDAAyD;yBACzD,MAAK,eAAQ,CAAC,QAAQ,CAAC,OAAK,CAAA,CAC7B,CAAA;gBACH,CAAC;gBAED,MAAM,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAA;YACjE,CAAC,CAAA;YAED,OAAO,GAAG,WAAW,CACnB,QAAQ,EACR,WAAW,EACX,OAAO,EACP,UAAU,EACV,KAAK,EACL,UAAU,IAAY,EAAE,QAAgB,EAAE,UAAmB;gBAC3D,YAAU,CAAC,QAAQ,CAAC,CAAA;gBACpB,UAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAA;gBAExB,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAA;YAC9C,CAAC,EACD,YAAY,CACb,CAAA;YAED,WAAW,GAAG,UAAU,QAAgB,EAAE,QAAgB;gBACxD,YAAU,CAAC,QAAQ,CAAC,CAAA;gBAEpB,IAAM,IAAI,GAAG,SAAO,CAAC,sBAAsB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAA;gBAC/D,IAAM,IAAI,GAAG,EAAE,CAAC,oBAAoB,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC,CAAA;gBACnE,IAAM,OAAO,GAAG,EAAE,CAAC,oBAAoB,CAAC,IAAI,GAAG,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC,CAAA;gBAEvE,MAAM,CAAC,EAAE,IAAI,MAAA,EAAE,OAAO,SAAA,EAAE,CAAA;YAC1B,CAAC,CAAA;QACH,CAAC;QAED,MAAM,CAAC,EAAE,GAAG,KAAA,EAAE,OAAO,SAAA,EAAE,WAAW,aAAA,EAAE,UAAU,YAAA,EAAE,CAAA;IAClD,CAAC;IAED;QACE,MAAM,CAAC,MAAM,IAAI,CAAC,MAAM,GAAG,IAAI,EAAE,CAAC,CAAA;IACpC,CAAC;IAGD,iBAAiB,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,iBAAiB,CAAC,CAAA;IAC5D,iBAAiB,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,iBAAiB,CAAC,CAAA;IAG7D,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;QAClB,OAAO,EAAE,CAAA;IACX,CAAC;IAED,MAAM,CAAC,OAAO,CAAA;AAChB,CAAC;AA5OD,4BA4OC;AAKD,sBAAuB,QAAgB,EAAE,MAAgB,EAAE,OAAuB;IAChF,IAAM,OAAO,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAA;IAE/B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,EAAf,CAAe,CAAC,CAAA;AAC1C,CAAC;AAKD,2BACE,GAAW,EACX,MAAgB,EAChB,OAAuB,EACvB,eAAyD;IAEzD,IAAM,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,eAAe,CAAA;IAEtD,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,EAAE,QAAQ;QAC7C,EAAE,CAAC,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;YAC5C,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAA;QACzB,CAAC;QAED,IAAM,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAA;QAE3B,CAAC,CAAC,QAAQ,GAAG,UAAU,IAAI,EAAE,QAAQ;YACnC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAE,QAAQ,CAAC,CAAA;QACzE,CAAC,CAAA;QAED,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAA;IACzB,CAAC,CAAA;AACH,CAAC;AAKD,oBAAqB,eAAoB,EAAE,OAAqC,EAAE,GAAW,EAAE,EAAY;IACzG,IAAM,MAAM,GAAG,mBAAQ,CAAC,GAAG,EAAE,OAAO,OAAO,KAAK,QAAQ,GAAG,OAAO,GAAG,SAAS,CAAC,CAAA;IAE/E,MAAM,CAAC,MAAM,CAAC,eAAe,GAAG,MAAM,CACpC;QACE,MAAM,EAAE,KAAK;QACb,MAAM,EAAE,UAAU;KACnB,EACD,MAAM,CAAC,MAAM,CAAC,eAAe,EAC7B,eAAe,EACf;QACE,SAAS,EAAE,IAAI;QACf,eAAe,EAAE,KAAK;QACtB,aAAa,EAAE,IAAI;QACnB,WAAW,EAAE,KAAK;QAClB,MAAM,EAAE,KAAK;QACb,MAAM,EAAE,aAAa;KACtB,CACF,CAAA;IAGD,OAAO,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,GAAG,CAAA;IACxC,OAAO,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,OAAO,CAAA;IAC5C,OAAO,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,cAAc,CAAA;IAEnD,IAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,GAAG,cAAO,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,GAAG,CAAA;IAEzD,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,eAAe,KAAK,UAAU,CAAC,CAAC,CAAC;QAC7C,MAAM,CAAC,EAAE,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAA;IAC5D,CAAC;IAED,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,0BAA0B,KAAK,UAAU,CAAC,CAAC,CAAC;QACxD,MAAM,CAAC,EAAE,CAAC,0BAA0B,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,CAAC,IAAc,CAAC,CAAA;IACpG,CAAC;IAED,MAAM,IAAI,SAAS,CAAC,wDAAwD,CAAC,CAAA;AAC/E,CAAC;AAUD,qBACE,QAAgB,EAChB,WAAoB,EACpB,OAAqC,EACrC,UAAyC,EACzC,KAAY,EACZ,OAA8E,EAC9E,YAA0C;IAE1C,EAAE,CAAC,CAAC,WAAW,KAAK,KAAK,CAAC,CAAC,CAAC;QAC1B,MAAM,CAAC,UAAU,IAAY,EAAE,QAAgB,EAAE,UAAmB;YAClE,IAAM,SAAS,GAAG,WAAI,CAAC,QAAQ,EAAE,YAAY,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAA;YAC9D,IAAM,SAAS,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAA;YACxC,IAAM,aAAa,GAAG,KAAG,SAAS,GAAG,SAAS,SAAM,CAAA;YACpD,IAAM,GAAG,GAAG,OAAO,CAAC,IAAI,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAA;YAE/C,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,aAAa,CAAA;YAE1C,IAAM,MAAM,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,aAAa,CAAC,CAAA;YACvE,IAAM,SAAS,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAA;YAEnD,kBAAa,CAAC,aAAa,EAAE,SAAS,CAAC,CAAA;YAEvC,MAAM,CAAC,MAAM,CAAA;QACf,CAAC,CAAA;IACH,CAAC;IAED,MAAM,CAAC,UAAU,IAAY,EAAE,QAAgB,EAAE,UAAmB;QAClE,IAAM,SAAS,GAAG,WAAI,CAAC,QAAQ,EAAE,YAAY,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAA;QAC9D,IAAM,SAAS,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAA;QACxC,IAAM,UAAU,GAAG,KAAG,SAAS,GAAG,SAAW,CAAA;QAC7C,IAAM,aAAa,GAAM,UAAU,SAAM,CAAA;QAEzC,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,aAAa,CAAA;QAG1C,EAAE,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAA;QAC5B,CAAC;QAED,IAAM,GAAG,GAAG,OAAO,CAAC,IAAI,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAA;QAE/C,IAAM,MAAM,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,aAAa,CAAC,CAAA;QACvE,IAAM,SAAS,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAA;QAEnD,kBAAa,CAAC,UAAU,EAAE,MAAM,CAAC,CAAA;QACjC,kBAAa,CAAC,aAAa,EAAE,SAAS,CAAC,CAAA;QAEvC,MAAM,CAAC,MAAM,CAAA;IACf,CAAC,CAAA;AACH,CAAC;AAKD,sBAAuB,UAAkB,EAAE,QAAgB,EAAE,SAAiB,EAAE,aAAqB;IAEnG,IAAM,GAAG,GAAG,cAAO,CAAC,QAAQ,CAAC,CAAA;IAC7B,IAAM,YAAY,GAAG,eAAQ,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,IAAM,SAAS,SAAM,CAAA,CAAA;IAClF,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,aAAa,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAA;AACtF,CAAC;AAKD,yBAA0B,aAAqB,EAAE,QAAgB;IAC/D,IAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAA;IAC3C,SAAS,CAAC,IAAI,GAAG,QAAQ,CAAA;IACzB,SAAS,CAAC,OAAO,GAAG,CAAC,QAAQ,CAAC,CAAA;IAC9B,OAAO,SAAS,CAAC,UAAU,CAAA;IAC3B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAA;AAClC,CAAC;AAKD,sBAAuB,UAAkB,EAAE,QAAgB;IACzD,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC;SAC7B,MAAM,CAAC,cAAO,CAAC,QAAQ,CAAC,EAAE,MAAM,CAAC;SACjC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC;SACpB,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC;SAC1B,MAAM,CAAC,KAAK,CAAC,CAAA;AAClB,CAAC;AAKD,2BAA4B,IAAS;IACnC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;AACrF,CAAC;AAKD,oBAA4B,QAAgB;IAC1C,IAAI,CAAC;QACH,IAAM,KAAK,GAAG,aAAQ,CAAC,QAAQ,CAAC,CAAA;QAEhC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,KAAK,CAAC,MAAM,EAAE,CAAA;IACzC,CAAE;IAAA,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACb,MAAM,CAAC,KAAK,CAAA;IACd,CAAC;AACH,CAAC;AARD,gCAQC;AAKD,wBAAgC,IAAY;IAC1C,MAAM,CAAC,gBAAW,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,eAAe,CAAC,WAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,EAAjC,CAAiC,CAAC,CAAA;AAC5E,CAAC;AAFD,wCAEC;AAKD,yBAAiC,IAAY;IAC3C,IAAI,CAAC;QACH,MAAM,CAAC,aAAQ,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAA;IACrC,CAAE;IAAA,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACb,MAAM,CAAC,KAAK,CAAA;IACd,CAAC;AACH,CAAC;AAND,0CAMC;AAKD,iBAAyB,QAAgB;IACvC,MAAM,CAAC,iBAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAA;AACvC,CAAC;AAFD,0BAEC;AAKD,2BAA4B,WAA4B,EAAE,MAAgB,EAAE,OAAgB;IAC1F,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QACZ,MAAM,CAAC,EAAE,CAAA;IACX,CAAC;IAED,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,EAAtB,CAAsB,CAAC,CAAA;AACxD,CAAC;AAKD,2BAAmC,WAA4B,EAAE,GAAW,EAAE,EAAY,EAAE,UAAkB;IAC5G,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,gBAAgB,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,UAAU,CAAC,EAAxC,CAAwC,CAAC,CAAA;AACvE,CAAC;AAFD,8CAEC;AAaD,0BACE,UAAyB,EACzB,GAAW,EACX,EAAY,EACZ,UAAkB;IAElB,IAAM,WAAW,GAAG,EAAE,CAAC,4BAA4B,CAAC,UAAU,CAAC,WAAW,EAAE,IAAI,CAAC,CAAA;IAEjF,EAAE,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;QACpB,IAAM,IAAI,GAAG,eAAQ,CAAC,GAAG,EAAE,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QAC9C,IAAA,oEAAqF,EAAnF,cAAI,EAAE,wBAAS,CAAoE;QAC3F,IAAM,OAAO,GAAM,IAAI,WAAK,IAAI,GAAG,CAAC,GAAG,UAAU,WAAI,SAAS,GAAG,CAAC,YAAM,WAAW,UAAK,UAAU,CAAC,IAAI,MAAG,CAAA;QAE1G,MAAM,CAAC,EAAE,OAAO,SAAA,EAAE,IAAI,EAAE,UAAU,CAAC,IAAI,EAAE,CAAA;IAC3C,CAAC;IAED,MAAM,CAAC,EAAE,OAAO,EAAK,WAAW,UAAK,UAAU,CAAC,IAAI,MAAG,EAAE,IAAI,EAAE,UAAU,CAAC,IAAI,EAAE,CAAA;AAClF,CAAC;AAjBD,4CAiBC;AAKD;IAA6B,2BAAS;IAIpC,iBAAoB,WAA2B;QAA/C,YACE,kBACE,0CAAmC,WAAW,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,OAAO,EAAT,CAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAG,CAChF,SACF;QAJmB,iBAAW,GAAX,WAAW,CAAgB;QAF/C,UAAI,GAAG,SAAS,CAAA;;IAMhB,CAAC;IAEH,cAAC;AAAD,CAAC,AAVD,CAA6B,sBAAS,GAUrC;AAVY,0BAAO","sourcesContent":["import { relative, basename, extname, resolve, dirname, join } from 'path'\nimport { readdirSync, writeFileSync, readFileSync, statSync } from 'fs'\nimport { EOL, tmpdir } from 'os'\nimport sourceMapSupport = require('source-map-support')\nimport extend = require('xtend')\nimport mkdirp = require('mkdirp')\nimport crypto = require('crypto')\nimport yn = require('yn')\nimport arrify = require('arrify')\nimport { BaseError } from 'make-error'\nimport * as TS from 'typescript'\nimport { loadSync } from 'tsconfig'\n\nconst pkg = require('../package.json')\n\n/**\n * Common TypeScript interfaces between versions.\n */\nexport interface TSCommon {\n  version: typeof TS.version\n  sys: typeof TS.sys\n  ScriptSnapshot: typeof TS.ScriptSnapshot\n  displayPartsToString: typeof TS.displayPartsToString\n  createLanguageService: typeof TS.createLanguageService\n  getDefaultLibFilePath: typeof TS.getDefaultLibFilePath\n  getPreEmitDiagnostics: typeof TS.getPreEmitDiagnostics\n  flattenDiagnosticMessageText: typeof TS.flattenDiagnosticMessageText\n  transpileModule: typeof TS.transpileModule\n\n  // TypeScript 1.5+, 1.7+ added `fileExists` parameter.\n  findConfigFile (path: string, fileExists?: (path: string) => boolean): string\n\n  // TypeScript 1.5+, 1.7+ added `readFile` parameter.\n  readConfigFile (path: string, readFile?: (path: string) => string): {\n    config?: any\n    error?: TS.Diagnostic\n  }\n\n  // TypeScript 1.7+.\n  parseJsonConfigFileContent? (\n    json: any,\n    host: any,\n    basePath: string,\n    existingOptions: any,\n    configFileName: string\n  ): any\n\n  // TypeScript 1.5+.\n  parseConfigFile? (json: any, host: any, basePath: string): any\n}\n\n/**\n * Export the current version.\n */\nexport const VERSION = pkg.version\n\n/**\n * Registration options.\n */\nexport interface Options {\n  fast?: boolean | null\n  lazy?: boolean | null\n  cache?: boolean | null\n  cacheDirectory?: string\n  compiler?: string\n  project?: boolean | string\n  ignore?: boolean | string | string[]\n  ignoreWarnings?: number | string | Array<number | string>\n  disableWarnings?: boolean | null\n  getFile?: (fileName: string) => string\n  fileExists?: (fileName: string) => boolean\n  compilerOptions?: any\n}\n\n/**\n * Track the project information.\n */\ninterface Cache {\n  contents: { [fileName: string]: string }\n  versions: { [fileName: string]: number }\n  sourceMaps: { [fileName: string]: string }\n}\n\n/**\n * Information retrieved from type info check.\n */\nexport interface TypeInfo {\n  name: string\n  comment: string\n}\n\n/**\n * Default register options.\n */\nconst DEFAULTS = {\n  getFile,\n  fileExists,\n  cache: yn(process.env['TS_NODE_CACHE']),\n  cacheDirectory: process.env['TS_NODE_CACHE_DIRECTORY'],\n  disableWarnings: yn(process.env['TS_NODE_DISABLE_WARNINGS']),\n  compiler: process.env['TS_NODE_COMPILER'],\n  compilerOptions: parse(process.env['TS_NODE_COMPILER_OPTIONS']),\n  project: process.env['TS_NODE_PROJECT'],\n  ignore: split(process.env['TS_NODE_IGNORE']),\n  ignoreWarnings: split(process.env['TS_NODE_IGNORE_WARNINGS']),\n  fast: yn(process.env['TS_NODE_FAST'])\n}\n\n/**\n * Split a string array of values.\n */\nexport function split (value: string | undefined) {\n  return value ? value.split(/ *, */g) : undefined\n}\n\n/**\n * Parse a string as JSON.\n */\nexport function parse (value: string | undefined) {\n  return value ? JSON.parse(value) : undefined\n}\n\n/**\n * Replace backslashes with forward slashes.\n */\nexport function slash (value: string): string {\n  return value.replace(/\\\\/g, '/')\n}\n\nexport interface Register {\n  cwd: string\n  extensions: string[]\n  compile (code: string, fileName: string, lineOffset?: number): string\n  getTypeInfo (fileName: string, position: number): TypeInfo\n}\n\n/**\n * Register TypeScript compiler.\n */\nexport function register (options: Options = {}): () => Register {\n  const compiler = options.compiler || 'typescript'\n  const emptyFileListWarnings = [18002, 18003]\n  const ignoreWarnings = arrify(\n    options.ignoreWarnings || DEFAULTS.ignoreWarnings || []\n  ).concat(emptyFileListWarnings).map(Number)\n  const disableWarnings = !!(options.disableWarnings == null ? DEFAULTS.disableWarnings : options.disableWarnings)\n  const getFile = options.getFile || DEFAULTS.getFile\n  const fileExists = options.fileExists || DEFAULTS.fileExists\n  const shouldCache = !!(options.cache == null ? DEFAULTS.cache : options.cache)\n  const fast = !!(options.fast == null ? DEFAULTS.fast : options.fast)\n  const project = options.project || DEFAULTS.project\n  const cacheDirectory = options.cacheDirectory || DEFAULTS.cacheDirectory || join(tmpdir(), 'ts-node')\n  const compilerOptions = extend(DEFAULTS.compilerOptions, options.compilerOptions)\n  const originalJsHandler = require.extensions['.js']\n  let result: Register\n\n  const ignore = arrify(\n    (\n      typeof options.ignore === 'boolean' ?\n        (options.ignore === false ? [] : undefined) :\n        (options.ignore || DEFAULTS.ignore)\n    ) ||\n    ['/node_modules/']\n  ).map(str => new RegExp(str))\n\n  function load () {\n    const cache: Cache = { contents: {}, versions: {}, sourceMaps: {} }\n\n    // Install source map support and read from cache.\n    sourceMapSupport.install({\n      environment: 'node',\n      retrieveSourceMap (fileName: string) {\n        if (cache.sourceMaps[fileName]) {\n          return {\n            url: cache.sourceMaps[fileName],\n            map: getFile(cache.sourceMaps[fileName])\n          }\n        }\n      }\n    })\n\n    // Require the TypeScript compiler and configuration.\n    const cwd = process.cwd()\n    const ts: typeof TS = require(compiler)\n    const config = readConfig(compilerOptions, project, cwd, ts)\n    const configDiagnostics = filterDiagnostics(config.errors, ignoreWarnings, disableWarnings)\n    const extensions = ['.ts', '.tsx']\n\n    const cachedir = join(\n      resolve(cwd, cacheDirectory),\n      getCompilerDigest({ version: ts.version, fast, ignoreWarnings, disableWarnings, config, compiler })\n    )\n\n    // Make sure the temp cache directory exists.\n    mkdirp.sync(cachedir)\n\n    // Render the configuration errors and exit the script.\n    if (configDiagnostics.length) {\n      throw new TSError(formatDiagnostics(configDiagnostics, cwd, ts, 0))\n    }\n\n    // Enable `allowJs` when flag is set.\n    if (config.options.allowJs) {\n      extensions.push('.js')\n      registerExtension('.js', ignore, service, originalJsHandler)\n    }\n\n    // Add all files into the file hash.\n    for (const fileName of config.fileNames) {\n      if (/\\.d\\.ts$/.test(fileName)) {\n        cache.versions[fileName] = 1\n      }\n    }\n\n    /**\n     * Get the extension for a transpiled file.\n     */\n    function getExtension (fileName: string) {\n      if (config.options.jsx === ts.JsxEmit.Preserve && extname(fileName) === '.tsx') {\n        return '.jsx'\n      }\n\n      return '.js'\n    }\n\n    /**\n     * Create the basic required function using transpile mode.\n     */\n    let getOutput = function (code: string, fileName: string, lineOffset = 0): SourceOutput {\n      const result = ts.transpileModule(code, {\n        fileName,\n        compilerOptions: config.options,\n        reportDiagnostics: true\n      })\n\n      const diagnosticList = result.diagnostics ?\n        filterDiagnostics(result.diagnostics, ignoreWarnings, disableWarnings) :\n        []\n\n      if (diagnosticList.length) {\n        throw new TSError(formatDiagnostics(diagnosticList, cwd, ts, lineOffset))\n      }\n\n      return [result.outputText, result.sourceMapText as string]\n    }\n\n    let compile = readThrough(\n      cachedir,\n      shouldCache,\n      getFile,\n      fileExists,\n      cache,\n      getOutput,\n      getExtension\n    )\n\n    let getTypeInfo = function (fileName: string, position: number): TypeInfo {\n      throw new TypeError(`No type information available under \"--fast\" mode`)\n    }\n\n    // Use full language services when the fast option is disabled.\n    if (!fast) {\n      // Add the file to the project.\n      const addVersion = function (fileName: string) {\n        if (!cache.versions.hasOwnProperty(fileName)) {\n          cache.versions[fileName] = 1\n        }\n      }\n\n      // Set the file contents into cache.\n      const addCache = function (code: string, fileName: string) {\n        cache.contents[fileName] = code\n        cache.versions[fileName] += 1\n      }\n\n      // Create the compiler host for type checking.\n      const serviceHost = {\n        getScriptFileNames: () => Object.keys(cache.versions),\n        getScriptVersion: (fileName: string) => String(cache.versions[fileName]),\n        getScriptSnapshot (fileName: string) {\n          if (!cache.contents.hasOwnProperty(fileName)) {\n            if (!fileExists(fileName)) {\n              return undefined\n            }\n\n            cache.contents[fileName] = getFile(fileName)\n          }\n\n          return ts.ScriptSnapshot.fromString(cache.contents[fileName])\n        },\n        getDirectories: getDirectories,\n        directoryExists: directoryExists,\n        getNewLine: () => EOL,\n        getCurrentDirectory: () => cwd,\n        getCompilationSettings: () => config.options,\n        getDefaultLibFileName: (options: any) => ts.getDefaultLibFilePath(config.options)\n      }\n\n      const service = ts.createLanguageService(serviceHost)\n\n      getOutput = function (code: string, fileName: string, lineOffset: number = 0) {\n        const output = service.getEmitOutput(fileName)\n\n        // Get the relevant diagnostics - this is 3x faster than `getPreEmitDiagnostics`.\n        const diagnostics = service.getCompilerOptionsDiagnostics()\n          .concat(service.getSyntacticDiagnostics(fileName))\n          .concat(service.getSemanticDiagnostics(fileName))\n\n        const diagnosticList = filterDiagnostics(diagnostics, ignoreWarnings, disableWarnings)\n\n        if (diagnosticList.length) {\n          throw new TSError(formatDiagnostics(diagnosticList, cwd, ts, lineOffset))\n        }\n\n        if (output.emitSkipped) {\n          throw new TypeError(`${relative(cwd, fileName)}: Emit skipped`)\n        }\n\n        // Throw an error when requiring `.d.ts` files.\n        if (output.outputFiles.length === 0) {\n          throw new TypeError(\n            'Unable to require `.d.ts` file.\\n' +\n            'This is usually the result of a faulty configuration or import. ' +\n            'Make sure there is a `.js`, `.json` or another executable extension and ' +\n            'loader (attached before `ts-node`) available alongside ' +\n            `\\`${basename(fileName)}\\`.`\n          )\n        }\n\n        return [output.outputFiles[1].text, output.outputFiles[0].text]\n      }\n\n      compile = readThrough(\n        cachedir,\n        shouldCache,\n        getFile,\n        fileExists,\n        cache,\n        function (code: string, fileName: string, lineOffset?: number) {\n          addVersion(fileName)\n          addCache(code, fileName)\n\n          return getOutput(code, fileName, lineOffset)\n        },\n        getExtension\n      )\n\n      getTypeInfo = function (fileName: string, position: number) {\n        addVersion(fileName)\n\n        const info = service.getQuickInfoAtPosition(fileName, position)\n        const name = ts.displayPartsToString(info ? info.displayParts : [])\n        const comment = ts.displayPartsToString(info ? info.documentation : [])\n\n        return { name, comment }\n      }\n    }\n\n    return { cwd, compile, getTypeInfo, extensions }\n  }\n\n  function service () {\n    return result || (result = load())\n  }\n\n  // Eagerly register TypeScript extensions (JavaScript is registered lazily).\n  registerExtension('.ts', ignore, service, originalJsHandler)\n  registerExtension('.tsx', ignore, service, originalJsHandler)\n\n  // Immediately initialize the TypeScript compiler.\n  if (!options.lazy) {\n    service()\n  }\n\n  return service\n}\n\n/**\n * Check if the filename should be ignored.\n */\nfunction shouldIgnore (filename: string, ignore: RegExp[], service: () => Register) {\n  const relname = slash(filename)\n\n  return ignore.some(x => x.test(relname))\n}\n\n/**\n * Register the extension for node.\n */\nfunction registerExtension (\n  ext: string,\n  ignore: RegExp[],\n  service: () => Register,\n  originalHandler: (m: NodeModule, filename: string) => any\n) {\n  const old = require.extensions[ext] || originalHandler\n\n  require.extensions[ext] = function (m, filename) {\n    if (shouldIgnore(filename, ignore, service)) {\n      return old(m, filename)\n    }\n\n    const _compile = m._compile\n\n    m._compile = function (code, fileName) {\n      return _compile.call(this, service().compile(code, fileName), fileName)\n    }\n\n    return old(m, filename)\n  }\n}\n\n/**\n * Load TypeScript configuration.\n */\nfunction readConfig (compilerOptions: any, project: string | boolean | undefined, cwd: string, ts: TSCommon) {\n  const result = loadSync(cwd, typeof project === 'string' ? project : undefined)\n\n  result.config.compilerOptions = extend(\n    {\n      target: 'es5',\n      module: 'commonjs'\n    },\n    result.config.compilerOptions,\n    compilerOptions,\n    {\n      sourceMap: true,\n      inlineSourceMap: false,\n      inlineSources: true,\n      declaration: false,\n      noEmit: false,\n      outDir: '$$ts-node$$'\n    }\n  )\n\n  // Delete options that *should not* be passed through.\n  delete result.config.compilerOptions.out\n  delete result.config.compilerOptions.outFile\n  delete result.config.compilerOptions.declarationDir\n\n  const basePath = result.path ? dirname(result.path) : cwd\n\n  if (typeof ts.parseConfigFile === 'function') {\n    return ts.parseConfigFile(result.config, ts.sys, basePath)\n  }\n\n  if (typeof ts.parseJsonConfigFileContent === 'function') {\n    return ts.parseJsonConfigFileContent(result.config, ts.sys, basePath, null, result.path as string)\n  }\n\n  throw new TypeError('Could not find a compatible `parseConfigFile` function')\n}\n\n/**\n * Internal source output.\n */\ntype SourceOutput = [string, string]\n\n/**\n * Wrap the function with caching.\n */\nfunction readThrough (\n  cachedir: string,\n  shouldCache: boolean,\n  getFile: (fileName: string) => string,\n  fileExists: (fileName: string) => boolean,\n  cache: Cache,\n  compile: (code: string, fileName: string, lineOffset?: number) => SourceOutput,\n  getExtension: (fileName: string) => string\n) {\n  if (shouldCache === false) {\n    return function (code: string, fileName: string, lineOffset?: number) {\n      const cachePath = join(cachedir, getCacheName(code, fileName))\n      const extension = getExtension(fileName)\n      const sourceMapPath = `${cachePath}${extension}.map`\n      const out = compile(code, fileName, lineOffset)\n\n      cache.sourceMaps[fileName] = sourceMapPath\n\n      const output = updateOutput(out[0], fileName, extension, sourceMapPath)\n      const sourceMap = updateSourceMap(out[1], fileName)\n\n      writeFileSync(sourceMapPath, sourceMap)\n\n      return output\n    }\n  }\n\n  return function (code: string, fileName: string, lineOffset?: number) {\n    const cachePath = join(cachedir, getCacheName(code, fileName))\n    const extension = getExtension(fileName)\n    const outputPath = `${cachePath}${extension}`\n    const sourceMapPath = `${outputPath}.map`\n\n    cache.sourceMaps[fileName] = sourceMapPath\n\n    // Use the cache when available.\n    if (fileExists(outputPath)) {\n      return getFile(outputPath)\n    }\n\n    const out = compile(code, fileName, lineOffset)\n\n    const output = updateOutput(out[0], fileName, extension, sourceMapPath)\n    const sourceMap = updateSourceMap(out[1], fileName)\n\n    writeFileSync(outputPath, output)\n    writeFileSync(sourceMapPath, sourceMap)\n\n    return output\n  }\n}\n\n/**\n * Update the output remapping the source map.\n */\nfunction updateOutput (outputText: string, fileName: string, extension: string, sourceMapPath: string) {\n  // Replace the original extension (E.g. `.ts`).\n  const ext = extname(fileName)\n  const originalPath = basename(fileName).slice(0, -ext.length) + `${extension}.map`\n  return outputText.slice(0, -originalPath.length) + sourceMapPath.replace(/\\\\/g, '/')\n}\n\n/**\n * Update the source map contents for improved output.\n */\nfunction updateSourceMap (sourceMapText: string, fileName: string) {\n  const sourceMap = JSON.parse(sourceMapText)\n  sourceMap.file = fileName\n  sourceMap.sources = [fileName]\n  delete sourceMap.sourceRoot\n  return JSON.stringify(sourceMap)\n}\n\n/**\n * Get the file name for the cache entry.\n */\nfunction getCacheName (sourceCode: string, fileName: string) {\n  return crypto.createHash('sha1')\n    .update(extname(fileName), 'utf8')\n    .update('\\0', 'utf8')\n    .update(sourceCode, 'utf8')\n    .digest('hex')\n}\n\n/**\n * Create a hash of the current configuration.\n */\nfunction getCompilerDigest (opts: any) {\n  return crypto.createHash('sha1').update(JSON.stringify(opts), 'utf8').digest('hex')\n}\n\n/**\n * Check if the file exists.\n */\nexport function fileExists (fileName: string): boolean {\n  try {\n    const stats = statSync(fileName)\n\n    return stats.isFile() || stats.isFIFO()\n  } catch (err) {\n    return false\n  }\n}\n\n/**\n * Get directories within a directory.\n */\nexport function getDirectories (path: string): string[] {\n  return readdirSync(path).filter(name => directoryExists(join(path, name)))\n}\n\n/**\n * Check if a directory exists.\n */\nexport function directoryExists (path: string): boolean {\n  try {\n    return statSync(path).isDirectory()\n  } catch (err) {\n    return false\n  }\n}\n\n/**\n * Get the file from the file system.\n */\nexport function getFile (fileName: string): string {\n  return readFileSync(fileName, 'utf8')\n}\n\n/**\n * Filter diagnostics.\n */\nfunction filterDiagnostics (diagnostics: TS.Diagnostic[], ignore: number[], disable: boolean) {\n  if (disable) {\n    return []\n  }\n\n  return diagnostics.filter(x => ignore.indexOf(x.code))\n}\n\n/**\n * Format an array of diagnostics.\n */\nexport function formatDiagnostics (diagnostics: TS.Diagnostic[], cwd: string, ts: TSCommon, lineOffset: number) {\n  return diagnostics.map(x => formatDiagnostic(x, cwd, ts, lineOffset))\n}\n\n/**\n * Internal diagnostic representation.\n */\nexport interface TSDiagnostic {\n  message: string\n  code: number\n}\n\n/**\n * Format a diagnostic object into a string.\n */\nexport function formatDiagnostic (\n  diagnostic: TS.Diagnostic,\n  cwd: string,\n  ts: TSCommon,\n  lineOffset: number\n): TSDiagnostic {\n  const messageText = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n')\n\n  if (diagnostic.file) {\n    const path = relative(cwd, diagnostic.file.fileName)\n    const { line, character } = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start)\n    const message = `${path} (${line + 1 + lineOffset},${character + 1}): ${messageText} (${diagnostic.code})`\n\n    return { message, code: diagnostic.code }\n  }\n\n  return { message: `${messageText} (${diagnostic.code})`, code: diagnostic.code }\n}\n\n/**\n * TypeScript diagnostics error.\n */\nexport class TSError extends BaseError {\n\n  name = 'TSError'\n\n  constructor (public diagnostics: TSDiagnostic[]) {\n    super(\n      `⨯ Unable to compile TypeScript\\n${diagnostics.map(x => x.message).join('\\n')}`\n    )\n  }\n\n}\n"]}