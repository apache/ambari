{"version":3,"sources":["../../.tmp/dropdown/bs-dropdown.state.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAA,EAAc,UAAA,EAAW,MAAO,eAAA,CAAgB;AAIzD;IAaE;QAAA,iBAIC;QAhBD,cAAS,GAAkB,MAAM,CAAC;QAElC,iBAAY,GAAG,IAAI,YAAY,EAAW,CAAC;QAC3C,qBAAgB,GAAG,IAAI,YAAY,EAAW,CAAC;QAC/C,gBAAW,GAAG,IAAI,YAAY,EAAW,CAAC;QASxC,IAAI,CAAC,YAAY,GAAG,IAAI,OAAO,CAAC,UAAC,OAAO;YACtC,KAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC;IACI,0BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,8BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACF,sBAAC;CAxBD,AAwBC,IAAA;SAxBY,eAAe","file":"bs-dropdown.state.js","sourceRoot":"","sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\nimport { BsComponentRef } from '../component-loader/bs-component-ref.class';\n\n\nexport class BsDropdownState {\n  direction: 'down' | 'up' = 'down';\n  autoClose: boolean;\n  isOpenChange = new EventEmitter<boolean>();\n  isDisabledChange = new EventEmitter<boolean>();\n  toggleClick = new EventEmitter<boolean>();\n\n  /**\n   * Content to be displayed as popover.\n   */\n  dropdownMenu: Promise<BsComponentRef<any>>;\n  resolveDropdownMenu: (componentRef: BsComponentRef<any>) => void;\n\n  constructor() {\n    this.dropdownMenu = new Promise((resolve) => {\n      this.resolveDropdownMenu = resolve;\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}