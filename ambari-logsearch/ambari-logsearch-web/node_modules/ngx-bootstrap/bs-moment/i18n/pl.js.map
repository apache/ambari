{"version":3,"sources":["../../../.tmp/bs-moment/i18n/pl.ts"],"names":[],"mappings":"AAAA,iCAAiC;AACjC,uBAAuB;AACvB,iDAAiD;AAIjD,IAAM,MAAM,GAAG,kGAAkG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAC7H,4IAA4I;AAE5I,gBAAgB,CAAS;IACvB,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;AACnE,CAAC;AAED,mBAAmB,GAAW,EAAE,aAAsB,EAAE,GAAW;IACjE,IAAM,MAAM,GAAM,GAAG,MAAG,CAAC;IACzB,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACZ,KAAK,GAAG;YACN,MAAM,CAAC,aAAa,GAAG,QAAQ,GAAG,QAAQ,CAAC;QAC7C,KAAK,IAAI;YACP,MAAM,CAAC,MAAM,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,QAAQ,GAAG,OAAO,CAAC,CAAC;QACrD,KAAK,GAAG;YACN,MAAM,CAAC,aAAa,GAAG,SAAS,GAAG,SAAS,CAAC;QAC/C,KAAK,IAAI;YACP,MAAM,CAAC,MAAM,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,SAAS,GAAG,QAAQ,CAAC,CAAC;QACvD,KAAK,IAAI;YACP,MAAM,CAAC,MAAM,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,UAAU,GAAG,UAAU,CAAC,CAAC;QAC1D,KAAK,IAAI;YACP,MAAM,CAAC,MAAM,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,GAAG,KAAK,CAAC,CAAC;IACnD,CAAC;AACH,CAAC;AAED,MAAM,CAAC,IAAM,EAAE,GAAe;IAC5B,IAAI,EAAE,IAAI;IACV,MAAM,QAAA;IACN,+CAA+C;IAC/C,iBAAiB;IACjB,+BAA+B;IAC/B,gCAAgC;IAChC,6DAA6D;IAC7D,kEAAkE;IAClE,8BAA8B;IAC1B,sFAAsF;IACxF,sCAAsC;IACtC,6CAA6C;IAC7C,WAAW;IACX,6CAA6C;IAC7C,IAAI;IACN,KAAK;IACL,WAAW,EAAE,iDAAiD,CAAC,KAAK,CAAC,GAAG,CAAC;IACzE,QAAQ,EAAE,4DAA4D,CAAC,KAAK,CAAC,GAAG,CAAC;IACjF,aAAa,EAAE,0BAA0B,CAAC,KAAK,CAAC,GAAG,CAAC;IACpD,WAAW,EAAE,sBAAsB,CAAC,KAAK,CAAC,GAAG,CAAC;IAC9C,cAAc,EAAE;QACd,EAAE,EAAE,OAAO;QACX,GAAG,EAAE,UAAU;QACf,CAAC,EAAE,YAAY;QACf,EAAE,EAAE,aAAa;QACjB,GAAG,EAAE,mBAAmB;QACxB,IAAI,EAAE,yBAAyB;KAChC;IACD,YAAY,EAAE;QACZ,MAAM,EAAE,OAAO;QACf,IAAI,EAAE,SAAS;QACf,CAAC,EAAE,cAAc;QACjB,CAAC,EAAE,SAAS;QACZ,EAAE,EAAE,SAAS;QACb,CAAC,EAAE,SAAS;QACZ,EAAE,EAAE,SAAS;QACb,CAAC,EAAE,SAAS;QACZ,EAAE,EAAE,QAAQ;QACZ,CAAC,EAAE,SAAS;QACZ,EAAE,EAAE,SAAS;QACb,CAAC,EAAE,KAAK;QACR,EAAE,EAAE,SAAS;KACd;IACD,sBAAsB,EAAE,WAAW;IACnC,OAAO,EAAP,UAAQ,GAAW,IAAY,MAAM,CAAI,GAAG,MAAG,CAAC,CAAC,CAAC;IAClD,IAAI,EAAE;QACJ,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,CAAC,CAAE,gEAAgE;KACzE;CACF,CAAC","file":"pl.js","sourceRoot":"","sourcesContent":["// moment.js locale configuration\n// locale : Polish [pl]\n// author : Rafal Hirsz : https://github.com/evoL\n\nimport { LocaleData } from '../locale/locale.class';\n\nconst months = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_');\n// const monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');\n\nfunction plural(n: number): boolean {\n  return (n % 10 < 5) && (n % 10 > 1) && ((~~(n / 10) % 10) !== 1);\n}\n\nfunction translate(num: number, withoutSuffix: boolean, key: string): string {\n  const result = `${num} `;\n  switch (key) {\n    case 'm':\n      return withoutSuffix ? 'minuta' : 'minutę';\n    case 'mm':\n      return result + (plural(num) ? 'minuty' : 'minut');\n    case 'h':\n      return withoutSuffix ? 'godzina' : 'godzinę';\n    case 'hh':\n      return result + (plural(num) ? 'godziny' : 'godzin');\n    case 'MM':\n      return result + (plural(num) ? 'miesiące' : 'miesięcy');\n    case 'yy':\n      return result + (plural(num) ? 'lata' : 'lat');\n  }\n}\n\nexport const pl: LocaleData = {\n  abbr: 'pl',\n  months,\n  // months(date: Date, format: string): string {\n  //   if (!date) {\n  //     return monthsNominative;\n  //   } else if (format === '') {\n  //     Hack: if format empty we know this is used to generate\n  //     RegExp by moment. Give then back both valid forms of months\n  //     in RegExp ready format.\n      // return `(${monthsSubjective[getMonth(date)]}|${monthsNominative[getMonth(date)]})`;\n    // } else if (/D MMMM/.test(format)) {\n    //   return monthsSubjective[getMonth(date)];\n    // } else {\n    //   return monthsNominative[getMonth(date)];\n    // }\n  // },\n  monthsShort: 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),\n  weekdays: 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),\n  weekdaysShort: 'ndz_pon_wt_śr_czw_pt_sob'.split('_'),\n  weekdaysMin: 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),\n  longDateFormat: {\n    LT: 'HH:mm',\n    LTS: 'HH:mm:ss',\n    L: 'DD.MM.YYYY',\n    LL: 'D MMMM YYYY',\n    LLL: 'D MMMM YYYY HH:mm',\n    LLLL: 'dddd, D MMMM YYYY HH:mm'\n  },\n  relativeTime: {\n    future: 'za %s',\n    past: '%s temu',\n    s: 'kilka sekund',\n    m: translate,\n    mm: translate,\n    h: translate,\n    hh: translate,\n    d: '1 dzień',\n    dd: '%d dni',\n    M: 'miesiąc',\n    MM: translate,\n    y: 'rok',\n    yy: translate\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n  ordinal(num: number): string { return `${num}.`; },\n  week: {\n    dow: 1, // Monday is the first day of the week.\n    doy: 4  // The week that contains Jan 4th is the first week of the year.\n  }\n};\n"]}