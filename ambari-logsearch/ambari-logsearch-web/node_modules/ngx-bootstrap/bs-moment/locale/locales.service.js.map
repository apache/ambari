{"version":3,"sources":["../../../.tmp/bs-moment/locale/locales.service.ts"],"names":[],"mappings":"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","file":"locales.service.js","sourceRoot":"","sourcesContent":["// internal storage for locale config files\nimport { Locale, LocaleData } from './locale.class';\nimport { baseConfig } from './locale.defaults';\nimport { hasOwnProp, isObject, isUndefined } from '../utils/type-checks';\n\nconst locales: { [key: string]: Locale } = {};\nconst localeFamilies: { [key: string]: Locale } = {};\nlet globalLocale: Locale;\n\nfunction chooseLocale(name: string) {\n  return locales[name];\n}\n\n// returns locale data\nexport function getLocale(key: string): Locale {\n\n  if (!key) {\n    return globalLocale;\n  }\n\n  return chooseLocale(key);\n}\n\nexport function listLocales(): string[] {\n  return Object.keys(locales);\n}\n\nexport function mergeConfigs(parentConfig: LocaleData, childConfig: LocaleData) {\n  const res: { [key: string]: any } = Object.assign({}, parentConfig);\n\n  for (const childProp in childConfig) {\n    if (!hasOwnProp(childConfig, childProp)) {\n      continue;\n    }\n    if (isObject(parentConfig[childProp]) && isObject(childConfig[childProp])) {\n      (res[childProp]) = {};\n      Object.assign(res[childProp], parentConfig[childProp]);\n      Object.assign(res[childProp], childConfig[childProp]);\n    } else if (childConfig[childProp] != null) {\n      (res[childProp] ) = childConfig[childProp];\n    } else {\n      delete res[childProp];\n    }\n  }\n  for (const parentProp in parentConfig) {\n    if (hasOwnProp(parentConfig, parentProp) &&\n      !hasOwnProp(childConfig, parentProp) &&\n      isObject(parentConfig[parentProp])) {\n      // make sure changes to properties don't modify parent config\n      (res[parentProp] ) = Object.assign({}, res[parentProp]);\n    }\n  }\n  return res;\n}\n\n// This function will load locale and then set the global locale.  If\n// no arguments are passed in, it will simply return the current global\n// locale key.\nexport function getSetGlobalLocale(key: string, values?: LocaleData): string {\n  let data: Locale;\n  if (key) {\n    data = isUndefined(values) ? getLocale(key) : defineLocale(key, values);\n\n    if (data) {\n      globalLocale = data;\n    }\n  }\n\n  return globalLocale._abbr;\n}\n\nexport function defineLocale(name: string, config?: LocaleData): Locale {\n  if (config === null) {\n    // useful for testing\n    delete locales[name];\n    return null;\n  }\n\n  config.abbr = name;\n\n  locales[name] = new Locale(mergeConfigs(baseConfig, config));\n\n  if (localeFamilies[name]) {\n    localeFamilies[name].forEach(function (x: Locale) {\n      defineLocale(x.name, x.config);\n    });\n  }\n\n  // backwards compat for now: also set the locale\n  // make sure we set the locale AFTER all child locales have been\n  // created, so we won't end up with the child locale set.\n  getSetGlobalLocale(name);\n\n  return locales[name];\n}\n"]}