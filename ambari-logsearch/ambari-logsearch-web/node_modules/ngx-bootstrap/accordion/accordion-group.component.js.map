{"version":3,"sources":["../../.tmp/accordion/accordion-group.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EAAE,WAAA,EAAa,MAAA,EAAQ,KAAA,EACjC,MAAM,eAAA,CAAgB;AACvB,OAAO,EAAE,KAAA,EAAM,MAAO,+BAAA,CAAgC;AACtD,OAAO,EAAE,kBAAA,EAAmB,MAAO,uBAAA,CAAwB;AAE3D;;;;;KAKK;AAGL;IA8BE,iCAAoB,SAA6B;QAC/C,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IApBD,sBAAW,2CAAM;QAJjB,wEAAwE;QACxE,wCAAwC;aAGxC;YACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACtB,CAAC;aAED,UAAkB,KAAc;YAC9B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACrB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;YACxC,CAAC;QACH,CAAC;;;OAPA;IASD,sBAAW,0CAAK;aAAhB;YACE,MAAM,CAAC,KAAK,EAAE,CAAC;QACjB,CAAC;;;OAAA;IASM,0CAAQ,GAAf;QACE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,IAAI,eAAe,CAAC;QACrD,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAEM,6CAAW,GAAlB;QACE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAEM,4CAAU,GAAjB,UAAkB,KAAY;QAC5B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;QAC7B,CAAC;IACH,CAAC;IACI,kCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,kCAAkC;oBAC5C,QAAQ,EAAE,itBAgBT;oBACD,IAAI,EAAE;wBACJ,KAAK,EAAE,OAAO;wBACd,KAAK,EAAE,gBAAgB;qBACxB;iBACF,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,sCAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,kBAAkB,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,kBAAkB,EAAG,EAAE,EAAG,EAAC;KACzF,EAF6F,CAE7F,CAAC;IACK,sCAAc,GAA2C;QAChE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC7B,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAChC,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAChC,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,kBAAkB,EAAG,EAAE,EAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;KAC/E,CAAC;IACF,8BAAC;CApFD,AAoFC,IAAA;SApFY,uBAAuB","file":"accordion-group.component.js","sourceRoot":"","sourcesContent":["import {\n  Component, HostBinding, Inject, Input, OnDestroy, OnInit\n} from '@angular/core';\nimport { isBs3 } from '../utils/ng2-bootstrap-config';\nimport { AccordionComponent } from './accordion.component';\n\n/*\n * ### Accordion heading\n\n Instead of using `heading` attribute on the `accordion-group`, you can use an `accordion-heading` attribute on `any` element inside of a group that will be used as group's header template.\n\n * */\n\n\nexport class AccordionPanelComponent implements OnInit, OnDestroy {\n  /** Clickable text in accordion's group header, check `accordion heading` below for using html in header */\n   public heading: string;\n  /** Provides an ability to use Bootstrap's contextual panel classes (`panel-primary`, `panel-success`, `panel-info`, etc...). List of all available classes [available here](http://getbootstrap.com/components/#panels-alternatives) */\n   public panelClass: string;\n  /** if <code>true</code> â€” disables accordion group */\n   public isDisabled: boolean;\n\n  // Questionable, maybe .panel-open should be on child div.panel element?\n  /** Is accordion group open or closed */\n  \n  \n  public get isOpen(): boolean {\n    return this._isOpen;\n  }\n\n  public set isOpen(value: boolean) {\n    this._isOpen = value;\n    if (value) {\n      this.accordion.closeOtherPanels(this);\n    }\n  }\n\n  public get isBs3(): boolean {\n    return isBs3();\n  }\n\n  protected _isOpen: boolean;\n  protected accordion: AccordionComponent;\n\n  public constructor( accordion: AccordionComponent) {\n    this.accordion = accordion;\n  }\n\n  public ngOnInit(): any {\n    this.panelClass = this.panelClass || 'panel-default';\n    this.accordion.addGroup(this);\n  }\n\n  public ngOnDestroy(): any {\n    this.accordion.removeGroup(this);\n  }\n\n  public toggleOpen(event: Event): any {\n    if (!this.isDisabled) {\n      this.isOpen = !this.isOpen;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'accordion-group, accordion-panel',\n  template: `\n    <div class=\"panel card\" [ngClass]=\"panelClass\">\n      <div class=\"panel-heading card-header\" role=\"tab\" (click)=\"toggleOpen($event)\">\n        <div class=\"panel-title\">\n          <div role=\"button\" class=\"accordion-toggle\" [attr.aria-expanded]=\"isOpen\">\n            <div *ngIf=\"heading\"[ngClass]=\"{'text-muted': isDisabled}\">{{heading}}</div>\n            <ng-content select=\"[accordion-heading]\"></ng-content>\n          </div>\n        </div>\n      </div>\n      <div class=\"panel-collapse collapse\" role=\"tabpanel\" [collapse]=\"!isOpen\">\n        <div class=\"panel-body card-block card-body\">\n          <ng-content></ng-content>\n        </div>\n      </div>\n    </div>\n  `,\n  host: {\n    class: 'panel',\n    style: 'display: block'\n  }\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AccordionComponent, decorators: [{ type: Inject, args: [AccordionComponent, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'heading': [{ type: Input },],\n'panelClass': [{ type: Input },],\n'isDisabled': [{ type: Input },],\n'isOpen': [{ type: HostBinding, args: ['class.panel-open', ] },{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}