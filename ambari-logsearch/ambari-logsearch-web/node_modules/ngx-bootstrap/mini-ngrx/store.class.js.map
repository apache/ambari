{"version":3,"sources":["../../.tmp/mini-ngrx/store.class.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;;GAEG;AACH,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAG7C,OAAO,EAAE,oBAAoB,EAAE,MAAM,oCAAoC,CAAC;AAE1E,OAAO,EAAE,GAAG,EAAE,MAAM,mBAAmB,CAAC;AAGxC;IAAkC,6BAAa;IAE7C,mBAAoB,WAA6B,EAC7B,QAA4B,EACpC,MAAuB;QAFnC,YAGE,iBAAO,SAGR;QANmB,iBAAW,GAAX,WAAW,CAAkB;QAC7B,cAAQ,GAAR,QAAQ,CAAoB;QAI9C,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;;IACvB,CAAC;IAED,0BAAM,GAAN,UAAU,WAA4B;QACpC,IAAM,OAAO,GAAkB,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;QAE3D,MAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC5C,CAAC;IAED,wBAAI,GAAJ,UAAQ,QAAwB;QAC9B,IAAM,KAAK,GAAG,IAAI,SAAS,CAAI,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QACtE,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAE1B,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED,4BAAQ,GAAR,UAAS,MAAc,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAE3D,wBAAI,GAAJ,UAAK,MAAc,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAEvD,yBAAK,GAAL,UAAM,GAAQ,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAEhD,4BAAQ,GAAR,cAAoB,CAAC;IACvB,gBAAC;AAAD,CA9BA,AA8BC,CA9BiC,UAAU,GA8B3C","file":"store.class.js","sourceRoot":"","sourcesContent":["/**\n * @copyright ngrx\n */\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nimport { Operator } from 'rxjs/Operator';\nimport { distinctUntilChanged } from 'rxjs/operator/distinctUntilChanged';\n\nimport { map } from 'rxjs/operator/map';\nimport { Action, ActionReducer } from './index';\n\nexport class MiniStore<T> extends Observable<T> implements Observer<Action> {\n\n  constructor(private _dispatcher: Observer<Action>,\n              private _reducer: ActionReducer<any>,\n              state$: Observable<any>) {\n    super();\n\n    this.source = state$;\n  }\n\n  select<R>(pathOrMapFn: (state: T) => R): Observable<R> {\n    const mapped$: Observable<R> = map.call(this, pathOrMapFn);\n\n    return distinctUntilChanged.call(mapped$);\n  }\n\n  lift<R>(operator: Operator<T, R>): MiniStore<R> {\n    const store = new MiniStore<R>(this._dispatcher, this._reducer, this);\n    store.operator = operator;\n\n    return store;\n  }\n\n  dispatch(action: Action) { this._dispatcher.next(action); }\n\n  next(action: Action) { this._dispatcher.next(action); }\n\n  error(err: any) { this._dispatcher.error(err); }\n\n  complete() {/*noop*/}\n}\n"]}