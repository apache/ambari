{"version":3,"sources":["../../.tmp/progressbar/progressbar.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAW,KAAA,EAAM,MAAO,eAAA,CAAgB;AACjD,OAAO,EAAE,iBAAA,EAAkB,MAAO,sBAAA,CAAuB;AACzD,OAAO,EAAE,KAAA,EAAM,MAAO,UAAA,CAAW;AAGjC;IAkBE,8BAAmB,MAAyB;QANrC,cAAS,GAAY,KAAK,CAAC;QAOhC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAC9B,CAAC;IAZA,sBAAW,uCAAK;QADjB,0HAA0H;aACzH,UAAiB,KAAqB;YACrC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACtC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACtB,CAAC;;;OAAA;IAAA,CAAC;IAGF,sBAAW,uCAAK;aAAhB;YACE,MAAM,CAAC,KAAK,EAAE,CAAC;QACjB,CAAC;;;OAAA;IAKI,+BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,aAAa;oBACvB,QAAQ,EAAE,oZAST;oBACD,MAAM,EAAE,CAAC,8CAIR,CAAC;iBACH,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,mCAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,iBAAiB,GAAG;KAC1B,EAF6F,CAE7F,CAAC;IACK,mCAAc,GAA2C;QAChE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC7B,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACzB,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC1B,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;KAC1B,CAAC;IACF,2BAAC;CAnDD,AAmDC,IAAA;SAnDY,oBAAoB","file":"progressbar.component.js","sourceRoot":"","sourcesContent":["import { Component, Input } from '@angular/core';\nimport { ProgressbarConfig } from './progressbar.config';\nimport { isBs3 } from '../utils';\n\n\nexport class ProgressbarComponent {\n  /** if `true` changing value of progress bar will be animated (note: not supported by Bootstrap 4) */\n   public animate:boolean;\n  /** maximum total value of progress element */\n   public max:number;\n  /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */\n   public type:string;\n  /** current value of progress bar. Could be a number or array of objects like {\"value\":15,\"type\":\"info\",\"label\":\"15 %\"} */\n   public set value(value: number | any[]) {\n    this.isStacked = Array.isArray(value);\n    this._value = value;\n  };\n  public isStacked: boolean = false;\n  public _value: number | any[];\n  public get isBs3(): boolean {\n    return isBs3();\n  }\n\n  public constructor(config: ProgressbarConfig) {\n    Object.assign(this, config);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'progressbar',\n  template: `\n    <div progress [animate]=\"animate\" [max]=\"max\" [style.width]=\"!isBs3 ? '100%' : 'auto'\">\n      <bar [type]=\"type\" [value]=\"_value\" *ngIf=\"!isStacked\">\n          <ng-content></ng-content>\n      </bar>\n      <template [ngIf]=\"isStacked\">\n        <bar *ngFor=\"let item of _value\" [type]=\"item.type\" [value]=\"item.value\">{{item.label}}</bar>\n      </template>\n    </div>\n  `,\n  styles: [`\n    :host {\n      width: 100%;\n    }\n  `]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ProgressbarConfig, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'animate': [{ type: Input },],\n'max': [{ type: Input },],\n'type': [{ type: Input },],\n'value': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}