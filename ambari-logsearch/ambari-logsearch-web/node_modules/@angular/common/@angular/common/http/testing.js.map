{"version":3,"file":"testing.js","sources":["../../../../../../packages/common/http/testing/index.ts","../../../../../../packages/common/http/testing/public_api.ts","../../../../../../packages/common/http/testing/src/module.ts","../../../../../../packages/common/http/testing/src/backend.ts","../../../../../../packages/common/http/testing/src/request.ts","../../../../../../packages/common/http/testing/src/api.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {HttpTestingController,RequestMatch,HttpClientTestingModule,TestRequest} from './public_api';\n\nexport {HttpClientTestingBackend as Éµa} from './src/backend';","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {HttpTestingController, RequestMatch} from './src/api';\nexport {HttpClientTestingModule} from './src/module';\nexport {TestRequest} from './src/request';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {HttpBackend, HttpClientModule} from '@angular/common/http';\nimport {NgModule} from '@angular/core';\n\nimport {HttpTestingController} from './api';\nimport {HttpClientTestingBackend} from './backend';\n/**\n * Configures `HttpClientTestingBackend` as the `HttpBackend` used by `HttpClient`.\n * \n * Inject `HttpTestingController` to expect and flush requests in your tests.\n * \n * \\@experimental\n */\nexport class HttpClientTestingModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    HttpClientModule,\n  ],\n  providers: [\n    HttpClientTestingBackend,\n    {provide: HttpBackend, useExisting: HttpClientTestingBackend},\n    {provide: HttpTestingController, useExisting: HttpClientTestingBackend},\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction HttpClientTestingModule_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpClientTestingModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttpClientTestingModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {HttpBackend, HttpEvent, HttpEventType, HttpRequest} from '@angular/common/http';\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {startWith} from 'rxjs/operator/startWith';\n\nimport {HttpTestingController, RequestMatch} from './api';\nimport {TestRequest} from './request';\n/**\n * A testing backend for `HttpClient` which both acts as an `HttpBackend`\n * and as the `HttpTestingController`.\n * \n * `HttpClientTestingBackend` works by keeping a list of all open requests.\n * As requests come in, they're added to the list. Users can assert that specific\n * requests were made and then flush them. In the end, a verify() method asserts\n * that no unexpected requests were made.\n * \n * \\@experimental\n */\nexport class HttpClientTestingBackend implements HttpBackend, HttpTestingController {\n/**\n * List of pending requests which have not yet been expected.\n */\nprivate open: TestRequest[] = [];\n/**\n * Handle an incoming request by queueing it in the list of open requests.\n * @param {?} req\n * @return {?}\n */\nhandle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    return new Observable((observer: Observer<any>) => {\n      const /** @type {?} */ testReq = new TestRequest(req, observer);\n      this.open.push(testReq);\n      observer.next( /** @type {?} */(({ type: HttpEventType.Sent } as HttpEvent<any>)));\n      return () => { testReq._cancelled = true; };\n    });\n  }\n/**\n * Helper function to search for requests in the list of open requests.\n * @param {?} match\n * @return {?}\n */\nprivate _match(match: string|RequestMatch|((req: HttpRequest<any>) => boolean)): TestRequest[] {\n    if (typeof match === 'string') {\n      return this.open.filter(testReq => testReq.request.urlWithParams === match);\n    } else if (typeof match === 'function') {\n      return this.open.filter(testReq => match(testReq.request));\n    } else {\n      return this.open.filter(\n          testReq => (!match.method || testReq.request.method === match.method.toUpperCase()) &&\n              (!match.url || testReq.request.urlWithParams === match.url));\n    }\n  }\n/**\n * Search for requests in the list of open requests, and return all that match\n * without asserting anything about the number of matches.\n * @param {?} match\n * @return {?}\n */\nmatch(match: string|RequestMatch|((req: HttpRequest<any>) => boolean)): TestRequest[] {\n    const /** @type {?} */ results = this._match(match);\n    results.forEach(result => {\n      const /** @type {?} */ index = this.open.indexOf(result);\n      if (index !== -1) {\n        this.open.splice(index, 1);\n      }\n    });\n    return results;\n  }\n/**\n * Expect that a single outstanding request matches the given matcher, and return\n * it.\n * \n * Requests returned through this API will no longer be in the list of open requests,\n * and thus will not match twice.\n * @param {?} match\n * @param {?=} description\n * @return {?}\n */\nexpectOne(match: string|RequestMatch|((req: HttpRequest<any>) => boolean), description?: string):\n      TestRequest {\n    description = description || this.descriptionFromMatcher(match);\n    const /** @type {?} */ matches = this.match(match);\n    if (matches.length > 1) {\n      throw new Error(\n          `Expected one matching request for criteria \"${description}\", found ${matches.length} requests.`);\n    }\n    if (matches.length === 0) {\n      throw new Error(`Expected one matching request for criteria \"${description}\", found none.`);\n    }\n    return matches[0];\n  }\n/**\n * Expect that no outstanding requests match the given matcher, and throw an error\n * if any do.\n * @param {?} match\n * @param {?=} description\n * @return {?}\n */\nexpectNone(match: string|RequestMatch|((req: HttpRequest<any>) => boolean), description?: string):\n      void {\n    description = description || this.descriptionFromMatcher(match);\n    const /** @type {?} */ matches = this.match(match);\n    if (matches.length > 0) {\n      throw new Error(\n          `Expected zero matching requests for criteria \"${description}\", found ${matches.length}.`);\n    }\n  }\n/**\n * Validate that there are no outstanding requests.\n * @param {?=} opts\n * @return {?}\n */\nverify(opts: {ignoreCancelled?: boolean} = {}): void {\n    let /** @type {?} */ open = this.open;\n    // It's possible that some requests may be cancelled, and this is expected.\n    // The user can ask to ignore open requests which have been cancelled.\n    if (opts.ignoreCancelled) {\n      open = open.filter(testReq => !testReq.cancelled);\n    }\n    if (open.length > 0) {\n      // Show the methods and URLs of open requests in the error, for convenience.\n      const /** @type {?} */ requests = open.map(testReq => {\n                             const /** @type {?} */ url = testReq.request.urlWithParams.split('?')[0];\n                             const /** @type {?} */ method = testReq.request.method;\n                             return `${method} ${url}`;\n                           })\n                           .join(', ');\n      throw new Error(`Expected no open requests, found ${open.length}: ${requests}`);\n    }\n  }\n/**\n * @param {?} matcher\n * @return {?}\n */\nprivate descriptionFromMatcher(matcher: string|RequestMatch|\n                                 ((req: HttpRequest<any>) => boolean)): string {\n    if (typeof matcher === 'string') {\n      return `Match URL: ${matcher}`;\n    } else if (typeof matcher === 'object') {\n      const /** @type {?} */ method = matcher.method || '(any)';\n      const /** @type {?} */ url = matcher.url || '(any)';\n      return `Match method: ${method}, URL: ${url}`;\n    } else {\n      return `Match by function: ${matcher.name}`;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction HttpClientTestingBackend_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpClientTestingBackend.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttpClientTestingBackend.ctorParameters;\n/**\n * List of pending requests which have not yet been expected.\n * @type {?}\n */\nHttpClientTestingBackend.prototype.open;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {HttpErrorResponse, HttpEvent, HttpEventType, HttpHeaders, HttpRequest, HttpResponse} from '@angular/common/http';\nimport {Observer} from 'rxjs/Observer';\n/**\n * A mock requests that was received and is ready to be answered.\n * \n * This interface allows access to the underlying `HttpRequest`, and allows\n * responding with `HttpEvent`s or `HttpErrorResponse`s.\n * \n * \\@experimental\n */\nexport class TestRequest {\n/**\n * Whether the request was cancelled after it was sent.\n * @return {?}\n */\nget cancelled(): boolean { return this._cancelled; }\n/**\n * \\@internal set by `HttpClientTestingBackend`\n */\n_cancelled = false;\n/**\n * @param {?} request\n * @param {?} observer\n */\nconstructor(public request: HttpRequest<any>,\nprivate observer: Observer<HttpEvent<any>>) {}\n/**\n * Resolve the request by returning a body plus additional HTTP information (such as response\n * headers) if provided.\n * \n * Both successful and unsuccessful responses can be delivered via `flush()`.\n * @param {?} body\n * @param {?=} opts\n * @return {?}\n */\nflush(body: ArrayBuffer|Blob|string|number|Object|(string|number|Object|null)[]|null, opts: {\n    headers?: HttpHeaders | {[name: string]: string | string[]},\n    status?: number,\n    statusText?: string,\n  } = {}): void {\n    if (this.cancelled) {\n      throw new Error(`Cannot flush a cancelled request.`);\n    }\n    const /** @type {?} */ url = this.request.urlWithParams;\n    const /** @type {?} */ headers =\n        (opts.headers instanceof HttpHeaders) ? opts.headers : new HttpHeaders(opts.headers);\n    body = _maybeConvertBody(this.request.responseType, body);\n    let /** @type {?} */ statusText: string|undefined = opts.statusText;\n    let /** @type {?} */ status: number = opts.status !== undefined ? opts.status : 200;\n    if (opts.status === undefined) {\n      if (body === null) {\n        status = 204;\n        statusText = statusText || 'No Content';\n      } else {\n        statusText = statusText || 'OK';\n      }\n    }\n    if (statusText === undefined) {\n      throw new Error('statusText is required when setting a custom status.');\n    }\n    if (status >= 200 && status < 300) {\n      this.observer.next(new HttpResponse<any>({body, headers, status, statusText, url}));\n      this.observer.complete();\n    } else {\n      this.observer.error(new HttpErrorResponse({error: body, headers, status, statusText, url}));\n    }\n  }\n/**\n * Resolve the request by returning an `ErrorEvent` (e.g. simulating a network failure).\n * @param {?} error\n * @param {?=} opts\n * @return {?}\n */\nerror(error: ErrorEvent, opts: {\n    headers?: HttpHeaders | {[name: string]: string | string[]},\n    status?: number,\n    statusText?: string,\n  } = {}): void {\n    if (this.cancelled) {\n      throw new Error(`Cannot return an error for a cancelled request.`);\n    }\n    if (opts.status && opts.status >= 200 && opts.status < 300) {\n      throw new Error(`error() called with a successful status.`);\n    }\n    const /** @type {?} */ headers =\n        (opts.headers instanceof HttpHeaders) ? opts.headers : new HttpHeaders(opts.headers);\n    this.observer.error(new HttpErrorResponse({\n      error,\n      headers,\n      status: opts.status || 0,\n      statusText: opts.statusText || '',\n      url: this.request.urlWithParams,\n    }));\n  }\n/**\n * Deliver an arbitrary `HttpEvent` (such as a progress event) on the response stream for this\n * request.\n * @param {?} event\n * @return {?}\n */\nevent(event: HttpEvent<any>): void {\n    if (this.cancelled) {\n      throw new Error(`Cannot send events to a cancelled request.`);\n    }\n    this.observer.next(event);\n  }\n}\n\nfunction TestRequest_tsickle_Closure_declarations() {\n/**\n * \\@internal set by `HttpClientTestingBackend`\n * @type {?}\n */\nTestRequest.prototype._cancelled;\n/** @type {?} */\nTestRequest.prototype.request;\n/** @type {?} */\nTestRequest.prototype.observer;\n}\n\n/**\n * Helper function to convert a response body to an ArrayBuffer.\n * @param {?} body\n * @return {?}\n */\nfunction _toArrayBufferBody(\n    body: ArrayBuffer | Blob | string | number | Object |\n    (string | number | Object | null)[]): ArrayBuffer {\n  if (typeof ArrayBuffer === 'undefined') {\n    throw new Error('ArrayBuffer responses are not supported on this platform.');\n  }\n  if (body instanceof ArrayBuffer) {\n    return body;\n  }\n  throw new Error('Automatic conversion to ArrayBuffer is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to a Blob.\n * @param {?} body\n * @return {?}\n */\nfunction _toBlob(\n    body: ArrayBuffer | Blob | string | number | Object |\n    (string | number | Object | null)[]): Blob {\n  if (typeof Blob === 'undefined') {\n    throw new Error('Blob responses are not supported on this platform.');\n  }\n  if (body instanceof Blob) {\n    return body;\n  }\n  if (ArrayBuffer && body instanceof ArrayBuffer) {\n    return new Blob([body]);\n  }\n  throw new Error('Automatic conversion to Blob is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to JSON data.\n * @param {?} body\n * @param {?=} format\n * @return {?}\n */\nfunction _toJsonBody(\n    body: ArrayBuffer | Blob | string | number | Object | (string | number | Object | null)[],\n    format: string = 'JSON'): Object|string|number|(Object | string | number)[] {\n  if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n    throw new Error(`Automatic conversion to ${format} is not supported for ArrayBuffers.`);\n  }\n  if (typeof Blob !== 'undefined' && body instanceof Blob) {\n    throw new Error(`Automatic conversion to ${format} is not supported for Blobs.`);\n  }\n  if (typeof body === 'string' || typeof body === 'number' || typeof body === 'object' ||\n      Array.isArray(body)) {\n    return body;\n  }\n  throw new Error(`Automatic conversion to ${format} is not supported for response type.`);\n}\n/**\n * Helper function to convert a response body to a string.\n * @param {?} body\n * @return {?}\n */\nfunction _toTextBody(\n    body: ArrayBuffer | Blob | string | number | Object |\n    (string | number | Object | null)[]): string {\n  if (typeof body === 'string') {\n    return body;\n  }\n  if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n    throw new Error('Automatic conversion to text is not supported for ArrayBuffers.');\n  }\n  if (typeof Blob !== 'undefined' && body instanceof Blob) {\n    throw new Error('Automatic conversion to text is not supported for Blobs.');\n  }\n  return JSON.stringify(_toJsonBody(body, 'text'));\n}\n/**\n * Convert a response body to the requested type.\n * @param {?} responseType\n * @param {?} body\n * @return {?}\n */\nfunction _maybeConvertBody(\n    responseType: string, body: ArrayBuffer | Blob | string | number | Object |\n        (string | number | Object | null)[] | null): ArrayBuffer|Blob|string|number|Object|\n    (string | number | Object | null)[]|null {\n  switch (responseType) {\n    case 'arraybuffer':\n      if (body === null) {\n        return null;\n      }\n      return _toArrayBufferBody(body);\n    case 'blob':\n      if (body === null) {\n        return null;\n      }\n      return _toBlob(body);\n    case 'json':\n      if (body === null) {\n        return 'null';\n      }\n      return _toJsonBody(body);\n    case 'text':\n      if (body === null) {\n        return null;\n      }\n      return _toTextBody(body);\n    default:\n      throw new Error(`Unsupported responseType: ${responseType}`);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {HttpRequest} from '@angular/common/http';\n\nimport {TestRequest} from './request';\n\n/**\n * Defines a matcher for requests based on URL, method, or both.\n *\n * @experimental\n */\nexport interface RequestMatch {\n  method?: string;\n  url?: string;\n}\n/**\n * Controller to be injected into tests, that allows for mocking and flushing\n * of requests.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class HttpTestingController {\n/**\n * Search for requests that match the given parameter, without any expectations.\n * @abstract\n * @param {?} match\n * @return {?}\n */\nmatch(match: string|RequestMatch|((req: HttpRequest<any>) => boolean)) {}\n/**\n * Expect that a single request has been made which matches the given URL, and return its\n * mock.\n * \n * If no such request has been made, or more than one such request has been made, fail with an\n * error message including the given request description, if any.\n * @abstract\n * @param {?} url\n * @param {?=} description\n * @return {?}\n */\nexpectOne(url: string, description?: string) {}\n/**\n * Expect that a single request has been made which matches the given parameters, and return\n * its mock.\n * \n * If no such request has been made, or more than one such request has been made, fail with an\n * error message including the given request description, if any.\n * @abstract\n * @param {?} params\n * @param {?=} description\n * @return {?}\n */\nexpectOne(params: RequestMatch, description?: string) {}\n/**\n * Expect that a single request has been made which matches the given predicate function, and\n * return its mock.\n * \n * If no such request has been made, or more than one such request has been made, fail with an\n * error message including the given request description, if any.\n * @abstract\n * @param {?} matchFn\n * @param {?=} description\n * @return {?}\n */\nexpectOne(matchFn: ((req: HttpRequest<any>) => boolean), description?: string) {}\n/**\n * Expect that a single request has been made which matches the given condition, and return\n * its mock.\n * \n * If no such request has been made, or more than one such request has been made, fail with an\n * error message including the given request description, if any.\n * @abstract\n * @param {?} match\n * @param {?=} description\n * @return {?}\n */\nexpectOne(\n      match: string|RequestMatch|((req: HttpRequest<any>) => boolean),\n      description?: string) {}\n/**\n * Expect that no requests have been made which match the given URL.\n * \n * If a matching request has been made, fail with an error message including the given request\n * description, if any.\n * @abstract\n * @param {?} url\n * @param {?=} description\n * @return {?}\n */\nexpectNone(url: string, description?: string) {}\n/**\n * Expect that no requests have been made which match the given parameters.\n * \n * If a matching request has been made, fail with an error message including the given request\n * description, if any.\n * @abstract\n * @param {?} params\n * @param {?=} description\n * @return {?}\n */\nexpectNone(params: RequestMatch, description?: string) {}\n/**\n * Expect that no requests have been made which match the given predicate function.\n * \n * If a matching request has been made, fail with an error message including the given request\n * description, if any.\n * @abstract\n * @param {?} matchFn\n * @param {?=} description\n * @return {?}\n */\nexpectNone(matchFn: ((req: HttpRequest<any>) => boolean), description?: string) {}\n/**\n * Expect that no requests have been made which match the given condition.\n * \n * If a matching request has been made, fail with an error message including the given request\n * description, if any.\n * @abstract\n * @param {?} match\n * @param {?=} description\n * @return {?}\n */\nexpectNone(\n      match: string|RequestMatch|((req: HttpRequest<any>) => boolean), description?: string) {}\n/**\n * Verify that no unmatched requests are outstanding.\n * \n * If any requests are outstanding, fail with an error message indicating which requests were not\n * handled.\n * \n * If `ignoreCancelled` is not set (the default), `verify()` will also fail if cancelled requests\n * were not explicitly matched.\n * @abstract\n * @param {?=} opts\n * @return {?}\n */\nverify(opts?: {ignoreCancelled?: boolean}) {}\n}\n"],"names":[],"mappings":"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"}