{"version":3,"file":"entry_points.js","sourceRoot":"","sources":["../../../../../packages/compiler-cli/src/transformers/entry_points.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;AAKH,uEAAwE;AAEhE,uCAFA,uDAA4B,CAEA;AADpC,qCAAwC;AAAhC,kCAAA,aAAa,CAAA;AAGrB,oBAA2B,EAAsE;QAArE,kBAAM,EAAE,oBAAO;IAEzC,IAAM,QAAQ,GAAG,uDAA4B,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAE/D,IAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAEnC,IAAI,CAAC,oBAAoB,GAAG,QAAQ,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACzE,IAAI,CAAC,oBAAoB,GAAG,QAAQ,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACzE,IAAI,CAAC,sBAAsB,GAAG,QAAQ,CAAC,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC7E,IAAI,CAAC,gBAAgB,GAAG,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAEjE,uFAAuF;IACvF,sDAAsD;IACtD,IAAI,CAAC,QAAQ,GAAG,UAAC,QAAgB,IAAK,OAAA,QAAQ,EAAR,CAAQ,CAAC;IAE/C,MAAM,CAAC,IAAI,CAAC;AACd,CAAC;AAhBD,gCAgBC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ts from 'typescript';\n\nimport {CompilerHost, CompilerOptions, Program} from './api';\nimport {createModuleFilenameResolver} from './module_filename_resolver';\nexport {createProgram} from './program';\nexport {createModuleFilenameResolver};\n\nexport function createHost({tsHost, options}: {tsHost: ts.CompilerHost, options: CompilerOptions}):\n    CompilerHost {\n  const resolver = createModuleFilenameResolver(tsHost, options);\n\n  const host = Object.create(tsHost);\n\n  host.moduleNameToFileName = resolver.moduleNameToFileName.bind(resolver);\n  host.fileNameToModuleName = resolver.fileNameToModuleName.bind(resolver);\n  host.getNgCanonicalFileName = resolver.getNgCanonicalFileName.bind(resolver);\n  host.assumeFileExists = resolver.assumeFileExists.bind(resolver);\n\n  // Make sure we do not `host.realpath()` from TS as we do not want to resolve symlinks.\n  // https://github.com/Microsoft/TypeScript/issues/9552\n  host.realpath = (fileName: string) => fileName;\n\n  return host;\n}\n"]}