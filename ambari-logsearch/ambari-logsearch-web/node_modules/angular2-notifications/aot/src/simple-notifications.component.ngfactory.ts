/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '../../src/simple-notifications.component';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
import * as import3 from '@angular/core/src/linker/view';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/linker/element';
import * as import6 from '@angular/core/src/di/injector';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '../../src/notifications.service';
import * as import9 from '@angular/core/src/metadata/view';
import * as import10 from '@angular/core/src/linker/component_factory';
import * as import11 from '../node_modules/@angular/common/src/directives/ng_class.ngfactory';
import * as import12 from '../node_modules/@angular/common/src/directives/ng_for.ngfactory';
import * as import13 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import14 from '@angular/core/src/change_detection/differs/keyvalue_differs';
import * as import15 from '@angular/core/src/linker/element_ref';
import * as import16 from '@angular/core/src/linker/template_ref';
import * as import17 from '@angular/common/src/directives/ng_for';
import * as import18 from '@angular/common/src/directives/ng_class';
import * as import19 from './notification.component.ngfactory';
import * as import20 from '@angular/platform-browser/src/security/dom_sanitization_service';
import * as import21 from '@angular/core/src/zone/ng_zone';
import * as import22 from '../../src/notification.component';
export class Wrapper_SimpleNotificationsComponent {
  context:import0.SimpleNotificationsComponent;
  changed:boolean;
  /*private*/ _expr_0:any;
  constructor(p0:any) {
    this.changed = false;
    this.context = new import0.SimpleNotificationsComponent(p0);
    this._expr_0 = import1.UNINITIALIZED;
  }
  check_options(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this.changed = true;
      this.context.options = currValue;
      this._expr_0 = currValue;
    }
  }
  detectChangesInInputProps(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
  detectChangesInHostProps(view:import3.AppView<any>,el:any,throwOnChange:boolean):void {
  }
}
var renderType_SimpleNotificationsComponent_Host:import4.RenderComponentType = (null as any);
class _View_SimpleNotificationsComponent_Host0 extends import3.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import5.AppElement;
  _SimpleNotificationsComponent_0_4:Wrapper_SimpleNotificationsComponent;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_SimpleNotificationsComponent_Host0,renderType_SimpleNotificationsComponent_Host,import7.ViewType.HOST,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = import2.selectOrCreateRenderHostElement(this.renderer,'simple-notifications',import2.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this._appEl_0 = new import5.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_SimpleNotificationsComponent0(this.viewUtils,this.injector(0),this._appEl_0);
    this._SimpleNotificationsComponent_0_4 = new Wrapper_SimpleNotificationsComponent(this.parentInjector.get(import8.NotificationsService));
    this._appEl_0.initComponent(this._SimpleNotificationsComponent_0_4.context,([] as any[]),compView_0);
    compView_0.create(this._SimpleNotificationsComponent_0_4.context,this.projectableNodes,(null as any));
    this.init(([] as any[]).concat([this._el_0]),[this._el_0],([] as any[]),([] as any[]));
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.SimpleNotificationsComponent) && (0 === requestNodeIndex))) { return this._SimpleNotificationsComponent_0_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._SimpleNotificationsComponent_0_4.detectChangesInInputProps(this,this._el_0,throwOnChange);
    this.detectContentChildrenChanges(throwOnChange);
    this._SimpleNotificationsComponent_0_4.detectChangesInHostProps(this,this._el_0,throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
  destroyInternal():void {
    this._SimpleNotificationsComponent_0_4.context.ngOnDestroy();
  }
}
function viewFactory_SimpleNotificationsComponent_Host0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<any> {
  if ((renderType_SimpleNotificationsComponent_Host === (null as any))) { (renderType_SimpleNotificationsComponent_Host = viewUtils.createRenderComponentType('',0,import9.ViewEncapsulation.None,([] as any[]),{})); }
  return new _View_SimpleNotificationsComponent_Host0(viewUtils,parentInjector,declarationEl);
}
export const SimpleNotificationsComponentNgFactory:import10.ComponentFactory<import0.SimpleNotificationsComponent> = new import10.ComponentFactory<import0.SimpleNotificationsComponent>('simple-notifications',viewFactory_SimpleNotificationsComponent_Host0,import0.SimpleNotificationsComponent);
const styles_SimpleNotificationsComponent:any[] = ['\n        .simple-notification-wrapper {\n            position: fixed;\n            width: 300px;\n            z-index: 1000;\n        }\n        \n        .simple-notification-wrapper.left { left: 20px; }\n        .simple-notification-wrapper.top { top: 20px; }\n        .simple-notification-wrapper.right { right: 20px; }\n        .simple-notification-wrapper.bottom { bottom: 20px; }\n        \n        @media (max-width: 340px) {\n            .simple-notification-wrapper {\n                width: auto;\n                left: 20px;\n                right: 20px;\n            }\n        }\n    '];
var renderType_SimpleNotificationsComponent:import4.RenderComponentType = (null as any);
class _View_SimpleNotificationsComponent0 extends import3.AppView<import0.SimpleNotificationsComponent> {
  _text_0:any;
  _el_1:any;
  _NgClass_1_3:import11.Wrapper_NgClass;
  _text_2:any;
  _anchor_3:any;
  /*private*/ _appEl_3:import5.AppElement;
  _TemplateRef_3_5:any;
  _NgFor_3_6:import12.Wrapper_NgFor;
  _text_4:any;
  _text_5:any;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_SimpleNotificationsComponent0,renderType_SimpleNotificationsComponent,import7.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n        ',(null as any));
    this._el_1 = import2.createRenderElement(this.renderer,parentRenderNode,'div',new import2.InlineArray2(2,'class','simple-notification-wrapper'),(null as any));
    this._NgClass_1_3 = new import11.Wrapper_NgClass(this.parentInjector.get(import13.IterableDiffers),this.parentInjector.get(import14.KeyValueDiffers),new import15.ElementRef(this._el_1),this.renderer);
    this._text_2 = this.renderer.createText(this._el_1,'\n            ',(null as any));
    this._anchor_3 = this.renderer.createTemplateAnchor(this._el_1,(null as any));
    this._appEl_3 = new import5.AppElement(3,1,this,this._anchor_3);
    this._TemplateRef_3_5 = new import16.TemplateRef_(this._appEl_3,viewFactory_SimpleNotificationsComponent1);
    this._NgFor_3_6 = new import12.Wrapper_NgFor(this._appEl_3.vcRef,this._TemplateRef_3_5,this.parentInjector.get(import13.IterableDiffers),this.ref);
    this._text_4 = this.renderer.createText(this._el_1,'\n        ',(null as any));
    this._text_5 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    this.init(([] as any[]),[
      this._text_0,
      this._el_1,
      this._text_2,
      this._anchor_3,
      this._text_4,
      this._text_5
    ]
    ,([] as any[]),([] as any[]));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import16.TemplateRef) && (3 === requestNodeIndex))) { return this._TemplateRef_3_5; }
    if (((token === import17.NgFor) && (3 === requestNodeIndex))) { return this._NgFor_3_6.context; }
    if (((token === import18.NgClass) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 4)))) { return this._NgClass_1_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_1_0_0:any = 'simple-notification-wrapper';
    this._NgClass_1_3.check_klass(currVal_1_0_0,throwOnChange,false);
    const currVal_1_0_1:any = this.context.position;
    this._NgClass_1_3.check_ngClass(currVal_1_0_1,throwOnChange,false);
    this._NgClass_1_3.detectChangesInInputProps(this,this._el_1,throwOnChange);
    const currVal_3_0_0:any = this.context.notifications;
    this._NgFor_3_6.check_ngForOf(currVal_3_0_0,throwOnChange,false);
    this._NgFor_3_6.detectChangesInInputProps(this,this._anchor_3,throwOnChange);
    this.detectContentChildrenChanges(throwOnChange);
    this._NgClass_1_3.detectChangesInHostProps(this,this._el_1,throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
}
export function viewFactory_SimpleNotificationsComponent0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<import0.SimpleNotificationsComponent> {
  if ((renderType_SimpleNotificationsComponent === (null as any))) { (renderType_SimpleNotificationsComponent = viewUtils.createRenderComponentType('',0,import9.ViewEncapsulation.None,styles_SimpleNotificationsComponent,{})); }
  return new _View_SimpleNotificationsComponent0(viewUtils,parentInjector,declarationEl);
}
class _View_SimpleNotificationsComponent1 extends import3.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import5.AppElement;
  _NotificationComponent_0_4:import19.Wrapper_NotificationComponent;
  _text_1:any;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_SimpleNotificationsComponent1,renderType_SimpleNotificationsComponent,import7.ViewType.EMBEDDED,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = import2.createRenderElement(this.renderer,(null as any),'simple-notification',import2.EMPTY_INLINE_ARRAY,(null as any));
    this._appEl_0 = new import5.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = import19.viewFactory_NotificationComponent0(this.viewUtils,this.injector(0),this._appEl_0);
    this._NotificationComponent_0_4 = new import19.Wrapper_NotificationComponent(this.parent.parentInjector.get(import8.NotificationsService),this.parent.parentInjector.get(import20.DomSanitizer),this.parent.parentInjector.get(import21.NgZone));
    this._appEl_0.initComponent(this._NotificationComponent_0_4.context,([] as any[]),compView_0);
    this._text_1 = this.renderer.createText((null as any),'\n            ',(null as any));
    compView_0.create(this._NotificationComponent_0_4.context,([] as any[]),(null as any));
    this.init(([] as any[]).concat([this._el_0]),[
      this._el_0,
      this._text_1
    ]
    ,([] as any[]),([] as any[]));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import22.NotificationComponent) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 1)))) { return this._NotificationComponent_0_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = this.parent.context.timeOut;
    this._NotificationComponent_0_4.check_timeOut(currVal_0_0_0,throwOnChange,false);
    const currVal_0_0_1:any = this.parent.context.showProgressBar;
    this._NotificationComponent_0_4.check_showProgressBar(currVal_0_0_1,throwOnChange,false);
    const currVal_0_0_2:any = this.parent.context.pauseOnHover;
    this._NotificationComponent_0_4.check_pauseOnHover(currVal_0_0_2,throwOnChange,false);
    const currVal_0_0_3:any = this.parent.context.clickToClose;
    this._NotificationComponent_0_4.check_clickToClose(currVal_0_0_3,throwOnChange,false);
    const currVal_0_0_4:any = this.parent.context.maxLength;
    this._NotificationComponent_0_4.check_maxLength(currVal_0_0_4,throwOnChange,false);
    const currVal_0_0_5:any = this.parent.context.theClass;
    this._NotificationComponent_0_4.check_theClass(currVal_0_0_5,throwOnChange,false);
    const currVal_0_0_6:any = this.parent.context.rtl;
    this._NotificationComponent_0_4.check_rtl(currVal_0_0_6,throwOnChange,false);
    const currVal_0_0_7:any = this.parent.context.animate;
    this._NotificationComponent_0_4.check_animate(currVal_0_0_7,throwOnChange,false);
    const currVal_0_0_8:any = this.context.index;
    this._NotificationComponent_0_4.check_position(currVal_0_0_8,throwOnChange,false);
    const currVal_0_0_9:any = this.context.$implicit;
    this._NotificationComponent_0_4.check_item(currVal_0_0_9,throwOnChange,false);
    this._NotificationComponent_0_4.detectChangesInInputProps(this,this._el_0,throwOnChange);
    this.detectContentChildrenChanges(throwOnChange);
    this._NotificationComponent_0_4.detectChangesInHostProps(this,this._el_0,throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
  destroyInternal():void {
    this._NotificationComponent_0_4.context.ngOnDestroy();
  }
}
function viewFactory_SimpleNotificationsComponent1(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<any> {
  return new _View_SimpleNotificationsComponent1(viewUtils,parentInjector,declarationEl);
}