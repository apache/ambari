{"version":3,"file":"parse.pipe.js","sourceRoot":"","sources":["parse.pipe.ts"],"names":[],"mappings":";AAAA,qBAAoC,eAAe,CAAC,CAAA;AACpD,IAAY,MAAM,WAAM,QAAQ,CAAC,CAAA;AAEjC,4FAA4F;AAC5F,IAAM,iBAAiB,GAAyC,MAAO,CAAC,OAAO,IAAI,MAAM,CAAC;AAG1F;IAAA;IAUA,CAAC;IATC,6BAAS,GAAT,UAAU,KAAa,EAAE,MAAc;QACrC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IAC/B,CAAC;IACI,oBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,WAAI,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,EAAG,EAAE;KAC5C,CAAC;IACF,kBAAkB;IACX,wBAAc,GAA6D,EACjF,CAAC;IACF,gBAAC;AAAD,CAAC,AAVD,IAUC;AAVY,iBAAS,YAUrB,CAAA","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\r\nimport * as moment from 'moment';\r\n\r\n// under systemjs, moment is actually exported as the default export, so we account for that\r\nconst momentConstructor: (value?: any) => moment.Moment = (<any>moment).default || moment;\r\n\r\n\r\nexport class ParsePipe implements PipeTransform {\r\n  transform(value: string, format: string): moment.Moment {\r\n    return moment(value, format);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{ name: 'amParse' }, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}