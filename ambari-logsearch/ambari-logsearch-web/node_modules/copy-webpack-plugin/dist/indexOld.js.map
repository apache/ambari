{"version":3,"sources":["../src/indexOld.js"],"names":[],"mappings":"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","file":"indexOld.js","sourcesContent":["import _ from 'lodash';\nimport path from 'path';\nimport Promise from 'bluebird';\nimport toLooksLikeDirectory from './toLooksLikeDirectory';\nimport writeFileToAssets from './writeFileToAssets';\nimport writeDirectoryToAssets from './writeDirectoryToAssets';\nimport shouldIgnore from './shouldIgnore';\n\n/* eslint-disable import/no-commonjs */\nconst globAsync = Promise.promisify(require('glob'));\nconst fs = Promise.promisifyAll(require('fs-extra'));\n/* eslint-enable */\n\nfunction CopyWebpackPlugin(patterns = [], options = {}) {\n    if (!_.isArray(patterns)) {\n        throw new Error('CopyWebpackPlugin: patterns must be an array');\n    }\n\n    const apply = (compiler) => {\n        const webpackContext = compiler.options.context;\n        const outputPath = compiler.options.output.path;\n        const fileDependencies = [];\n        const contextDependencies = [];\n        const webpackIgnore = options.ignore || [];\n        const copyUnmodified = options.copyUnmodified;\n        const writtenAssetHashes = {};\n\n        compiler.plugin('emit', (compilation, cb) => {\n\n            Promise.each(patterns, (pattern) => {\n                let relDest;\n                let globOpts;\n\n                if (pattern.context && !path.isAbsolute(pattern.context)) {\n                    pattern.context = path.resolve(webpackContext, pattern.context);\n                }\n\n                const context = pattern.context || webpackContext;\n                const ignoreList = webpackIgnore.concat(pattern.ignore || []);\n\n                globOpts = {\n                    cwd: context\n                };\n\n                // From can be an object\n                if (pattern.from.glob) {\n                    globOpts = _.assignIn(globOpts, _.omit(pattern.from, 'glob'));\n                    pattern.from = pattern.from.glob;\n                }\n\n                const relSrc = pattern.from;\n                const absSrc = path.resolve(context, relSrc);\n\n                relDest = pattern.to || '';\n\n                const forceWrite = Boolean(pattern.force);\n\n                return fs\n                    .statAsync(absSrc)\n                    .catch(() => {\n                        return null;\n                    })\n                    .then((stat) => {\n                        if (stat && stat.isDirectory()) {\n                            contextDependencies.push(absSrc);\n\n                            // Make the relative destination actually relative\n                            if (path.isAbsolute(relDest)) {\n                                relDest = path.relative(outputPath, relDest);\n                            }\n\n                            return writeDirectoryToAssets({\n                                absDirSrc: absSrc,\n                                compilation,\n                                copyUnmodified,\n                                flatten: pattern.flatten,\n                                forceWrite,\n                                ignoreList,\n                                relDirDest: relDest,\n                                writtenAssetHashes\n                            });\n                        }\n\n                        return globAsync(relSrc, globOpts)\n                            .each((relFileSrcParam) => {\n                                let relFileDest;\n                                let relFileSrc;\n\n                                relFileSrc = relFileSrcParam;\n\n                                // Skip if it matches any of our ignore list\n                                if (shouldIgnore(relFileSrc, ignoreList)) {\n                                    return false;\n                                }\n\n                                const absFileSrc = path.resolve(context, relFileSrc);\n\n                                relFileDest = pattern.to || '';\n\n                                // Remove any directory references if flattening\n                                if (pattern.flatten) {\n                                    relFileSrc = path.basename(relFileSrc);\n                                }\n\n                                const relFileDirname = path.dirname(relFileSrc);\n\n                                fileDependencies.push(absFileSrc);\n\n                                // If the pattern is a blob\n                                if (!stat) {\n                                    var isNamePattern = new RegExp(); \n\n                                    // If the source is absolute\n                                    if (path.isAbsolute(relFileSrc)) {\n                                        // Make the destination relative\n                                        relFileDest = path.join(path.relative(context, relFileDirname), path.basename(relFileSrc));\n\n                                    // If this source is a name pattern\n                                    } else if (isNamePattern.test(relFileSrc)) {\n\n\n                                    // If the source is relative\n                                    } else {\n                                        relFileDest = path.join(relFileDest, relFileSrc);\n                                    }\n\n                                // If it looks like a directory\n                                } else if (toLooksLikeDirectory(pattern)) {\n                                    // Make the path relative to the source\n                                    relFileDest = path.join(relFileDest, path.basename(relFileSrc));\n                                }\n\n                                // If there's still no relFileDest\n                                console.log('still no', relFileDest);\n                                relFileDest = relFileDest || path.basename(relFileSrc);\n                                console.log('after still no', relFileDest);\n\n                                // Make sure the relative destination is actually relative\n                                console.log('is absolute', relFileDest);\n                                if (path.isAbsolute(relFileDest)) {\n                                    relFileDest = path.relative(outputPath, relFileDest);\n                                }\n                                console.log('after is absolute', relFileDest);\n\n                                return writeFileToAssets({\n                                    absFileSrc,\n                                    compilation,\n                                    copyUnmodified,\n                                    forceWrite,\n                                    relFileDest,\n                                    relFileSrc,\n                                    writtenAssetHashes\n                                });\n                            });\n                    });\n            })\n            .catch((err) => {\n                compilation.errors.push(err);\n            })\n            .finally(cb);\n        });\n\n        compiler.plugin('after-emit', (compilation, callback) => {\n            const trackedFiles = compilation.fileDependencies;\n\n            _.forEach(fileDependencies, (file) => {\n                if (!_.includes(trackedFiles, file)) {\n                    trackedFiles.push(file);\n                }\n            });\n\n            const trackedDirs = compilation.contextDependencies;\n\n            _.forEach(contextDependencies, (context) => {\n                if (!_.includes(trackedDirs, context)) {\n                    trackedDirs.push(context);\n                }\n            });\n\n            callback();\n        });\n    };\n\n    return {\n        apply\n    };\n}\n\nCopyWebpackPlugin['default'] = CopyWebpackPlugin;\nmodule.exports = CopyWebpackPlugin;\n"]}