{"version":3,"sources":["../src/writeFileToAssets.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;AAGA,IAAM,KAAK,mBAAQ,YAAR,CAAqB,QAAQ,UAAR,CAArB,CAAX;;;kBAGe,UAAC,IAAD,EAAU;AACrB,QAAM,cAAc,KAAK,WAAzB;;AAEA,QAAI,cAAc,KAAK,WAAL,CAAiB,OAAjB,CAAyB,KAAzB,EAAgC,GAAhC,CAAlB;AACA,QAAM,aAAa,KAAK,UAAL,CAAgB,OAAhB,CAAwB,KAAxB,EAA+B,GAA/B,CAAnB;AACA,QAAM,aAAa,KAAK,UAAxB;AACA,QAAM,aAAa,KAAK,UAAxB;AACA,QAAM,iBAAiB,KAAK,cAA5B;AACA,QAAM,qBAAqB,KAAK,kBAAhC;;AAEA,WAAO,GACN,SADM,CACI,UADJ,EAEN,IAFM,CAED,UAAC,IAAD,EAAU;;;AAGZ,YAAI,KAAK,WAAL,EAAJ,EAAwB;AACpB;AACH;;AAED,iBAAS,WAAT,CAAqB,OAArB,EAA8B;;AAE1B,oBAAQ,GAAR,CAAY,oBAAZ,EAAkC,WAAlC;AACA,0BAAc,sBAAY,eAAZ,CACV,EAAC,cAAc,UAAf,EADU,EAEV,WAFU,EAGV,EAAC,gBAAD,EAHU,CAAd;;AAKA,oBAAQ,GAAR,CAAY,YAAZ,EAA0B,UAA1B;AACA,oBAAQ,GAAR,CAAY,mBAAZ,EAAiC,WAAjC;;AAEA,gBAAI,YAAY,MAAZ,CAAmB,WAAnB,KAAmC,CAAC,UAAxC,EAAoD;AAChD;AACH;;AAED,wBAAY,MAAZ,CAAmB,WAAnB,IAAkC;AAC9B,sBAAM,gBAAW;AACb,2BAAO,KAAK,IAAZ;AACH,iBAH6B;AAI9B,wBAAQ,kBAAW;AACf,2BAAO,GAAG,YAAH,CAAgB,UAAhB,CAAP;AACH;AAN6B,aAAlC;;AASA,mBAAO,WAAP;AACH;;AAED,eAAO,GAAG,aAAH,CAAiB,UAAjB,EACN,IADM,CACD,UAAC,OAAD,EAAa;AACf,gBAAI,OAAO,sBAAY,aAAZ,CAA0B,OAA1B,CAAX;AACA,gBAAI,CAAC,cAAD,IACA,mBAAmB,WAAnB,CADA,IAEA,mBAAmB,WAAnB,MAAoC,IAFxC,EAE8C;AAC1C;AACH;AACD,+BAAmB,WAAnB,IAAkC,IAAlC;AACA,mBAAO,YAAY,OAAZ,CAAP;AACH,SAVM,CAAP;AAWH,KA/CM,CAAP;AAgDH,C","file":"writeFileToAssets.js","sourcesContent":["import Promise from 'bluebird';\nimport loaderUtils from 'loader-utils';\n\n/* eslint-disable import/no-commonjs */\nconst fs = Promise.promisifyAll(require('fs-extra'));\n/* eslint-enable */\n\nexport default (opts) => {\n    const compilation = opts.compilation;\n    // ensure forward slashes\n    let relFileDest = opts.relFileDest.replace(/\\\\/g, '/');\n    const relFileSrc = opts.relFileSrc.replace(/\\\\/g, '/');\n    const absFileSrc = opts.absFileSrc;\n    const forceWrite = opts.forceWrite;\n    const copyUnmodified = opts.copyUnmodified;\n    const writtenAssetHashes = opts.writtenAssetHashes;\n\n    return fs\n    .statAsync(absFileSrc)\n    .then((stat) => {\n\n        // We don't write empty directories\n        if (stat.isDirectory()) {\n            return;\n        }\n\n        function addToAssets(content) {\n\n            console.log('before relFileDest', relFileDest);\n            relFileDest = loaderUtils.interpolateName(\n                {resourcePath: relFileSrc},\n                relFileDest,\n                {content});\n\n            console.log('relFileSrc', relFileSrc);\n            console.log('after relFileDest', relFileDest);\n\n            if (compilation.assets[relFileDest] && !forceWrite) {\n                return;\n            }\n\n            compilation.assets[relFileDest] = {\n                size: function() {\n                    return stat.size;\n                },\n                source: function() {\n                    return fs.readFileSync(absFileSrc);\n                }\n            };\n\n            return relFileDest;\n        }\n\n        return fs.readFileAsync(absFileSrc)\n        .then((content) => {\n            var hash = loaderUtils.getHashDigest(content);\n            if (!copyUnmodified &&\n                writtenAssetHashes[relFileDest] &&\n                writtenAssetHashes[relFileDest] === hash) {\n                return;\n            }\n            writtenAssetHashes[relFileDest] = hash;\n            return addToAssets(content);\n        });\n    });\n};\n"]}