{"version":3,"sources":["../src/writeDirectoryToAssets.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;AAGA,IAAM,MAAM,mBAAQ,YAAR,CAAqB,QAAQ,UAAR,CAArB,CAAZ;;;kBAGe,UAAC,IAAD,EAAU;AACrB,QAAM,cAAc,KAAK,WAAzB;AACA,QAAM,YAAY,KAAK,SAAvB;AACA,QAAM,aAAa,KAAK,UAAxB;AACA,QAAM,UAAU,KAAK,OAArB;AACA,QAAM,aAAa,KAAK,UAAxB;AACA,QAAM,aAAa,KAAK,UAAxB;AACA,QAAM,iBAAiB,KAAK,cAA5B;AACA,QAAM,qBAAqB,KAAK,kBAAhC;;AAEA,WAAO,IAAI,UAAJ,CAAe,SAAf,EACF,GADE,CACE,UAAC,UAAD,EAAgB;AACjB,YAAI,oBAAJ;;AAEA,YAAM,aAAa,eAAK,QAAL,CAAc,SAAd,EAAyB,UAAzB,CAAnB;;AAEA,sBAAc,eAAK,IAAL,CAAU,UAAV,EAAsB,UAAtB,CAAd;;;AAGA,YAAI,OAAJ,EAAa;AACT,0BAAc,eAAK,IAAL,CAAU,UAAV,EAAsB,eAAK,QAAL,CAAc,WAAd,CAAtB,CAAd;AACH;;;AAGD,YAAI,4BAAa,UAAb,EAAyB,UAAzB,CAAJ,EAA0C;AACtC,mBAAO,KAAP;AACH;;;AAGD,YAAI,iBAAE,IAAF,CAAO,WAAP,MAAwB,eAAK,GAAjC,EAAsC;AAClC,0BAAc,YAAY,KAAZ,CAAkB,CAAlB,CAAd;AACH;;AAED,eAAO,iCAAkB;AACrB,kCADqB;AAErB,oCAFqB;AAGrB,0CAHqB;AAIrB,kCAJqB;AAKrB,oCALqB;AAMrB,kCANqB;AAOrB;AAPqB,SAAlB,CAAP;AASH,KAhCE,CAAP;AAiCH,C","file":"writeDirectoryToAssets.js","sourcesContent":["import Promise from 'bluebird';\nimport _ from 'lodash';\nimport shouldIgnore from './shouldIgnore';\nimport path from 'path';\nimport writeFileToAssets from './writeFileToAssets';\n\n/* eslint-disable import/no-commonjs */\nconst dir = Promise.promisifyAll(require('node-dir'));\n/* eslint-enable */\n\nexport default (opts) => {\n    const compilation = opts.compilation;\n    const absDirSrc = opts.absDirSrc;\n    const relDirDest = opts.relDirDest;\n    const flatten = opts.flatten;\n    const forceWrite = opts.forceWrite;\n    const ignoreList = opts.ignoreList;\n    const copyUnmodified = opts.copyUnmodified;\n    const writtenAssetHashes = opts.writtenAssetHashes;\n\n    return dir.filesAsync(absDirSrc)\n        .map((absFileSrc) => {\n            let relFileDest;\n\n            const relFileSrc = path.relative(absDirSrc, absFileSrc);\n\n            relFileDest = path.join(relDirDest, relFileSrc);\n\n            // Remove any directory reference if flattening\n            if (flatten) {\n                relFileDest = path.join(relDirDest, path.basename(relFileDest));\n            }\n\n            // Skip if it matches any of our ignore list\n            if (shouldIgnore(relFileSrc, ignoreList)) {\n                return false;\n            }\n\n            // Make sure it doesn't start with the separator\n            if (_.head(relFileDest) === path.sep) {\n                relFileDest = relFileDest.slice(1);\n            }\n\n            return writeFileToAssets({\n                absFileSrc,\n                compilation,\n                copyUnmodified,\n                forceWrite,\n                relFileDest,\n                relFileSrc,\n                writtenAssetHashes\n            });\n        });\n};\n"]}