{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;AAGA,IAAM,YAAY,mBAAQ,SAAR,CAAkB,QAAQ,MAAR,CAAlB,CAAlB;AACA,IAAM,KAAK,mBAAQ,YAAR,CAAqB,QAAQ,IAAR,CAArB,CAAX;;;AAGA,IAAI,aAAa,IAAjB;AACA,IAAI,iBAAiB,IAAI,MAAJ,CAAW,gBAAX,CAArB;;AAEA,SAAS,SAAT,CAAmB,SAAnB,EAA8B,OAA9B,EAAuC,IAAvC,EAA6C;AAAA,QAClC,GADkC,GACI,SADJ,CAClC,GADkC;AAAA,QAC7B,WAD6B,GACI,SADJ,CAC7B,WAD6B;AAAA,QAChB,gBADgB,GACI,SADJ,CAChB,gBADgB;;;AAGzC,WAAO,GAAG,SAAH,CAAa,KAAK,YAAlB,EACN,IADM,CACD,UAAC,IAAD,EAAU;;AAEZ,YAAI,KAAK,WAAL,EAAJ,EAAwB;AACpB;AACH;;;AAGD,YAAI,QAAQ,QAAR,KAAqB,MAAzB,EAAiC;AAC7B,6BAAiB,IAAjB,CAAsB,KAAK,YAA3B;AACH;;AAED,yBAAe,KAAK,YAApB;AACA,eAAO,GAAG,aAAH,CAAiB,KAAK,YAAtB,EACN,IADM,CACD,UAAC,OAAD,EAAa;;;;;;;;AAQf,6BAAe,KAAK,SAApB,oCAA4D,KAAK,YAAjE;AACA,wBAAY,MAAZ,CAAmB,KAAK,SAAxB,IAAqC;AACjC,sBAAM,gBAAW;AACb,2BAAO,KAAK,IAAZ;AACH,iBAHgC;AAIjC,wBAAQ,kBAAW;AACf,2BAAO,OAAP;AACH;AANgC,aAArC;AAQH,SAlBM,CAAP;AAmBH,KAhCM,CAAP;AAiCH;;AAED,SAAS,cAAT,CAAwB,SAAxB,EAAmC,OAAnC,EAA4C;AAAA,QACjC,GADiC,GAClB,SADkB,CACjC,GADiC;AAAA,QAC5B,MAD4B,GAClB,SADkB,CAC5B,MAD4B;;AAExC,QAAM,WAAW,iBAAE,MAAF,CAAS;AACtB,aAAK,QAAQ;AADS,KAAT,EAEd,QAAQ,QAAR,IAAoB,EAFN,CAAjB;;AAIA,WAAO,UAAU,QAAQ,YAAlB,EAAgC,QAAhC,EACN,IADM,CACD,UAAC,QAAD,EAAc;AAChB,YAAM,OAAO;AACT,0BAAc,eAAK,OAAL,CAAa,QAAQ,OAArB,EAA8B,QAA9B;AADL,SAAb;AAGA,aAAK,YAAL,GAAoB,eAAK,QAAL,CAAc,QAAQ,OAAtB,EAA+B,KAAK,YAApC,CAApB;;;AAGA,YAAI,KAAK,QAAQ,MAAR,CAAe,MAAxB;AACA,eAAO,IAAP,EAAa;AACT,gBAAM,aAAa,QAAQ,MAAR,CAAe,EAAf,CAAnB;;AAEA,gBAAI,aAAa;AACb,2BAAW;AADE,aAAjB;;AAIA,gBAAI,aAAJ;AACA,gBAAI,iBAAE,QAAF,CAAW,UAAX,CAAJ,EAA4B;AACxB,uBAAO,UAAP;AACH,aAFD,MAEO,IAAI,iBAAE,QAAF,CAAW,UAAX,CAAJ,EAA4B;AAC/B,uBAAO,WAAW,IAAX,IAAmB,EAA1B;;AAEA,6BAAa,iBAAE,MAAF,CAAS,UAAT,EAAqB,iBAAE,IAAF,CAAO,UAAP,EAAmB,CAAC,MAAD,CAAnB,CAArB,CAAb;AACH,aAJM,MAIA;AACH,uBAAO,EAAP;AACH;;AAED,gBAAI,yBAAU,KAAK,YAAf,EAA6B,IAA7B,EAAmC,UAAnC,CAAJ,EAAoD;AAChD,kCAAgB,KAAK,YAArB,6CAAyE,IAAzE;AACA;AACH;AACJ;;;AAGD,YAAI,QAAQ,MAAR,KAAmB,KAAvB,EAA8B;AAC1B,iBAAK,SAAL,GAAiB,eAAK,IAAL,CAAU,QAAQ,EAAlB,EAAsB,KAAK,YAA3B,CAAjB;AACH,SAFD,MAEO,IAAI,QAAQ,MAAR,KAAmB,MAAvB,EAA+B;AAClC,iBAAK,SAAL,GAAiB,QAAQ,EAAR,IAAc,KAAK,YAApC;AACH,SAFM,MAEA,IAAI,QAAQ,MAAR,KAAmB,UAAvB,EAAmC;AACtC,iBAAK,iBAAL,GAAyB,QAAQ,EAAjC;AACH;;AAED,YAAI,eAAK,UAAL,CAAgB,KAAK,SAArB,CAAJ,EAAqC;AACjC,iBAAK,SAAL,GAAiB,eAAK,QAAL,CAAc,MAAd,EAAsB,KAAK,SAA3B,CAAjB;AACH;;AAED,eAAO,UAAU,SAAV,EAAqB,OAArB,EAA8B,IAA9B,CAAP;AACH,KA/CM,CAAP;AAgDH;;AAED,SAAS,iBAAT,CAA2B,SAA3B,EAAsC,OAAtC,EAA+C;AAAA,QACpC,GADoC,GAC2B,SAD3B,CACpC,GADoC;AAAA,QAC/B,OAD+B,GAC2B,SAD3B,CAC/B,OAD+B;AAAA,QACtB,MADsB,GAC2B,SAD3B,CACtB,MADsB;AAAA,QACd,gBADc,GAC2B,SAD3B,CACd,gBADc;AAAA,QACI,mBADJ,GAC2B,SAD3B,CACI,mBADJ;;;AAG3C,YAAQ,EAAR,GAAa,QAAQ,EAAR,IAAc,EAA3B;AACA,YAAQ,OAAR,GAAkB,QAAQ,OAAR,IAAmB,OAArC;AACA,YAAQ,MAAR,GAAiB,UAAU,MAAV,CAAiB,MAAjB,CAAwB,QAAQ,MAAR,IAAkB,EAA1C,CAAjB;;AAEA,gCAAyB,QAAQ,IAAjC,iBAA+C,QAAQ,EAAvD;;AAEA,YAAO,IAAP;AACI,aAAK,CAAC,CAAC,QAAQ,MAAf;;AACI;AACJ,aAAK,eAAe,IAAf,CAAoB,QAAQ,EAA5B,CAAL;AACI,oBAAQ,MAAR,GAAiB,UAAjB;AACA;AACJ,aAAK,eAAK,OAAL,CAAa,QAAQ,EAArB,MAA6B,EAAlC;AACI,oBAAQ,MAAR,GAAiB,KAAjB;AACA;AACJ;AACI,oBAAQ,MAAR,GAAiB,MAAjB;AAVR;;AAaA,0BAAmB,QAAQ,EAA3B,kBAAwC,QAAQ,MAAhD;;AAEA,QAAI,eAAK,UAAL,CAAgB,QAAQ,IAAxB,CAAJ,EAAmC;AAC/B,gBAAQ,YAAR,GAAuB,QAAQ,IAA/B;AACH,KAFD,MAEO;AACH,gBAAQ,YAAR,GAAuB,eAAK,OAAL,CAAa,QAAQ,OAArB,EAA8B,QAAQ,IAAtC,CAAvB;AACH;;AAED,0BAAmB,QAAQ,IAA3B,6BAAqD,QAAQ,YAA7D;;AAEA,WAAO,GACN,SADM,CACI,QAAQ,YADZ,EAEN,KAFM,CAEA,YAAM;;AAET,YAAI,WAAW,IAAX,CAAgB,QAAQ,IAAxB,CAAJ,EAAmC;AAC/B,oBAAQ,QAAR,GAAmB,MAAnB;AACH,SAFD,MAEO;AACH,kDAAmC,QAAQ,IAA3C,gBAAwD,QAAQ,YAAhE;AACH;AACJ,KATM,EAUN,IAVM,CAUD,UAAC,IAAD,EAAU;AACZ,YAAI,CAAC,IAAL,EAAW;AACP,mBAAO,OAAP;AACH;;AAED,YAAI,KAAK,WAAL,EAAJ,EAAwB;AACpB,oBAAQ,QAAR,GAAmB,KAAnB;AACA,oBAAQ,OAAR,GAAkB,QAAQ,YAA1B;AACA,gCAAoB,IAApB,CAAyB,QAAQ,YAAjC;AACA,oBAAQ,YAAR,GAAuB,eAAK,IAAL,CAAU,QAAQ,YAAlB,EAAgC,MAAhC,CAAvB;AACA,oBAAQ,QAAR,GAAmB;AACf,qBAAK;AADU,aAAnB;;AAIH,SATD,MASO,IAAG,KAAK,MAAL,EAAH,EAAkB;AACrB,oBAAQ,QAAR,GAAmB,MAAnB;AACA,oBAAQ,OAAR,GAAkB,eAAK,OAAL,CAAa,QAAQ,YAArB,CAAlB;AACA,oBAAQ,QAAR,GAAmB;AACf,qBAAK;AADU,aAAnB;AAGA,6BAAiB,IAAjB,CAAsB,QAAQ,YAA9B;AACH,SAPM,MAOA,IAAG,CAAC,QAAQ,QAAZ,EAAsB;AACzB,kBAAM,IAAI,KAAJ,uDAA8D,QAAQ,IAAtE,CAAN;AACH;AACD,eAAO,OAAP;AACH,KAnCM,CAAP;AAoCH;;AAED,SAAS,iBAAT,GAAwD;AAAA,QAA7B,QAA6B,yDAAlB,EAAkB;AAAA,QAAd,OAAc,yDAAJ,EAAI;;AACpD,QAAI,CAAC,MAAM,OAAN,CAAc,QAAd,CAAL,EAA8B;AAC1B,cAAM,IAAI,KAAJ,CAAU,iDAAV,CAAN;AACH;;AAED,aAAS,GAAT,CAAa,GAAb,EAAkB;AACd,YAAI,QAAQ,KAAZ,EAAmB;AACf,oBAAQ,GAAR,CAAY,2BAA2B,GAAvC;AACH;AACJ;;AAED,QAAM,QAAQ,SAAR,KAAQ,CAAC,QAAD,EAAc;AACxB,YAAM,mBAAmB,EAAzB;AACA,YAAM,sBAAsB,EAA5B;;AAEA,iBAAS,MAAT,CAAgB,MAAhB,EAAwB,UAAC,WAAD,EAAc,EAAd,EAAqB;AACzC,gBAAI,eAAJ;AACA,gBAAM,WAAW,SAAX,QAAW,GAAM;AACnB,oBAAI,gBAAJ;AACA;AACH,aAHD;;AAKA,gBAAM,YAAY;AACd,wBADc;AAEd,wCAFc;AAGd,kDAHc;AAId,wDAJc;AAKd,yBAAS,SAAS,OAAT,CAAiB,OALZ;AAMd,wBAAQ,SAAS,OAAT,CAAiB,MAAjB,CAAwB,IANlB;AAOd,wBAAQ,QAAQ,MAAR,IAAkB;AAPZ,aAAlB;;AAUA,+BAAQ,IAAR,CAAa,QAAb,EAAuB,UAAC,OAAD,EAAa;;AAEhC,uBAAO,kBAAkB,SAAlB,EAA6B,OAA7B,EACN,IADM,CACD,UAAC,OAAD,EAAa;;AAEf,2BAAO,eAAe,SAAf,EAA0B,OAA1B,CAAP;AACH,iBAJM,CAAP;AAKH,aAPD,EAQC,KARD,CAQO,UAAC,GAAD,EAAS;AACZ,4BAAY,MAAZ,CAAmB,IAAnB,CAAwB,GAAxB;AACH,aAVD,EAWC,OAXD,CAWS,QAXT;AAYH,SA7BD;;AA+BA,iBAAS,MAAT,CAAgB,YAAhB,EAA8B,UAAC,WAAD,EAAc,EAAd,EAAqB;AAC/C,gBAAI,qBAAJ;AACA,gBAAM,WAAW,SAAX,QAAW,GAAM;AACnB,oBAAI,sBAAJ;AACA;AACH,aAHD;;;AAMA,6BAAE,OAAF,CAAU,gBAAV,EAA4B,UAAC,IAAD,EAAU;AAClC,oBAAI,iBAAE,QAAF,CAAW,YAAY,gBAAvB,EAAyC,IAAzC,CAAJ,EAAoD;AAChD,wCAAkB,IAAlB;AACH,iBAFD,MAEO;AACH,oCAAc,IAAd;AACA,gCAAY,gBAAZ,CAA6B,IAA7B,CAAkC,IAAlC;AACH;AACJ,aAPD;;;AAUA,6BAAE,OAAF,CAAU,mBAAV,EAA+B,UAAC,OAAD,EAAa;AACxC,oBAAI,CAAC,iBAAE,QAAF,CAAW,YAAY,mBAAvB,EAA4C,OAA5C,CAAL,EAA2D;AACvD,wCAAkB,OAAlB;AACH,iBAFD,MAEO;AACH,oCAAc,OAAd;AACA,gCAAY,mBAAZ,CAAgC,IAAhC,CAAqC,OAArC;AACH;AACJ,aAPD;;AASA;AACH,SA5BD;AA6BH,KAhED;;AAkEA,WAAO;AACH;AADG,KAAP;AAGH;;AAED,kBAAkB,SAAlB,IAA+B,iBAA/B;AACA,OAAO,OAAP,GAAiB,iBAAjB","file":"index.js","sourcesContent":["import Promise from 'bluebird';\nimport path from 'path';\nimport loaderUtils from 'loader-utils';\nimport _ from 'lodash';\nimport minimatch from 'minimatch';\n\n/* eslint-disable import/no-commonjs */\nconst globAsync = Promise.promisify(require('glob'));\nconst fs = Promise.promisifyAll(require('fs'));\n/* eslint-enable */\n\nvar isGlobLike = /\\*/;\nvar isTemplateLike = new RegExp('templateRegExp');\n\nfunction writeFile(globalRef, pattern, file) {\n    const {log, compilation, fileDependencies} = globalRef;\n\n    return fs.statAsync(file.absoluteFrom)\n    .then((stat) => {\n        // We don't write empty directories\n        if (stat.isDirectory()) {\n            return;\n        }\n\n        // If this came from a glob, add it to the file watchlist\n        if (pattern.fromType === 'glob') {\n            fileDependencies.push(file.absoluteFrom);\n        }\n\n        log(`reading ${file.absoluteFrom} to write to assets`);\n        return fs.readFileAsync(file.absoluteFrom)\n        .then((content) => {\n            //var hash = loaderUtils.getHashDigest(content);\n            /*\n            file.webpackTo = loaderUtils.interpolateName(\n                {resourcePath: file.relativeFrom},\n                file.webpackTo,\n                {content});\n            */\n            log(`writing ${file.webpackTo} to compilation assets from ${file.absoluteFrom}`);\n            compilation.assets[file.webpackTo] = {\n                size: function() {\n                    return stat.size;\n                },\n                source: function() {\n                    return content;\n                }\n            };\n        });\n    });\n}\n\nfunction processPattern(globalRef, pattern) {\n    const {log, output} = globalRef;\n    const globArgs = _.assign({\n        cwd: pattern.context\n    }, pattern.fromArgs || {});\n\n    return globAsync(pattern.absoluteFrom, globArgs)\n    .each((fileFrom) => {\n        const file = {\n            absoluteFrom: path.resolve(pattern.context, fileFrom)\n        }\n        file.relativeFrom = path.relative(pattern.context, file.absoluteFrom);\n\n        // Check the ignore list\n        let il = pattern.ignore.length;\n        while (il--) {\n            const ignoreGlob = pattern.ignore[il];\n\n            let globParams = {\n                matchBase: true\n            };\n\n            let glob;\n            if (_.isString(ignoreGlob)) {\n                glob = ignoreGlob;\n            } else if (_.isObject(ignoreGlob)) {\n                glob = ignoreGlob.glob || '';\n                // Overwrite minimatch defaults\n                globParams = _.assign(globParams, _.omit(ignoreGlob, ['glob']));\n            } else {\n                glob = '';\n            }\n\n            if (minimatch(file.absoluteFrom, glob, globParams)) {\n                log(`ignoring ${file.absoluteFrom}, because it matches the ignore glob ${glob}`);\n                return;\n            }\n        }\n\n        // Change the to path to be relative for webpack\n        if (pattern.toType === 'dir') {\n            file.webpackTo = path.join(pattern.to, file.relativeFrom);\n        } else if (pattern.toType === 'file') {\n            file.webpackTo = pattern.to || file.relativeFrom;\n        } else if (pattern.toType === 'template') {\n            file.webpackToTemplate = pattern.to;\n        }\n\n        if (path.isAbsolute(file.webpackTo)) {\n            file.webpackTo = path.relative(output, file.webpackTo);\n        }\n\n        return writeFile(globalRef, pattern, file);\n    });\n}\n\nfunction preProcessPattern(globalRef, pattern) {\n    const {log, context, output, fileDependencies, contextDependencies} = globalRef;\n\n    pattern.to = pattern.to || '';\n    pattern.context = pattern.context || context;\n    pattern.ignore = globalRef.ignore.concat(pattern.ignore || []);\n\n    log(`processing from: '${pattern.from}' to: '${pattern.to}'`);\n\n    switch(true) {\n        case !!pattern.toType: // if toType already exists\n            break;\n        case isTemplateLike.test(pattern.to):\n            pattern.toType = 'template';\n            break;\n        case path.extname(pattern.to) === '':\n            pattern.toType = 'dir';\n            break;\n        default:\n            pattern.toType = 'file';\n    }\n\n    log(`determined '${pattern.to}' is a '${pattern.toType}'`);\n\n    if (path.isAbsolute(pattern.from)) {\n        pattern.absoluteFrom = pattern.from;\n    } else {\n        pattern.absoluteFrom = path.resolve(pattern.context, pattern.from);\n    }\n\n    log(`determined '${pattern.from}' to be read from '${pattern.absoluteFrom}'`);\n\n    return fs\n    .statAsync(pattern.absoluteFrom)\n    .catch(() => {\n        // If from doesn't appear to be a glob, then log a warning\n        if (isGlobLike.test(pattern.from)) {\n            pattern.fromType = 'glob';\n        } else {\n            log(`WARNING - unable to locate '${pattern.from}' at '${pattern.absoluteFrom}'`);\n        }\n    })\n    .then((stat) => {\n        if (!stat) {\n            return pattern;\n        }\n\n        if (stat.isDirectory()) {\n            pattern.fromType = 'dir';\n            pattern.context = pattern.absoluteFrom;\n            contextDependencies.push(pattern.absoluteFrom);\n            pattern.absoluteFrom = path.join(pattern.absoluteFrom, '**/*');\n            pattern.fromArgs = {\n                dot: true\n            };\n            //pattern.context = path.resolve(pattern.context, pattern.relativeFrom);\n        } else if(stat.isFile()) {\n            pattern.fromType = 'file';\n            pattern.context = path.dirname(pattern.absoluteFrom);\n            pattern.fromArgs = {\n                dot: true\n            };\n            fileDependencies.push(pattern.absoluteFrom);\n        } else if(!pattern.fromType) {\n            throw new Error(`[copy-webpack-plugin] Unrecognized file type for ${pattern.from}`);\n        }\n        return pattern;\n    });\n}\n\nfunction CopyWebpackPlugin(patterns = [], options = {}) {\n    if (!Array.isArray(patterns)) {\n        throw new Error('[copy-webpack-plugin] patterns must be an array');\n    }\n\n    function log(msg) {\n        if (options.debug) {\n            console.log('[copy-webpack-plugin] ' + msg);\n        }\n    }\n\n    const apply = (compiler) => {\n        const fileDependencies = [];\n        const contextDependencies = [];\n\n        compiler.plugin('emit', (compilation, cb) => {\n            log('starting emit')\n            const callback = () => {\n                log('finishing emit')\n                cb();\n            };\n\n            const globalRef = {\n                log,\n                compilation,\n                fileDependencies,\n                contextDependencies,\n                context: compiler.options.context,\n                output: compiler.options.output.path,\n                ignore: options.ignore || []\n            }\n\n            Promise.each(patterns, (pattern) => {\n                // Identify absolute source of each pattern and destination type\n                return preProcessPattern(globalRef, pattern)\n                .then((pattern) => {\n                    // Every source (from) is assumed to exist here\n                    return processPattern(globalRef, pattern);\n                });\n            })\n            .catch((err) => {\n                compilation.errors.push(err);\n            })\n            .finally(callback);\n        });\n\n        compiler.plugin('after-emit', (compilation, cb) => {\n            log('starting after-emit')\n            const callback = () => {\n                log('finishing after-emit')\n                cb();\n            }\n\n            // Add file dependencies if they're not already tracked\n            _.forEach(fileDependencies, (file) => {\n                if (_.includes(compilation.fileDependencies, file)) {\n                    log(`not adding ${file} to change tracking, because it's already tracked`);\n                } else {\n                    log(`adding ${file} to change tracking`);\n                    compilation.fileDependencies.push(file);\n                }\n            });\n\n            // Add context dependencies if they're not already tracked\n            _.forEach(contextDependencies, (context) => {\n                if (!_.includes(compilation.contextDependencies, context)) {\n                    log(`not adding ${context} to change tracking, because it's already tracked`);\n                } else {\n                    log(`adding ${context} to change tracking`);\n                    compilation.contextDependencies.push(context);\n                }\n            });\n\n            callback();\n        });\n    };\n    \n    return {\n        apply\n    };\n}\n\nCopyWebpackPlugin['default'] = CopyWebpackPlugin;\nmodule.exports = CopyWebpackPlugin;\n"]}