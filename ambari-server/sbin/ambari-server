#!/usr/bin/env bash
# chkconfig: 345 95 20
# description: ambari-server daemon
# processname: ambari-server

# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# /etc/init.d/ambari-server

VERSION="${ambariVersion}"
HASH="${buildNumber}"

case "$1" in
  --version)
        echo -e $VERSION
        exit 0
        ;;
  --hash)
        echo -e $HASH
        exit 0
        ;;
esac

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
export ROOT=`dirname $(dirname $SCRIPT_DIR)`
ROOT=`echo $ROOT | sed 's/\/$//'`

export PATH=$ROOT/usr/lib/ambari-server/*:$PATH:/sbin/:/usr/sbin
export AMBARI_CONF_DIR=$ROOT/etc/ambari-server/conf

PYTHON_WRAP="$ROOT/usr/bin/ambari-python-wrap"
AMBARI_ENV="$ROOT/var/lib/ambari-server/ambari-env.sh"
AMBARI_PYTHON_EXECUTABLE="$ROOT/usr/sbin/ambari-server.py"
AMBARI_EXECUTABLE="$ROOT/usr/sbin/ambari-server"

if [ -z "$PYTHON" ] ; then
  export PYTHON=`readlink $PYTHON_WRAP`
fi

if [ -a "$AMBARI_ENV" ]; then
  . "$AMBARI_ENV"
fi

if [ -z "$AMBARI_PASSPHRASE" ]; then
  AMBARI_PASSPHRASE="DEV"
fi

if [ -n "$JAVA_HOME" ]; then
  export JAVA_HOME=$JAVA_HOME
fi

export AMBARI_PASSPHRASE=$AMBARI_PASSPHRASE

# check for version
majversion=`$PYTHON -V 2>&1 | awk '{print $2}' | cut -d'.' -f1`
minversion=`$PYTHON -V 2>&1 | awk '{print $2}' | cut -d'.' -f2`
numversion=$(( 10 * $majversion + $minversion))
if (( $numversion < 26 )); then
  echo "Need python version > 2.6"
  exit 1
fi
echo "Using python " $PYTHON

ret=0
case "$1" in
  start)
        echo -e "Starting ambari-server"
        $PYTHON "$AMBARI_PYTHON_EXECUTABLE" $@
        ;;
  stop)
        echo -e "Stopping ambari-server"
        $PYTHON "$AMBARI_PYTHON_EXECUTABLE" $@
        ;;
  reset)
        echo -e "Resetting ambari-server"
        $PYTHON "$AMBARI_PYTHON_EXECUTABLE" $@
        ;;
  restart)
        echo -e "Restarting ambari-server"
        $0 stop
        $0 start
        ;;
  upgrade)
        echo -e "Upgrading ambari-server"
        $PYTHON "$AMBARI_PYTHON_EXECUTABLE" $@
        ;;
  status)
        echo -e "Ambari-server status"
        $PYTHON "$AMBARI_PYTHON_EXECUTABLE" $@
        ;;
  upgradestack)
        echo -e "Upgrading stack of ambari-server"
        $PYTHON "$AMBARI_PYTHON_EXECUTABLE" $@
        ;;
  setup)
        echo -e "Setup ambari-server"
        $PYTHON "$AMBARI_PYTHON_EXECUTABLE" $@
        ;;
  setup-jce)
        echo -e "Updating jce policy"
        $PYTHON "$AMBARI_PYTHON_EXECUTABLE" $@
        ;;
  setup-ldap)
        echo -e "Setting up LDAP properties..."
        $PYTHON "$AMBARI_PYTHON_EXECUTABLE" $@
        ;;
  sync-ldap)
        echo -e "Syncing with LDAP..."
        $PYTHON "$AMBARI_PYTHON_EXECUTABLE" $@
        ;;
  set-current)
        echo -e "Setting current version..."
        $PYTHON "$AMBARI_PYTHON_EXECUTABLE" $@
        ;;
  setup-security)
        echo -e "Security setup options..."
        $PYTHON "$AMBARI_PYTHON_EXECUTABLE" $@
        ;;
  refresh-stack-hash)
        echo -e "Refreshing stack hashes..."
        $PYTHON "$AMBARI_PYTHON_EXECUTABLE" $@
        ;;
  backup)
        echo -e "Backing up Ambari File System state... *this will not backup the server database*"
        $PYTHON "$AMBARI_PYTHON_EXECUTABLE" $@
        ;;
  restore)
        echo -e "Restoring Ambari File System state"
        $PYTHON "$AMBARI_PYTHON_EXECUTABLE" $@
        ;;
  update-host-names)
        echo -e "Updating host names"
        $PYTHON "$AMBARI_PYTHON_EXECUTABLE" $@
        ;;
  check-database)
        echo -e "Checking database"
        $PYTHON "$AMBARI_PYTHON_EXECUTABLE" $@
        ;;
  enable-stack)
        echo -e "Enabling stack(s)..."
        $PYTHON "$AMBARI_PYTHON_EXECUTABLE" $@
        ;;
  setup-sso)
        echo -e "Setting up SSO authentication properties..."
        $PYTHON "$AMBARI_PYTHON_EXECUTABLE" $@
        ;;
  db-cleanup)
        echo -e "Cleanup database..."
        $PYTHON "$AMBARI_PYTHON_EXECUTABLE" $@
        ;;
  install-mpack)
        echo -e "Installing management pack"
        $PYTHON "$AMBARI_PYTHON_EXECUTABLE" $@
        ;;
  upgrade-mpack)
        echo -e "Upgrading management pack"
        $PYTHON "$AMBARI_PYTHON_EXECUTABLE" $@
        ;;
  *)
        echo "Usage: $AMBARI_PYTHON_EXECUTABLE
        {start|stop|restart|setup|setup-jce|upgrade|status|upgradestack|setup-ldap|sync-ldap|set-current|setup-security|setup-sso|refresh-stack-hash|backup|restore|update-host-names|enable-stack|check-database|db-cleanup} [options]
        Use $AMBARI_PYTHON_EXECUTABLE <action> --help to get details on options available.
        Or, simply invoke ambari-server.py --help to print the options."
        exit 1
esac

exit $?
