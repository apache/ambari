{
    "roleCommand": "SERVICE_CHECK", 
    "forceRefreshConfigTagsBeforeExecution": [], 
    "configuration_attributes": {
        "ranger-hdfs-audit": {}, 
        "webhcat-log4j": {}, 
        "ranger-yarn-plugin-properties": {}, 
        "ranger-hdfs-policymgr-ssl": {}, 
        "pig-env": {}, 
        "ranger-hbase-audit": {}, 
        "ssl-client": {}, 
        "ranger-hive-policymgr-ssl": {}, 
        "yarn-client": {}, 
        "ranger-hive-security": {}, 
        "hbase-policy": {}, 
        "webhcat-env": {}, 
        "hcat-env": {}, 
        "tez-site": {}, 
        "hdfs-site": {
            "final": {
                "dfs.datanode.failed.volumes.tolerated": "true", 
                "dfs.datanode.data.dir": "true", 
                "dfs.namenode.http-address": "true", 
                "dfs.namenode.name.dir": "true", 
                "dfs.webhdfs.enabled": "true"
            }
        }, 
        "yarn-log4j": {}, 
        "hive-env": {}, 
        "tez-env": {}, 
        "hbase-site": {}, 
        "hadoop-policy": {}, 
        "hdfs-log4j": {}, 
        "hive-log4j": {}, 
        "hive-exec-log4j": {}, 
        "ranger-yarn-audit": {}, 
        "mapred-env": {}, 
        "hawq-limits-env": {}, 
        "ranger-hive-plugin-properties": {}, 
        "ranger-hdfs-plugin-properties": {}, 
        "pig-properties": {}, 
        "ranger-hbase-plugin-properties": {}, 
        "hawq-env": {}, 
        "core-site": {}, 
        "hive-site": {}, 
        "yarn-env": {}, 
        "hawq-site": {}, 
        "ranger-yarn-policymgr-ssl": {}, 
        "hawq-check-env": {}, 
        "hadoop-env": {}, 
        "hdfs-client": {}, 
        "zookeeper-log4j": {}, 
        "yarn-site": {}, 
        "ranger-yarn-security": {}, 
        "capacity-scheduler": {}, 
        "hbase-log4j": {}, 
        "ssl-server": {}, 
        "webhcat-site": {}, 
        "hbase-env": {}, 
        "ranger-hive-audit": {}, 
        "hawq-sysctl-env": {}, 
        "pxf-site": {}, 
        "zoo.cfg": {}, 
        "ranger-hdfs-security": {}, 
        "hiveserver2-site": {}, 
        "ranger-hbase-policymgr-ssl": {}, 
        "mapred-site": {}, 
        "cluster-env": {}, 
        "zookeeper-env": {}, 
        "pig-log4j": {}, 
        "ranger-hbase-security": {}
    }, 
    "commandParams": {
        "command_timeout": "300", 
        "script": "scripts/service_check.py", 
        "script_type": "PYTHON", 
        "service_package_folder": "common-services/HAWQ/2.0.0/package", 
        "hooks_folder": "PHD/2.0.6/hooks"
    }, 
    "stageId": 0, 
    "kerberosCommandParams": [], 
    "clusterName": "phd", 
    "hostname": "c6401.ambari.apache.org", 
    "hostLevelParams": {
        "not_managed_hdfs_path_list": "[\"/apps/hive/warehouse\",\"/apps/falcon\",\"/mr-history/done\",\"/app-logs\",\"/tmp\"]",
        "jdk_location": "http://c6401.ambari.apache.org:8080/resources/", 
        "ambari_db_rca_password": "mapred", 
        "java_home": "/usr/jdk64/jdk1.8.0_60", 
        "ambari_db_rca_url": "jdbc:postgresql://c6401.ambari.apache.org/ambarirca", 
        "jce_name": "jce_policy-8.zip", 
        "java_version": "8", 
        "oracle_jdbc_url": "http://c6401.ambari.apache.org:8080/resources//ojdbc6.jar", 
        "stack_name": "PHD", 
        "stack_version": "3.3", 
        "host_sys_prepped": "false", 
        "db_name": "ambari", 
        "jdk_name": "jdk-8u60-linux-x64.tar.gz", 
        "ambari_db_rca_driver": "org.postgresql.Driver", 
        "current_version": "3.3.2.0-2950", 
        "ambari_db_rca_username": "mapred", 
        "db_driver_filename": "mysql-connector-java.jar", 
        "agentCacheDir": "/var/lib/ambari-agent/cache", 
        "mysql_jdbc_url": "http://c6401.ambari.apache.org:8080/resources//mysql-connector-java.jar"
    }, 
    "commandType": "EXECUTION_COMMAND", 
    "roleParams": {}, 
    "serviceName": "HAWQ", 
    "role": "HAWQ_SERVICE_CHECK", 
    "requestId": 159, 
    "taskId": 3353, 
    "public_hostname": "c6401.ambari.apache.org", 
    "configurations": {
        "ranger-hdfs-audit": {
            "xasecure.audit.destination.db": "false", 
            "xasecure.audit.destination.solr.zookeepers": "NONE", 
            "xasecure.audit.destination.db.user": "{{xa_audit_db_user}}", 
            "xasecure.audit.destination.solr.urls": "", 
            "xasecure.audit.destination.db.jdbc.driver": "{{jdbc_driver}}", 
            "xasecure.audit.destination.solr.batch.filespool.dir": "/var/log/hadoop/hdfs/audit/solr/spool", 
            "xasecure.audit.destination.hdfs.batch.filespool.dir": "/var/log/hadoop/hdfs/audit/hdfs/spool", 
            "xasecure.audit.credential.provider.file": "jceks://file{{credential_file}}", 
            "xasecure.audit.destination.hdfs": "true", 
            "xasecure.audit.destination.solr": "false", 
            "xasecure.audit.provider.summary.enabled": "false", 
            "xasecure.audit.destination.db.batch.filespool.dir": "/var/log/hadoop/hdfs/audit/db/spool", 
            "xasecure.audit.destination.hdfs.dir": "hdfs://NAMENODE_HOSTNAME:8020/ranger/audit", 
            "xasecure.audit.destination.db.password": "crypted", 
            "xasecure.audit.destination.db.jdbc.url": "{{audit_jdbc_url}}", 
            "xasecure.audit.is.enabled": "true"
        }, 
        "webhcat-log4j": {
            "content": "\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n# Define some default values that can be overridden by system properties\nwebhcat.root.logger = INFO, standard\nwebhcat.log.dir = .\nwebhcat.log.file = webhcat.log\n\nlog4j.rootLogger = ${webhcat.root.logger}\n\n# Logging Threshold\nlog4j.threshhold = DEBUG\n\nlog4j.appender.standard  =  org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.standard.File = ${webhcat.log.dir}/${webhcat.log.file}\n\n# Rollver at midnight\nlog4j.appender.DRFA.DatePattern = .yyyy-MM-dd\n\nlog4j.appender.DRFA.layout = org.apache.log4j.PatternLayout\n\nlog4j.appender.standard.layout = org.apache.log4j.PatternLayout\nlog4j.appender.standard.layout.conversionPattern = %-5p | %d{DATE} | %c | %m%n\n\n# Class logging settings\nlog4j.logger.com.sun.jersey = DEBUG\nlog4j.logger.com.sun.jersey.spi.container.servlet.WebComponent = ERROR\nlog4j.logger.org.apache.hadoop = INFO\nlog4j.logger.org.apache.hadoop.conf = WARN\nlog4j.logger.org.apache.zookeeper = WARN\nlog4j.logger.org.eclipse.jetty = INFO"
        }, 
        "ranger-yarn-plugin-properties": {
            "hadoop.rpc.protection": "", 
            "ranger-yarn-plugin-enabled": "No", 
            "REPOSITORY_CONFIG_USERNAME": "yarn", 
            "policy_user": "ambari-qa", 
            "common.name.for.certificate": "", 
            "REPOSITORY_CONFIG_PASSWORD": "yarn"
        }, 
        "ranger-hdfs-policymgr-ssl": {
            "xasecure.policymgr.clientssl.keystore": "/usr/phd/current/hadoop-client/conf/ranger-plugin-keystore.jks", 
            "xasecure.policymgr.clientssl.truststore.password": "changeit", 
            "xasecure.policymgr.clientssl.keystore.credential.file": "jceks://file{{credential_file}}", 
            "xasecure.policymgr.clientssl.truststore": "/usr/phd/current/hadoop-client/conf/ranger-plugin-truststore.jks", 
            "xasecure.policymgr.clientssl.truststore.credential.file": "jceks://file{{credential_file}}", 
            "xasecure.policymgr.clientssl.keystore.password": "myKeyFilePassword"
        }, 
        "pig-env": {
            "content": "\nJAVA_HOME={{java64_home}}\nHADOOP_HOME=${HADOOP_HOME:-{{hadoop_home}}}\n\nif [ -d \"/usr/lib/tez\" ]; then\n  PIG_OPTS=\"$PIG_OPTS -Dmapreduce.framework.name=yarn\"\nfi"
        }, 
        "ranger-hbase-audit": {}, 
        "ssl-client": {
            "ssl.client.truststore.reload.interval": "10000", 
            "ssl.client.keystore.password": "bigdata", 
            "ssl.client.truststore.type": "jks", 
            "ssl.client.keystore.location": "/etc/security/clientKeys/keystore.jks", 
            "ssl.client.truststore.location": "/etc/security/clientKeys/all.jks", 
            "ssl.client.truststore.password": "bigdata", 
            "ssl.client.keystore.type": "jks"
        }, 
        "ranger-hive-policymgr-ssl": {}, 
        "yarn-client": {
            "rpc.client.socket.linger.timeout": "-1", 
            "rpc.client.write.timeout": "3600000", 
            "rpc.client.timeout": "3600000", 
            "yarn.client.failover.max.attempts": "15", 
            "rpc.client.connect.tcpnodelay": "true", 
            "rpc.client.connect.retry": "10", 
            "rpc.client.connect.timeout": "600000", 
            "rpc.client.ping.interval": "10000", 
            "rpc.client.read.timeout": "3600000", 
            "rpc.client.max.idle": "10000"
        }, 
        "ranger-hive-security": {}, 
        "hbase-policy": {
            "security.masterregion.protocol.acl": "*", 
            "security.admin.protocol.acl": "*", 
            "security.client.protocol.acl": "*"
        }, 
        "webhcat-env": {
            "content": "\n# The file containing the running pid\nPID_FILE={{webhcat_pid_file}}\n\nTEMPLETON_LOG_DIR={{templeton_log_dir}}/\n\n\nWEBHCAT_LOG_DIR={{templeton_log_dir}}/\n\n# The console error log\nERROR_LOG={{templeton_log_dir}}/webhcat-console-error.log\n\n# The console log\nCONSOLE_LOG={{templeton_log_dir}}/webhcat-console.log\n\n#TEMPLETON_JAR=templeton_jar_name\n\n#HADOOP_PREFIX=hadoop_prefix\n\n#HCAT_PREFIX=hive_prefix\n\n# Set HADOOP_HOME to point to a specific hadoop install directory\nexport HADOOP_HOME=${HADOOP_HOME:-{{hadoop_home}}}"
        }, 
        "hcat-env": {
            "content": "\n      # Licensed to the Apache Software Foundation (ASF) under one\n      # or more contributor license agreements. See the NOTICE file\n      # distributed with this work for additional information\n      # regarding copyright ownership. The ASF licenses this file\n      # to you under the Apache License, Version 2.0 (the\n      # \"License\"); you may not use this file except in compliance\n      # with the License. You may obtain a copy of the License at\n      #\n      # http://www.apache.org/licenses/LICENSE-2.0\n      #\n      # Unless required by applicable law or agreed to in writing, software\n      # distributed under the License is distributed on an \"AS IS\" BASIS,\n      # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n      # See the License for the specific language governing permissions and\n      # limitations under the License.\n\n      JAVA_HOME={{java64_home}}\n      HCAT_PID_DIR={{hcat_pid_dir}}/\n      HCAT_LOG_DIR={{hcat_log_dir}}/\n      HCAT_CONF_DIR={{hcat_conf_dir}}\n      HADOOP_HOME=${HADOOP_HOME:-{{hadoop_home}}}\n      #DBROOT is the path where the connector jars are downloaded\n      DBROOT={{hcat_dbroot}}\n      USER={{hcat_user}}\n      METASTORE_PORT={{hive_metastore_port}}"
        }, 
        "tez-site": {
            "tez.task.get-task.sleep.interval-ms.max": "200", 
            "tez.task.max-events-per-heartbeat": "500", 
            "tez.task.launch.cmd-opts": "-XX:+PrintGCDetails -verbose:gc -XX:+PrintGCTimeStamps -XX:+UseNUMA -XX:+UseParallelGC", 
            "tez.runtime.compress": "true", 
            "tez.runtime.io.sort.mb": "272", 
            "tez.runtime.convert.user-payload.to.history-text": "false", 
            "tez.generate.debug.artifacts": "false", 
            "tez.am.tez-ui.history-url.template": "__HISTORY_URL_BASE__?viewPath=%2F%23%2Ftez-app%2F__APPLICATION_ID__", 
            "tez.am.view-acls": "*", 
            "tez.am.log.level": "INFO", 
            "tez.counters.max.groups": "1000", 
            "tez.counters.max": "5000", 
            "tez.shuffle-vertex-manager.max-src-fraction": "0.4", 
            "tez.runtime.unordered.output.buffer.size-mb": "100", 
            "tez.task.resource.memory.mb": "1536", 
            "tez.history.logging.service.class": "org.apache.tez.dag.history.logging.ats.ATSV15HistoryLoggingService", 
            "tez.runtime.optimize.local.fetch": "true", 
            "tez.am.launch.cmd-opts": "-XX:+PrintGCDetails -verbose:gc -XX:+PrintGCTimeStamps -XX:+UseNUMA -XX:+UseParallelGC", 
            "tez.task.am.heartbeat.counter.interval-ms.max": "4000", 
            "tez.am.max.app.attempts": "2", 
            "tez.am.launch.env": "LD_LIBRARY_PATH=/usr/phd/${hdp.version}/hadoop/lib/native:/usr/phd/${hdp.version}/hadoop/lib/native/Linux-amd64-64", 
            "tez.am.container.idle.release-timeout-max.millis": "20000", 
            "tez.use.cluster.hadoop-libs": "false", 
            "tez.am.launch.cluster-default.cmd-opts": "-server -Djava.net.preferIPv4Stack=true -Dhdp.version=${hdp.version}", 
            "tez.am.container.idle.release-timeout-min.millis": "10000", 
            "tez.grouping.min-size": "16777216", 
            "tez.runtime.sorter.class": "PIPELINED", 
            "tez.runtime.compress.codec": "org.apache.hadoop.io.compress.SnappyCodec", 
            "tez.task.launch.cluster-default.cmd-opts": "-server -Djava.net.preferIPv4Stack=true -Dhdp.version=${hdp.version}", 
            "tez.task.launch.env": "LD_LIBRARY_PATH=/usr/phd/${hdp.version}/hadoop/lib/native:/usr/phd/${hdp.version}/hadoop/lib/native/Linux-amd64-64", 
            "tez.am.container.reuse.enabled": "true", 
            "tez.session.am.dag.submit.timeout.secs": "300", 
            "tez.grouping.split-waves": "1.7", 
            "tez.grouping.max-size": "1073741824", 
            "tez.session.client.timeout.secs": "-1", 
            "tez.cluster.additional.classpath.prefix": "/usr/phd/${hdp.version}/hadoop/lib/hadoop-lzo-0.6.0.${hdp.version}.jar:/etc/hadoop/conf/secure", 
            "tez.lib.uris": "/phd/apps/${hdp.version}/tez/tez.tar.gz", 
            "tez.staging-dir": "/tmp/${user.name}/staging", 
            "tez.am.am-rm.heartbeat.interval-ms.max": "250", 
            "tez.am.maxtaskfailures.per.node": "10", 
            "tez.task.generate.counters.per.io": "true", 
            "tez.am.container.reuse.non-local-fallback.enabled": "false", 
            "tez.am.container.reuse.rack-fallback.enabled": "true", 
            "tez.runtime.pipelined.sorter.sort.threads": "2", 
            "tez.am.container.reuse.locality.delay-allocation-millis": "250", 
            "tez.shuffle-vertex-manager.min-src-fraction": "0.2", 
            "tez.am.resource.memory.mb": "1536"
        }, 
        "hdfs-site": {
            "dfs.namenode.checkpoint.period": "21600", 
            "dfs.namenode.avoid.write.stale.datanode": "true", 
            "dfs.namenode.startup.delay.block.deletion.sec": "3600", 
            "dfs.datanode.handler.count": "60", 
            "dfs.namenode.checkpoint.txns": "1000000", 
            "dfs.content-summary.limit": "5000", 
            "dfs.support.append": "true", 
            "dfs.datanode.address": "0.0.0.0:50010", 
            "dfs.cluster.administrators": " hdfs", 
            "dfs.namenode.audit.log.async": "true", 
            "dfs.datanode.balance.bandwidthPerSec": "6250000", 
            "dfs.namenode.safemode.threshold-pct": "0.999", 
            "dfs.namenode.checkpoint.edits.dir": "${dfs.namenode.checkpoint.dir}", 
            "dfs.namenode.rpc-address": "c6401.ambari.apache.org:8020", 
            "dfs.permissions.enabled": "true", 
            "dfs.client.read.shortcircuit": "true", 
            "dfs.https.port": "50470", 
            "dfs.namenode.https-address": "c6401.ambari.apache.org:50470", 
            "nfs.file.dump.dir": "/tmp/.hdfs-nfs", 
            "dfs.blocksize": "134217728", 
            "dfs.blockreport.initialDelay": "120", 
            "dfs.journalnode.edits.dir": "/hadoop/hdfs/journalnode", 
            "dfs.namenode.fslock.fair": "false", 
            "dfs.datanode.max.transfer.threads": "1024", 
            "dfs.heartbeat.interval": "3", 
            "dfs.replication": "3", 
            "dfs.namenode.handler.count": "100", 
            "dfs.namenode.checkpoint.dir": "/hadoop/hdfs/namesecondary", 
            "fs.permissions.umask-mode": "022", 
            "dfs.namenode.stale.datanode.interval": "30000", 
            "dfs.datanode.ipc.address": "0.0.0.0:8010", 
            "dfs.datanode.failed.volumes.tolerated": "0", 
            "dfs.datanode.data.dir": "/hadoop/hdfs/data", 
            "dfs.namenode.http-address": "c6401.ambari.apache.org:50070", 
            "dfs.webhdfs.enabled": "true", 
            "dfs.allow.truncate": "true", 
            "dfs.encrypt.data.transfer.cipher.suites": "AES/CTR/NoPadding", 
            "dfs.namenode.accesstime.precision": "-1", 
            "dfs.block.local-path-access.user": "gpadmin", 
            "dfs.datanode.https.address": "0.0.0.0:50475", 
            "dfs.namenode.write.stale.datanode.ratio": "1.0f", 
            "dfs.namenode.secondary.http-address": "c6402.ambari.apache.org:50090", 
            "nfs.exports.allowed.hosts": "* rw", 
            "dfs.datanode.http.address": "0.0.0.0:50075", 
            "dfs.datanode.du.reserved": "1073741824", 
            "dfs.client.read.shortcircuit.streams.cache.size": "4096", 
            "dfs.http.policy": "HTTP_ONLY", 
            "dfs.block.access.token.enable": "true", 
            "dfs.client.retry.policy.enabled": "false", 
            "dfs.namenode.name.dir.restore": "true", 
            "dfs.permissions.superusergroup": "hdfs", 
            "dfs.journalnode.https-address": "0.0.0.0:8481", 
            "dfs.journalnode.http-address": "0.0.0.0:8480", 
            "dfs.domain.socket.path": "/var/lib/hadoop-hdfs/dn_socket", 
            "dfs.namenode.avoid.read.stale.datanode": "true", 
            "dfs.hosts.exclude": "/etc/hadoop/conf/dfs.exclude", 
            "dfs.datanode.data.dir.perm": "750", 
            "dfs.encryption.key.provider.uri": "", 
            "dfs.replication.max": "50", 
            "dfs.namenode.name.dir": "/hadoop/hdfs/namenode"
        }, 
        "yarn-log4j": {
            "content": "\n#Relative to Yarn Log Dir Prefix\nyarn.log.dir=.\n#\n# Job Summary Appender\n#\n# Use following logger to send summary to separate file defined by\n# hadoop.mapreduce.jobsummary.log.file rolled daily:\n# hadoop.mapreduce.jobsummary.logger=INFO,JSA\n#\nhadoop.mapreduce.jobsummary.logger=${hadoop.root.logger}\nhadoop.mapreduce.jobsummary.log.file=hadoop-mapreduce.jobsummary.log\nlog4j.appender.JSA=org.apache.log4j.DailyRollingFileAppender\n# Set the ResourceManager summary log filename\nyarn.server.resourcemanager.appsummary.log.file=hadoop-mapreduce.jobsummary.log\n# Set the ResourceManager summary log level and appender\nyarn.server.resourcemanager.appsummary.logger=${hadoop.root.logger}\n#yarn.server.resourcemanager.appsummary.logger=INFO,RMSUMMARY\n\n# To enable AppSummaryLogging for the RM,\n# set yarn.server.resourcemanager.appsummary.logger to\n# LEVEL,RMSUMMARY in hadoop-env.sh\n\n# Appender for ResourceManager Application Summary Log\n# Requires the following properties to be set\n#    - hadoop.log.dir (Hadoop Log directory)\n#    - yarn.server.resourcemanager.appsummary.log.file (resource manager app summary log filename)\n#    - yarn.server.resourcemanager.appsummary.logger (resource manager app summary log level and appender)\nlog4j.appender.RMSUMMARY=org.apache.log4j.RollingFileAppender\nlog4j.appender.RMSUMMARY.File=${yarn.log.dir}/${yarn.server.resourcemanager.appsummary.log.file}\nlog4j.appender.RMSUMMARY.MaxFileSize=256MB\nlog4j.appender.RMSUMMARY.MaxBackupIndex=20\nlog4j.appender.RMSUMMARY.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RMSUMMARY.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n\nlog4j.appender.JSA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.JSA.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{2}: %m%n\nlog4j.appender.JSA.DatePattern=.yyyy-MM-dd\nlog4j.appender.JSA.layout=org.apache.log4j.PatternLayout\nlog4j.logger.org.apache.hadoop.yarn.server.resourcemanager.RMAppManager$ApplicationSummary=${yarn.server.resourcemanager.appsummary.logger}\nlog4j.additivity.org.apache.hadoop.yarn.server.resourcemanager.RMAppManager$ApplicationSummary=false\n\n# Appender for viewing information for errors and warnings\nyarn.ewma.cleanupInterval=300\nyarn.ewma.messageAgeLimitSeconds=86400\nyarn.ewma.maxUniqueMessages=250\nlog4j.appender.EWMA=org.apache.hadoop.yarn.util.Log4jWarningErrorMetricsAppender\nlog4j.appender.EWMA.cleanupInterval=${yarn.ewma.cleanupInterval}\nlog4j.appender.EWMA.messageAgeLimitSeconds=${yarn.ewma.messageAgeLimitSeconds}\nlog4j.appender.EWMA.maxUniqueMessages=${yarn.ewma.maxUniqueMessages}\n    "
        }, 
        "hive-env": {
            "hive_user_nproc_limit": "16000", 
            "hive_pid_dir": "/var/run/hive", 
            "hcat_log_dir": "/var/log/webhcat", 
            "hive.client.heapsize": "1024", 
            "hive_ambari_database": "MySQL", 
            "content": "\n if [ \"$SERVICE\" = \"cli\" ]; then\n   if [ -z \"$DEBUG\" ]; then\n     export HADOOP_OPTS=\"$HADOOP_OPTS -XX:NewRatio=12 -XX:MaxHeapFreeRatio=40 -XX:MinHeapFreeRatio=15 -XX:+UseNUMA -XX:+UseParallelGC -XX:-UseGCOverheadLimit\"\n   else\n     export HADOOP_OPTS=\"$HADOOP_OPTS -XX:NewRatio=12 -XX:MaxHeapFreeRatio=40 -XX:MinHeapFreeRatio=15 -XX:-UseGCOverheadLimit\"\n   fi\n fi\n\n# The heap size of the jvm stared by hive shell script can be controlled via:\n\nif [ \"$SERVICE\" = \"metastore\" ]; then\n  export HADOOP_HEAPSIZE={{hive_metastore_heapsize}} # Setting for HiveMetastore\nelse\n  export HADOOP_HEAPSIZE={{hive_heapsize}} # Setting for HiveServer2 and Client\nfi\n\nexport HADOOP_CLIENT_OPTS=\"$HADOOP_CLIENT_OPTS  -Xmx${HADOOP_HEAPSIZE}m\"\n\n# Larger heap size may be required when running queries over large number of files or partitions.\n# By default hive shell scripts use a heap size of 256 (MB).  Larger heap size would also be\n# appropriate for hive server (hwi etc).\n\n\n# Set HADOOP_HOME to point to a specific hadoop install directory\nHADOOP_HOME=${HADOOP_HOME:-{{hadoop_home}}}\n\n# Hive Configuration Directory can be controlled by:\nexport HIVE_CONF_DIR={{hive_config_dir}}\n\n# Folder containing extra libraries required for hive compilation/execution can be controlled by:\nif [ \"${HIVE_AUX_JARS_PATH}\" != \"\" ]; then\n  if [ -f \"${HIVE_AUX_JARS_PATH}\" ]; then\n    export HIVE_AUX_JARS_PATH=${HIVE_AUX_JARS_PATH}\n  elif [ -d \"/usr/phd/current/hive-webhcat/share/hcatalog\" ]; then\n    export HIVE_AUX_JARS_PATH=/usr/phd/current/hive-webhcat/share/hcatalog/hive-hcatalog-core.jar\n  fi\nelif [ -d \"/usr/phd/current/hive-webhcat/share/hcatalog\" ]; then\n  export HIVE_AUX_JARS_PATH=/usr/phd/current/hive-webhcat/share/hcatalog/hive-hcatalog-core.jar\nfi\n\nexport METASTORE_PORT={{hive_metastore_port}}\n\n{% if sqla_db_used or lib_dir_available %}\nexport LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:{{jdbc_libs_dir}}\"\nexport JAVA_LIBRARY_PATH=\"$JAVA_LIBRARY_PATH:{{jdbc_libs_dir}}\"\n{% endif %}", 
            "hive_timeline_logging_enabled": "true", 
            "hive_user_nofile_limit": "32000", 
            "hive.metastore.heapsize": "512", 
            "hive_database_name": "hive", 
            "hive_database_type": "mysql", 
            "hive_user": "hive", 
            "hive_database": "New MySQL Database", 
            "hive.heapsize": "1082", 
            "hcat_pid_dir": "/var/run/webhcat", 
            "cost_based_optimizer": "On", 
            "webhcat_user": "hcat", 
            "hive_security_authorization": "None", 
            "hive_exec_orc_storage_strategy": "SPEED", 
            "hive_log_dir": "/var/log/hive", 
            "hive_txn_acid": "off", 
            "hcat_user": "hcat"
        }, 
        "tez-env": {
            "content": "\n# Tez specific configuration\nexport TEZ_CONF_DIR={{config_dir}}\n\n# Set HADOOP_HOME to point to a specific hadoop install directory\nexport HADOOP_HOME=${HADOOP_HOME:-{{hadoop_home}}}\n\n# The java implementation to use.\nexport JAVA_HOME={{java64_home}}\n    ", 
            "tez_user": "tez"
        }, 
        "hbase-site": {
            "hbase.regionserver.wal.codec": "org.apache.hadoop.hbase.regionserver.wal.WALCellCodec", 
            "hbase.master.info.bindAddress": "0.0.0.0", 
            "hbase.regionserver.port": "16020", 
            "hbase.client.keyvalue.maxsize": "1048576", 
            "hbase.hstore.compactionThreshold": "3", 
            "hbase.hregion.majorcompaction.jitter": "0.50", 
            "hbase.security.authentication": "simple", 
            "hbase.rootdir": "hdfs://c6401.ambari.apache.org:8020/apps/hbase/data", 
            "hbase.rpc.timeout": "90000", 
            "hbase.regionserver.handler.count": "30", 
            "hbase.hregion.majorcompaction": "604800000", 
            "hbase.rpc.protection": "authentication", 
            "hbase.hregion.memstore.block.multiplier": "4", 
            "hbase.hregion.memstore.flush.size": "134217728", 
            "hbase.superuser": "hbase", 
            "hbase.coprocessor.region.classes": "org.apache.hadoop.hbase.security.access.SecureBulkLoadEndpoint", 
            "hbase.zookeeper.property.clientPort": "2181", 
            "hbase.hstore.compaction.max": "10", 
            "hbase.bulkload.staging.dir": "/apps/hbase/staging", 
            "zookeeper.session.timeout": "90000", 
            "hbase.regionserver.global.memstore.size": "0.4", 
            "hbase.tmp.dir": "/tmp/hbase-${user.name}", 
            "hfile.block.cache.size": "0.4", 
            "hbase.hregion.max.filesize": "10737418240", 
            "hbase.client.scanner.caching": "100", 
            "hbase.client.retries.number": "35", 
            "hbase.defaults.for.version.skip": "true", 
            "hbase.master.info.port": "16010", 
            "hbase.zookeeper.quorum": "c6403.ambari.apache.org,c6402.ambari.apache.org,c6401.ambari.apache.org", 
            "hbase.regionserver.info.port": "16030", 
            "zookeeper.znode.parent": "/hbase-unsecure", 
            "hbase.coprocessor.master.classes": "", 
            "hbase.hstore.blockingStoreFiles": "10", 
            "hbase.master.port": "16000", 
            "hbase.security.authorization": "false", 
            "phoenix.query.timeoutMs": "60000", 
            "hbase.local.dir": "${hbase.tmp.dir}/local", 
            "hbase.cluster.distributed": "true", 
            "hbase.hregion.memstore.mslab.enabled": "true", 
            "dfs.domain.socket.path": "/var/lib/hadoop-hdfs/dn_socket", 
            "hbase.zookeeper.useMulti": "true"
        }, 
        "hadoop-policy": {
            "security.job.client.protocol.acl": "*", 
            "security.job.task.protocol.acl": "*", 
            "security.datanode.protocol.acl": "*", 
            "security.namenode.protocol.acl": "*", 
            "security.client.datanode.protocol.acl": "*", 
            "security.inter.tracker.protocol.acl": "*", 
            "security.refresh.usertogroups.mappings.protocol.acl": "hadoop", 
            "security.client.protocol.acl": "*", 
            "security.refresh.policy.protocol.acl": "hadoop", 
            "security.admin.operations.protocol.acl": "hadoop", 
            "security.inter.datanode.protocol.acl": "*"
        }, 
        "hdfs-log4j": {
            "content": "\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#  http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n\n\n# Define some default values that can be overridden by system properties\n# To change daemon root logger use hadoop_root_logger in hadoop-env\nhadoop.root.logger=INFO,console\nhadoop.log.dir=.\nhadoop.log.file=hadoop.log\n\n\n# Define the root logger to the system property \"hadoop.root.logger\".\nlog4j.rootLogger=${hadoop.root.logger}, EventCounter\n\n# Logging Threshold\nlog4j.threshhold=ALL\n\n#\n# Daily Rolling File Appender\n#\n\nlog4j.appender.DRFA=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.DRFA.File=${hadoop.log.dir}/${hadoop.log.file}\n\n# Rollver at midnight\nlog4j.appender.DRFA.DatePattern=.yyyy-MM-dd\n\n# 30-day backup\n#log4j.appender.DRFA.MaxBackupIndex=30\nlog4j.appender.DRFA.layout=org.apache.log4j.PatternLayout\n\n# Pattern format: Date LogLevel LoggerName LogMessage\nlog4j.appender.DRFA.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\n# Debugging Pattern format\n#log4j.appender.DRFA.layout.ConversionPattern=%d{ISO8601} %-5p %c{2} (%F:%M(%L)) - %m%n\n\n\n#\n# console\n# Add \"console\" to rootlogger above if you want to use this\n#\n\nlog4j.appender.console=org.apache.log4j.ConsoleAppender\nlog4j.appender.console.target=System.err\nlog4j.appender.console.layout=org.apache.log4j.PatternLayout\nlog4j.appender.console.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{2}: %m%n\n\n#\n# TaskLog Appender\n#\n\n#Default values\nhadoop.tasklog.taskid=null\nhadoop.tasklog.iscleanup=false\nhadoop.tasklog.noKeepSplits=4\nhadoop.tasklog.totalLogFileSize=100\nhadoop.tasklog.purgeLogSplits=true\nhadoop.tasklog.logsRetainHours=12\n\nlog4j.appender.TLA=org.apache.hadoop.mapred.TaskLogAppender\nlog4j.appender.TLA.taskId=${hadoop.tasklog.taskid}\nlog4j.appender.TLA.isCleanup=${hadoop.tasklog.iscleanup}\nlog4j.appender.TLA.totalLogFileSize=${hadoop.tasklog.totalLogFileSize}\n\nlog4j.appender.TLA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.TLA.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\n\n#\n#Security audit appender\n#\nhadoop.security.logger=INFO,console\nhadoop.security.log.maxfilesize=256MB\nhadoop.security.log.maxbackupindex=20\nlog4j.category.SecurityLogger=${hadoop.security.logger}\nhadoop.security.log.file=SecurityAuth.audit\nlog4j.appender.DRFAS=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.DRFAS.File=${hadoop.log.dir}/${hadoop.security.log.file}\nlog4j.appender.DRFAS.layout=org.apache.log4j.PatternLayout\nlog4j.appender.DRFAS.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\nlog4j.appender.DRFAS.DatePattern=.yyyy-MM-dd\n\nlog4j.appender.RFAS=org.apache.log4j.RollingFileAppender\nlog4j.appender.RFAS.File=${hadoop.log.dir}/${hadoop.security.log.file}\nlog4j.appender.RFAS.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RFAS.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\nlog4j.appender.RFAS.MaxFileSize=${hadoop.security.log.maxfilesize}\nlog4j.appender.RFAS.MaxBackupIndex=${hadoop.security.log.maxbackupindex}\n\n#\n# hdfs audit logging\n#\nhdfs.audit.logger=INFO,console\nlog4j.logger.org.apache.hadoop.hdfs.server.namenode.FSNamesystem.audit=${hdfs.audit.logger}\nlog4j.additivity.org.apache.hadoop.hdfs.server.namenode.FSNamesystem.audit=false\nlog4j.appender.DRFAAUDIT=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.DRFAAUDIT.File=${hadoop.log.dir}/hdfs-audit.log\nlog4j.appender.DRFAAUDIT.layout=org.apache.log4j.PatternLayout\nlog4j.appender.DRFAAUDIT.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n\nlog4j.appender.DRFAAUDIT.DatePattern=.yyyy-MM-dd\n\n#\n# NameNode metrics logging.\n# The default is to retain two namenode-metrics.log files up to 64MB each.\n#\nnamenode.metrics.logger=INFO,NullAppender\nlog4j.logger.NameNodeMetricsLog=${namenode.metrics.logger}\nlog4j.additivity.NameNodeMetricsLog=false\nlog4j.appender.NNMETRICSRFA=org.apache.log4j.RollingFileAppender\nlog4j.appender.NNMETRICSRFA.File=${hadoop.log.dir}/namenode-metrics.log\nlog4j.appender.NNMETRICSRFA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.NNMETRICSRFA.layout.ConversionPattern=%d{ISO8601} %m%n\nlog4j.appender.NNMETRICSRFA.MaxBackupIndex=1\nlog4j.appender.NNMETRICSRFA.MaxFileSize=64MB\n\n#\n# mapred audit logging\n#\nmapred.audit.logger=INFO,console\nlog4j.logger.org.apache.hadoop.mapred.AuditLogger=${mapred.audit.logger}\nlog4j.additivity.org.apache.hadoop.mapred.AuditLogger=false\nlog4j.appender.MRAUDIT=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.MRAUDIT.File=${hadoop.log.dir}/mapred-audit.log\nlog4j.appender.MRAUDIT.layout=org.apache.log4j.PatternLayout\nlog4j.appender.MRAUDIT.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n\nlog4j.appender.MRAUDIT.DatePattern=.yyyy-MM-dd\n\n#\n# Rolling File Appender\n#\n\nlog4j.appender.RFA=org.apache.log4j.RollingFileAppender\nlog4j.appender.RFA.File=${hadoop.log.dir}/${hadoop.log.file}\n\n# Logfile size and and 30-day backups\nlog4j.appender.RFA.MaxFileSize=256MB\nlog4j.appender.RFA.MaxBackupIndex=10\n\nlog4j.appender.RFA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RFA.layout.ConversionPattern=%d{ISO8601} %-5p %c{2} - %m%n\nlog4j.appender.RFA.layout.ConversionPattern=%d{ISO8601} %-5p %c{2} (%F:%M(%L)) - %m%n\n\n\n# Custom Logging levels\n\nhadoop.metrics.log.level=INFO\n#log4j.logger.org.apache.hadoop.mapred.JobTracker=DEBUG\n#log4j.logger.org.apache.hadoop.mapred.TaskTracker=DEBUG\n#log4j.logger.org.apache.hadoop.fs.FSNamesystem=DEBUG\nlog4j.logger.org.apache.hadoop.metrics2=${hadoop.metrics.log.level}\n\n# Jets3t library\nlog4j.logger.org.jets3t.service.impl.rest.httpclient.RestS3Service=ERROR\n\n#\n# Null Appender\n# Trap security logger on the hadoop client side\n#\nlog4j.appender.NullAppender=org.apache.log4j.varia.NullAppender\n\n#\n# Event Counter Appender\n# Sends counts of logging messages at different severity levels to Hadoop Metrics.\n#\nlog4j.appender.EventCounter=org.apache.hadoop.log.metrics.EventCounter\n\n# Removes \"deprecated\" messages\nlog4j.logger.org.apache.hadoop.conf.Configuration.deprecation=WARN\n\n#\n# HDFS block state change log from block manager\n#\n# Uncomment the following to suppress normal block state change\n# messages from BlockManager in NameNode.\n#log4j.logger.BlockStateChange=WARN\n    "
        }, 
        "hive-log4j": {
            "content": "\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Define some default values that can be overridden by system properties\nhive.log.threshold=ALL\nhive.root.logger=INFO,DRFA\nhive.log.dir=${java.io.tmpdir}/${user.name}\nhive.log.file=hive.log\n\n# Define the root logger to the system property \"hadoop.root.logger\".\nlog4j.rootLogger=${hive.root.logger}, EventCounter\n\n# Logging Threshold\nlog4j.threshold=${hive.log.threshold}\n\n#\n# Daily Rolling File Appender\n#\n# Use the PidDailyerRollingFileAppend class instead if you want to use separate log files\n# for different CLI session.\n#\n# log4j.appender.DRFA=org.apache.hadoop.hive.ql.log.PidDailyRollingFileAppender\n\nlog4j.appender.DRFA=org.apache.log4j.DailyRollingFileAppender\n\nlog4j.appender.DRFA.File=${hive.log.dir}/${hive.log.file}\n\n# Rollver at midnight\nlog4j.appender.DRFA.DatePattern=.yyyy-MM-dd\n\n# 30-day backup\n#log4j.appender.DRFA.MaxBackupIndex=30\nlog4j.appender.DRFA.layout=org.apache.log4j.PatternLayout\n\n# Pattern format: Date LogLevel LoggerName LogMessage\n#log4j.appender.DRFA.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\n# Debugging Pattern format\nlog4j.appender.DRFA.layout.ConversionPattern=%d{ISO8601} %-5p [%t]: %c{2} (%F:%M(%L)) - %m%n\n\n\n#\n# console\n# Add \"console\" to rootlogger above if you want to use this\n#\n\nlog4j.appender.console=org.apache.log4j.ConsoleAppender\nlog4j.appender.console.target=System.err\nlog4j.appender.console.layout=org.apache.log4j.PatternLayout\nlog4j.appender.console.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} [%t]: %p %c{2}: %m%n\nlog4j.appender.console.encoding=UTF-8\n\n#custom logging levels\n#log4j.logger.xxx=DEBUG\n\n#\n# Event Counter Appender\n# Sends counts of logging messages at different severity levels to Hadoop Metrics.\n#\nlog4j.appender.EventCounter=org.apache.hadoop.hive.shims.HiveEventCounter\n\n\nlog4j.category.DataNucleus=ERROR,DRFA\nlog4j.category.Datastore=ERROR,DRFA\nlog4j.category.Datastore.Schema=ERROR,DRFA\nlog4j.category.JPOX.Datastore=ERROR,DRFA\nlog4j.category.JPOX.Plugin=ERROR,DRFA\nlog4j.category.JPOX.MetaData=ERROR,DRFA\nlog4j.category.JPOX.Query=ERROR,DRFA\nlog4j.category.JPOX.General=ERROR,DRFA\nlog4j.category.JPOX.Enhancer=ERROR,DRFA\n\n\n# Silence useless ZK logs\nlog4j.logger.org.apache.zookeeper.server.NIOServerCnxn=WARN,DRFA\nlog4j.logger.org.apache.zookeeper.ClientCnxnSocketNIO=WARN,DRFA"
        }, 
        "hive-exec-log4j": {
            "content": "\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Define some default values that can be overridden by system properties\n\nhive.log.threshold=ALL\nhive.root.logger=INFO,FA\nhive.log.dir=${java.io.tmpdir}/${user.name}\nhive.query.id=hadoop\nhive.log.file=${hive.query.id}.log\n\n# Define the root logger to the system property \"hadoop.root.logger\".\nlog4j.rootLogger=${hive.root.logger}, EventCounter\n\n# Logging Threshold\nlog4j.threshhold=${hive.log.threshold}\n\n#\n# File Appender\n#\n\nlog4j.appender.FA=org.apache.log4j.FileAppender\nlog4j.appender.FA.File=${hive.log.dir}/${hive.log.file}\nlog4j.appender.FA.layout=org.apache.log4j.PatternLayout\n\n# Pattern format: Date LogLevel LoggerName LogMessage\n#log4j.appender.DRFA.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\n# Debugging Pattern format\nlog4j.appender.FA.layout.ConversionPattern=%d{ISO8601} %-5p %c{2} (%F:%M(%L)) - %m%n\n\n\n#\n# console\n# Add \"console\" to rootlogger above if you want to use this\n#\n\nlog4j.appender.console=org.apache.log4j.ConsoleAppender\nlog4j.appender.console.target=System.err\nlog4j.appender.console.layout=org.apache.log4j.PatternLayout\nlog4j.appender.console.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{2}: %m%n\n\n#custom logging levels\n#log4j.logger.xxx=DEBUG\n\n#\n# Event Counter Appender\n# Sends counts of logging messages at different severity levels to Hadoop Metrics.\n#\nlog4j.appender.EventCounter=org.apache.hadoop.hive.shims.HiveEventCounter\n\n\nlog4j.category.DataNucleus=ERROR,FA\nlog4j.category.Datastore=ERROR,FA\nlog4j.category.Datastore.Schema=ERROR,FA\nlog4j.category.JPOX.Datastore=ERROR,FA\nlog4j.category.JPOX.Plugin=ERROR,FA\nlog4j.category.JPOX.MetaData=ERROR,FA\nlog4j.category.JPOX.Query=ERROR,FA\nlog4j.category.JPOX.General=ERROR,FA\nlog4j.category.JPOX.Enhancer=ERROR,FA\n\n\n# Silence useless ZK logs\nlog4j.logger.org.apache.zookeeper.server.NIOServerCnxn=WARN,FA\nlog4j.logger.org.apache.zookeeper.ClientCnxnSocketNIO=WARN,FA"
        }, 
        "ranger-yarn-audit": {
            "xasecure.audit.destination.db": "false", 
            "xasecure.audit.destination.solr.zookeepers": "NONE", 
            "xasecure.audit.destination.db.user": "{{xa_audit_db_user}}", 
            "xasecure.audit.destination.solr.urls": "", 
            "xasecure.audit.destination.db.jdbc.driver": "{{jdbc_driver}}", 
            "xasecure.audit.destination.solr.batch.filespool.dir": "/var/log/hadoop/yarn/audit/solr/spool", 
            "xasecure.audit.destination.hdfs.batch.filespool.dir": "/var/log/hadoop/yarn/audit/hdfs/spool", 
            "xasecure.audit.credential.provider.file": "jceks://file{{credential_file}}", 
            "xasecure.audit.destination.hdfs": "true", 
            "xasecure.audit.destination.solr": "false", 
            "xasecure.audit.provider.summary.enabled": "false", 
            "xasecure.audit.destination.db.batch.filespool.dir": "/var/log/hadoop/yarn/audit/db/spool", 
            "xasecure.audit.destination.hdfs.dir": "hdfs://NAMENODE_HOSTNAME:8020/ranger/audit", 
            "xasecure.audit.destination.db.password": "crypted", 
            "xasecure.audit.destination.db.jdbc.url": "{{audit_jdbc_url}}", 
            "xasecure.audit.is.enabled": "true"
        }, 
        "mapred-env": {
            "jobhistory_heapsize": "900", 
            "mapred_log_dir_prefix": "/var/log/hadoop-mapreduce", 
            "mapred_pid_dir_prefix": "/var/run/hadoop-mapreduce", 
            "content": "\n# export JAVA_HOME=/home/y/libexec/jdk1.6.0/\n\nexport HADOOP_JOB_HISTORYSERVER_HEAPSIZE={{jobhistory_heapsize}}\n\nexport HADOOP_MAPRED_ROOT_LOGGER=INFO,RFA\n\n#export HADOOP_JOB_HISTORYSERVER_OPTS=\n#export HADOOP_MAPRED_LOG_DIR=\"\" # Where log files are stored.  $HADOOP_MAPRED_HOME/logs by default.\n#export HADOOP_JHS_LOGGER=INFO,RFA # Hadoop JobSummary logger.\n#export HADOOP_MAPRED_PID_DIR= # The pid files are stored. /tmp by default.\n#export HADOOP_MAPRED_IDENT_STRING= #A string representing this instance of hadoop. $USER by default\n#export HADOOP_MAPRED_NICENESS= #The scheduling priority for daemons. Defaults to 0.\nexport HADOOP_OPTS=\"-Dhdp.version=$HDP_VERSION $HADOOP_OPTS\"\nexport HADOOP_OPTS=\"-Djava.io.tmpdir={{hadoop_java_io_tmpdir}} $HADOOP_OPTS\"\nexport JAVA_LIBRARY_PATH=\"${JAVA_LIBRARY_PATH}:{{hadoop_java_io_tmpdir}}\"\n    ", 
            "mapred_user_nofile_limit": "32768", 
            "mapred_user_nproc_limit": "65536", 
            "mapred_user": "mapred"
        }, 
        "hawq-limits-env": {
            "hard_nofile": "2900000", 
            "hard_nproc": "131072", 
            "soft_nproc": "131072", 
            "soft_nofile": "2900000"
        }, 
        "ranger-hive-plugin-properties": {}, 
        "ranger-hdfs-plugin-properties": {
            "hadoop.rpc.protection": "", 
            "ranger-hdfs-plugin-enabled": "No", 
            "REPOSITORY_CONFIG_USERNAME": "hadoop", 
            "policy_user": "ambari-qa", 
            "common.name.for.certificate": "", 
            "REPOSITORY_CONFIG_PASSWORD": "hadoop"
        }, 
        "pig-properties": {
            "content": "\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#  http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n# Pig configuration file. All values can be overwritten by command line\n# arguments; for a description of the properties, run\n#\n#     pig -h properties\n#\n\n############################################################################\n#\n# == Logging properties\n#\n\n# Location of pig log file. If blank, a file with a timestamped slug\n# ('pig_1399336559369.log') will be generated in the current working directory.\n#\n# pig.logfile=\n# pig.logfile=/tmp/pig-err.log\n\n# Log4j configuration file. Set at runtime with the -4 parameter. The source\n# distribution has a ./conf/log4j.properties.template file you can rename and\n# customize.\n#\n# log4jconf=./conf/log4j.properties\n\n# Verbose Output.\n# * false (default): print only INFO and above to screen\n# * true: Print all log messages to screen\n#\n# verbose=false\n\n# Omit timestamps on log messages. (default: false)\n#\n# brief=false\n\n# Logging level. debug=OFF|ERROR|WARN|INFO|DEBUG (default: INFO)\n#\n# debug=INFO\n\n# Roll up warnings across tasks, so that when millions of mappers suddenly cry\n# out in error they are partially silenced. (default, recommended: true)\n#\n# aggregate.warning=true\n\n# Should DESCRIBE pretty-print its schema?\n# * false (default): print on a single-line, suitable for pasting back in to your script\n# * true (recommended): prints on multiple lines with indentation, much more readable\n#\n# pig.pretty.print.schema=false\n\n# === Profiling UDFs  ===\n\n# Turn on UDF timers? This will cause two counters to be\n# tracked for every UDF and LoadFunc in your script: approx_microsecs measures\n# approximate time spent inside a UDF approx_invocations reports the approximate\n# number of times the UDF was invoked.\n#\n# * false (default): do not record timing information of UDFs.\n# * true: report UDF performance. Uses more counters, but gives more insight\n#   into script operation\n#\n# pig.udf.profile=false\n\n# Specify frequency of profiling (default: every 100th).\n# pig.udf.profile.frequency=100\n\n############################################################################\n#\n# == Site-specific Properties\n#\n\n# Execution Mode. Local mode is much faster, but only suitable for small amounts\n# of data. Local mode interprets paths on the local file system; Mapreduce mode\n# on the HDFS. Read more under 'Execution Modes' within the Getting Started\n# documentation.\n#\n# * mapreduce (default): use the Hadoop cluster defined in your Hadoop config files\n# * local: use local mode\n# * tez: use Tez on Hadoop cluster\n# * tez_local: use Tez local mode\n#\n# exectype=mapreduce\n\n# Bootstrap file with default statements to execute in every Pig job, similar to\n# .bashrc.  If blank, uses the file '.pigbootup' from your home directory; If a\n# value is supplied, that file is NOT loaded.  This does not do tilde expansion\n# -- you must supply the full path to the file.\n#\n# pig.load.default.statements=\n# pig.load.default.statements=/home/bob/.pigrc\n\n# Kill all waiting/running MR jobs upon a MR job failure? (default: false) If\n# false, jobs that can proceed independently will do so unless a parent stage\n# fails. If true, the failure of any stage in the script kills all jobs.\n#\n# stop.on.failure=false\n\n# File containing the pig script to run. Rarely set in the properties file.\n# Commandline: -f\n#\n# file=\n\n# Jarfile to load, colon separated. Rarely used.\n#\n# jar=\n\n# Register additional .jar files to use with your Pig script.\n# Most typically used as a command line option (see http://pig.apache.org/docs/r0.12.0/basic.html#register):\n#\n#     pig -Dpig.additional.jars=hdfs://nn.mydomain.com:9020/myjars/my.jar\n#\n# pig.additional.jars=<colon separated list of jars with optional wildcards>\n# pig.additional.jars=/usr/local/share/pig/pig/contrib/piggybank/java/piggybank.jar:/usr/local/share/pig/datafu/datafu-pig/build/libs/datafu-pig-1.2.1.jar\n\n# Specify potential packages to which a UDF or a group of UDFs belong,\n# eliminating the need to qualify the UDF on every call. See\n# http://pig.apache.org/docs/r0.12.0/udf.html#use-short-names\n#\n# Commandline use:\n#\n#     pig \\\n#       -Dpig.additional.jars=$PIG_HOME/contrib/piggybank/java/piggybank.jar:$PIG_HOME/../datafu/datafu-pig/build/libs/datafu-pig-1.2.1.jar \\\n#       -Dudf.import.list=org.apache.pig.piggybank.evaluation:datafu.pig.util \\\n#       happy_job.pig\n#\n# udf.import.list=<colon separated list of imports>\n# udf.import.list=org.apache.pig.piggybank.evaluation:datafu.pig.bags:datafu.pig.hash:datafu.pig.stats:datafu.pig.util\n\n#\n# Reuse jars across jobs run by the same user? (default: false) If enabled, jars\n# are placed in ${pig.user.cache.location}/${user.name}/.pigcache. Since most\n# jars change infrequently, this gives a minor speedup.\n#\n# pig.user.cache.enabled=false\n\n# Base path for storing jars cached by the pig.user.cache.enabled feature. (default: /tmp)\n#\n# pig.user.cache.location=/tmp\n\n# Replication factor for cached jars. If not specified mapred.submit.replication\n# is used, whose default is 10.\n#\n# pig.user.cache.replication=10\n\n# Default UTC offset. (default: the host's current UTC offset) Supply a UTC\n# offset in Java's timezone format: e.g., +08:00.\n#\n# pig.datetime.default.tz=\n\n############################################################################\n#\n# Memory impacting properties\n#\n\n# Amount of memory (as fraction of heap) allocated to bags before a spill is\n# forced. Default is 0.2, meaning 20% of available memory. Note that this memory\n# is shared across all large bags used by the application. See\n# http://pig.apache.org/docs/r0.12.0/perf.html#memory-management\n#\n# pig.cachedbag.memusage=0.2\n\n# Don't spill bags smaller than this size (bytes). Default: 5000000, or about\n# 5MB. Usually, the more spilling the longer runtime, so you might want to tune\n# it according to heap size of each task and so forth.\n#\n# pig.spill.size.threshold=5000000\n\n# EXPERIMENTAL: If a file bigger than this size (bytes) is spilled -- thus\n# freeing a bunch of ram -- tell the JVM to perform garbage collection.  This\n# should help reduce the number of files being spilled, but causes more-frequent\n# garbage collection. Default: 40000000 (about 40 MB)\n#\n# pig.spill.gc.activation.size=40000000\n\n# Maximum amount of data to replicate using the distributed cache when doing\n# fragment-replicated join. (default: 1000000000, about 1GB) Consider increasing\n# this in a production environment, but carefully.\n#\n# pig.join.replicated.max.bytes=1000000000\n\n# Fraction of heap available for the reducer to perform a skewed join. A low\n# fraction forces Pig to use more reducers, but increases the copying cost. See\n# http://pig.apache.org/docs/r0.12.0/perf.html#skewed-joins\n#\n# pig.skewedjoin.reduce.memusage=0.3\n\n#\n# === SchemaTuple ===\n#\n# The SchemaTuple feature (PIG-2632) uses a tuple's schema (when known) to\n# generate a custom Java class to hold records. Otherwise, tuples are loaded as\n# a plain list that is unaware of its contents' schema -- and so each element\n# has to be wrapped as a Java object on its own. This can provide more efficient\n# CPU utilization, serialization, and most of all memory usage.\n#\n# This feature is considered experimental and is off by default. You can\n# selectively enable it for specific operations using pig.schematuple.udf,\n# pig.schematuple.load, pig.schematuple.fr_join and pig.schematuple.merge_join\n#\n\n# Enable the SchemaTuple optimization in all available cases? (default: false; recommended: true)\n#\n# pig.schematuple=false\n\n# EXPERIMENTAL: Use SchemaTuples with UDFs (default: value of pig.schematuple).\n# pig.schematuple.udf=false\n\n# EXPERIMENTAL, CURRENTLY NOT IMPLEMENTED, but in the future, LoadFunc's with\n# known schemas should output SchemaTuples. (default: value of pig.schematuple)\n# pig.schematuple.load=false\n\n# EXPERIMENTAL: Use SchemaTuples in replicated joins. The potential memory\n# saving here is significant. (default: value of pig.schematuple)\n# pig.schematuple.fr_join=false\n\n# EXPERIMENTAL: Use SchemaTuples in merge joins. (default: value of pig.schematuple).\n# pig.schematuple.merge_join=false\n\n############################################################################\n#\n# Serialization options\n#\n\n# Omit empty part files from the output? (default: false)\n#\n# * false (default): reducers generates an output file, even if output is empty\n# * true (recommended): do not generate zero-byte part files\n#\n# The default behavior of MapReduce is to generate an empty file for no data, so\n# Pig follows that. But many small files can cause annoying extra map tasks and\n# put load on the HDFS, so consider setting this to 'true'\n#\n# pig.output.lazy=false\n\n#\n# === Tempfile Handling\n#\n\n# EXPERIMENTAL: Storage format for temporary files generated by intermediate\n# stages of Pig jobs. This can provide significant speed increases for certain\n# codecs, as reducing the amount of data transferred to and from disk can more\n# than make up for the cost of compression/compression. Recommend that you set\n# up LZO compression in Hadoop and specify tfile storage.\n#\n# Compress temporary files?\n# * false (default): do not compress\n# * true (recommended): compress temporary files.\n#\n# pig.tmpfilecompression=false\n# pig.tmpfilecompression=true\n\n# Tempfile storage container type.\n#\n# * tfile (default, recommended): more efficient, but only supports supports gz(gzip) and lzo compression.\n#   https://issues.apache.org/jira/secure/attachment/12396286/TFile%20Specification%2020081217.pdf\n# * seqfile: only supports gz(gzip), lzo, snappy, and bzip2 compression\n#\n# pig.tmpfilecompression.storage=tfile\n\n# Codec types for intermediate job files. tfile supports gz(gzip) and lzo;\n# seqfile support gz(gzip), lzo, snappy, bzip2\n#\n# * lzo (recommended with caveats): moderate compression, low cpu burden;\n#   typically leads to a noticeable speedup. Best default choice, but you must\n#   set up LZO independently due to license incompatibility\n# * snappy: moderate compression, low cpu burden; typically leads to a noticeable speedup..\n# * gz (default): higher compression, high CPU burden. Typically leads to a noticeable slowdown.\n# * bzip2: most compression, major CPU burden. Typically leads to a noticeable slowdown.\n#\n# pig.tmpfilecompression.codec=gzip\n\n#\n# === Split Combining\n#\n\n#\n# Should pig try to combine small files for fewer map tasks? This improves the\n# efficiency of jobs with many small input files, reduces the overhead on the\n# jobtracker, and reduces the number of output files a map-only job\n# produces. However, it only works with certain loaders and increases non-local\n# map tasks. See http://pig.apache.org/docs/r0.12.0/perf.html#combine-files\n#\n# * false (default, recommended): _do_ combine files\n# * true: do not combine files\n#\n# pig.noSplitCombination=false\n\n#\n# Size, in bytes, of data to be processed by a single map. Smaller files are\n# combined untill this size is reached. If unset, defaults to the file system's\n# default block size.\n#\n# pig.maxCombinedSplitSize=\n\n# ###########################################################################\n#\n# Execution options\n#\n\n# Should pig omit combiners? (default, recommended: false -- meaning pig _will_\n# use combiners)\n#\n# When combiners work well, they eliminate a significant amount of\n# data. However, if they do not eliminate much data -- say, a DISTINCT operation\n# that only eliminates 5% of the records -- they add a noticeable overhead to\n# the job. So the recommended default is false (use combiners), selectively\n# disabling them per-job:\n#\n#     pig -Dpig.exec.nocombiner=true distinct_but_not_too_much.pig\n#\n# pig.exec.nocombiner=false\n\n# EXPERIMENTAL: Aggregate records in map task before sending to the combiner?\n# (default: false, 10; recommended: true, 10). In cases where there is a massive\n# reduction of data in the aggregation step, pig can do a first pass of\n# aggregation before the data even leaves the mapper, saving much serialization\n# overhead. It's off by default but can give a major improvement to\n# group-and-aggregate operations. Pig skips partial aggregation unless reduction\n# is better than a factor of minReduction (default: 10). See\n# http://pig.apache.org/docs/r0.12.0/perf.html#hash-based-aggregation\n#\n# pig.exec.mapPartAgg=false\n# pig.exec.mapPartAgg.minReduction=10\n\n#\n# === Control how many reducers are used.\n#\n\n# Estimate number of reducers naively using a fixed amount of data per\n# reducer. Optimally, you have both fewer reducers than available reduce slots,\n# and reducers that are neither getting too little data (less than a half-GB or\n# so) nor too much data (more than 2-3 times the reducer child process max heap\n# size). The default of 1000000000 (about 1GB) is probably low for a production\n# cluster -- however it's much worse to set this too high (reducers spill many\n# times over in group-sort) than too low (delay waiting for reduce slots).\n#\n# pig.exec.reducers.bytes.per.reducer=1000000000\n\n#\n# Don't ever use more than this many reducers. (default: 999)\n#\n# pig.exec.reducers.max=999\n\n#\n# === Local mode for small jobs\n#\n\n# EXPERIMENTAL: Use local mode for small jobs? If true, jobs with input data\n# size smaller than pig.auto.local.input.maxbytes bytes and one or no reducers\n# are run in local mode, which is much faster. Note that file paths are still\n# interpreted as pig.exectype implies.\n#\n# * true (recommended): allow local mode for small jobs, which is much faster.\n# * false (default): always use pig.exectype.\n#\n# pig.auto.local.enabled=false\n\n#\n# Definition of a small job for the pig.auto.local.enabled feature. Only jobs\n# with less than this may bytes are candidates to run locally (default:\n# 100000000 bytes, about 1GB)\n#\n# pig.auto.local.input.maxbytes=100000000\n\n############################################################################\n#\n# Security Features\n#\n\n# Comma-delimited list of commands/operators that are disallowed. This security\n# feature can be used by administrators to block use of certain commands by\n# users.\n#\n# * <blank> (default): all commands and operators are allowed.\n# * fs,set (for example): block all filesystem commands and config changes from pig scripts.\n#\n# pig.blacklist=\n# pig.blacklist=fs,set\n\n# Comma-delimited list of the only commands/operators that are allowed. This\n# security feature can be used by administrators to block use of certain\n# commands by users.\n#\n# * <blank> (default): all commands and operators not on the pig.blacklist are allowed.\n# * load,store,filter,group: only LOAD, STORE, FILTER, GROUP\n#   from pig scripts. All other commands and operators will fail.\n#\n# pig.whitelist=\n# pig.whitelist=load,store,filter,group\n\n#####################################################################\n#\n# Advanced Site-specific Customizations\n#\n\n# Remove intermediate output files?\n#\n# * true (default, recommended): remove the files\n# * false: do NOT remove the files. You must clean them up yourself.\n#\n# Keeping them is useful for advanced debugging, but can be dangerous -- you\n# must clean them up yourself.  Inspect the intermediate outputs with\n#\n#     LOAD '/path/to/tmp/file' USING org.apache.pig.impl.io.TFileStorage();\n#\n# (Or ...SequenceFileInterStorage if pig.tmpfilecompression.storage is seqfile)\n#\n# pig.delete.temp.files=true\n\n# EXPERIMENTAL: A Pig Progress Notification Listener (PPNL) lets you wire pig's\n# progress into your visibility stack. To use a PPNL, supply the fully qualified\n# class name of a PPNL implementation. Note that only one PPNL can be set up, so\n# if you need several, write a PPNL that will chain them.\n#\n# See https://github.com/twitter/ambrose for a pretty awesome one of these\n#\n# pig.notification.listener=<fully qualified class name of a PPNL implementation>\n\n# String argument to pass to your PPNL constructor (optional). Only a single\n# string value is allowed. (default none)\n#\n# pig.notification.listener.arg=<somevalue>\n\n# EXPERIMENTAL: Class invoked to estimate the number of reducers to use.\n# (default: org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.InputSizeReducerEstimator)\n#\n# If you don't know how or why to write a PigReducerEstimator, you're unlikely\n# to use this. By default, the naive mapReduceLayer.InputSizeReducerEstimator is\n# used, but you can specify anything implementing the interface\n# org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigReducerEstimator\n#\n# pig.exec.reducer.estimator=<fully qualified class name of a PigReducerEstimator implementation>\n\n# Optional String argument to pass to your PigReducerEstimator. (default: none;\n# a single String argument is allowed).\n#\n# pig.exec.reducer.estimator.arg=<somevalue>\n\n# Class invoked to report the size of reducers output. By default, the reducers'\n# output is computed as the total size of output files. But not every storage is\n# file-based, and so this logic can be replaced by implementing the interface\n# org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigStatsOutputSizeReader\n# If you need to register more than one reader, you can register them as a comma\n# separated list. Every reader implements a boolean supports(POStore sto) method.\n# When there are more than one reader, they are consulted in order, and the\n# first one whose supports() method returns true will be used.\n#\n# pig.stats.output.size.reader=<fully qualified class name of a PigStatsOutputSizeReader implementation>\n# pig.stats.output.size.reader.unsupported=<comma separated list of StoreFuncs that are not supported by this reader>\n\n# By default, Pig retrieves TaskReports for every launched task to compute\n# various job statistics. But this can cause OOM if the number of tasks is\n# large. In such case, you can disable it by setting this property to true.\n# pig.stats.notaskreport=false\n\n#\n# Override hadoop configs programatically\n#\n# By default, Pig expects hadoop configs (hadoop-site.xml and core-site.xml)\n# to be present on the classpath. There are cases when these configs are\n# needed to be passed programatically, such as while using the PigServer API.\n# In such cases, you can override hadoop configs by setting the property\n# \"pig.use.overriden.hadoop.configs\".\n#\n# When this property is set to true, Pig ignores looking for hadoop configs\n# in the classpath and instead picks it up from Properties/Configuration\n# object passed to it.\n#\n# pig.use.overriden.hadoop.configs=false\n\n# Implied LoadFunc for the LOAD operation when no USING clause is\n# present. Supply the fully qualified class name of a LoadFunc\n# implementation. Note: setting this means you will have to modify most code\n# brought in from elsewhere on the web, as people generally omit the USING\n# clause for TSV files.\n#\n# * org.apache.pig.builtin.PigStorage (default): the traditional tab-separated-values LoadFunc\n# * my.custom.udfcollection.MyCustomLoadFunc (for example): use MyCustomLoadFunc instead\n#\n# pig.default.load.func=<fully qualified class name of a LoadFunc implementation>\n\n# The implied StoreFunc for STORE operations with no USING clause. Supply the\n# fully qualified class name of a StoreFunc implementation.\n#\n# * org.apache.pig.builtin.PigStorage (default): the traditional tab-separated-values StoreFunc.\n# * my.custom.udfcollection.MyCustomStoreFunc (for example): use MyCustomStoreFunc instead\n#\n# pig.default.store.func=<fully qualified class name of a StoreFunc implementation>\n\n# Recover jobs when the application master is restarted? (default: false). This\n# is a Hadoop 2 specific property; enable it to take advantage of AM recovery.\n#\n# pig.output.committer.recovery.support=true\n\n# Should scripts check to prevent multiple stores writing to the same location?\n# (default: false) When set to true, stops the execution of script right away.\n#\npig.location.check.strict=false\n\n# In addition to the fs-style commands (rm, ls, etc) Pig can now execute\n# SQL-style DDL commands, eg \"sql create table pig_test(name string, age int)\".\n# The only implemented backend is hcat, and luckily that's also the default.\n#\n# pig.sql.type=hcat\n\n# Path to the hcat executable, for use with pig.sql.type=hcat (default: null)\n#\nhcat.bin=/usr/local/hcat/bin/hcat\n\n###########################################################################\n#\n# Overrides for extreme environments\n#\n# (Most people won't have to adjust these parameters)\n#\n\n\n# Limit the pig script length placed in the jobconf xml. (default:10240)\n# Extremely long queries can waste space in the JobConf; since its contents are\n# only advisory, the default is fine unless you are retaining it for forensics.\n#\n# pig.script.max.size=10240\n\n# Disable use of counters by Pig. Note that the word 'counter' is singular here.\n#\n# * false (default, recommended): do NOT disable counters.\n# * true: disable counters. Set this to true only when your Pig job will\n#   otherwise die because of using more counters than hadoop configured limit\n#\n# pig.disable.counter=true\n\n# Sample size (per-mapper, in number of rows) the ORDER..BY operation's\n# RandomSampleLoader uses to estimate how your data should be\n# partitioned. (default, recommended: 100 rows per task) Increase this if you\n# have exceptionally large input splits and are unhappy with the reducer skew.\n#\n# pig.random.sampler.sample.size=100\n\n# Process an entire script at once, reducing the amount of work and number of\n# tasks? (default, recommended: true) See http://pig.apache.org/docs/r0.12.0/perf.html#multi-query-execution\n#\n# MultiQuery optimization is very useful, and so the recommended default is\n# true. You may find a that a script fails to compile under MultiQuery. If so,\n# disable it at runtime:\n#\n#     pig -no_multiquery script_that_makes_pig_sad.pig\n#\n# opt.multiquery=true\n\n# For small queries, fetch data directly from the HDFS. (default, recommended:\n# true). If you want to force Pig to launch a MR job, for example when you're\n# testing a live cluster, disable with the -N option. See PIG-3642.\n#\n# opt.fetch=true\n\n# Enable auto/grace parallelism in tez. These should be used by default unless\n# you encounter some bug in automatic parallelism. If pig.tez.auto.parallelism\n# to false, use 1 as default parallelism\npig.tez.auto.parallelism=true\npig.tez.grace.parallelism=true\n\n###########################################################################\n#\n# Streaming properties\n#\n\n# Define what properties will be set in the streaming environment. Just set this\n# property to a comma-delimited list of properties to set, and those properties\n# will be set in the environment.\n#\n# pig.streaming.environment=<comma-delimited list of propertes>\n\n# Specify a comma-delimited list of local files to ship to distributed cache for\n# streaming job.\n#\n# pig.streaming.ship.files=<comma-delimited list of local files>\n\n# Specify a comma-delimited list of remote files to cache on distributed cache\n# for streaming job.\n#\n# pig.streaming.cache.files=<comma-delimited list of remote files>\n\n# Specify the python command to be used for python streaming udf. By default,\n# python is used, but you can overwrite it with a non-default version such as\n# python2.7.\n#\n# pig.streaming.udf.python.command=python"
        }, 
        "ranger-hbase-plugin-properties": {}, 
        "hawq-env": {
            "hawq_password": "gpadmin",
            "hawq_ssh_exkeys": "false"
        }, 
        "core-site": {
            "ipc.server.listen.queue.size": "3300", 
            "net.topology.script.file.name": "/etc/hadoop/conf/topology_script.py", 
            "hadoop.proxyuser.hdfs.groups": "*", 
            "hadoop.proxyuser.hcat.hosts": "c6402.ambari.apache.org", 
            "hadoop.proxyuser.hcat.groups": "*", 
            "fs.trash.interval": "360", 
            "hadoop.proxyuser.hive.groups": "*", 
            "hadoop.http.authentication.simple.anonymous.allowed": "true", 
            "io.compression.codecs": "org.apache.hadoop.io.compress.GzipCodec,org.apache.hadoop.io.compress.DefaultCodec,org.apache.hadoop.io.compress.SnappyCodec,com.hadoop.compression.lzo.LzoCodec,com.hadoop.compression.lzo.LzopCodec", 
            "ipc.client.idlethreshold": "8000", 
            "io.file.buffer.size": "131072", 
            "io.compression.codec.lzo.class": "com.hadoop.compression.lzo.LzoCodec", 
            "io.serializations": "org.apache.hadoop.io.serializer.WritableSerialization", 
            "ipc.client.connect.timeout": "300000", 
            "hadoop.security.authentication": "simple", 
            "mapreduce.jobtracker.webinterface.trusted": "false", 
            "hadoop.proxyuser.hdfs.hosts": "*", 
            "hadoop.proxyuser.hive.hosts": "c6402.ambari.apache.org", 
            "fs.defaultFS": "hdfs://c6401.ambari.apache.org:8020", 
            "ha.failover-controller.active-standby-elector.zk.op.retries": "120", 
            "hadoop.security.key.provider.path": "", 
            "hadoop.security.authorization": "false", 
            "ipc.server.tcpnodelay": "true", 
            "ipc.client.connect.max.retries": "50", 
            "hadoop.security.auth_to_local": "DEFAULT", 
            "hadoop.proxyuser.oozie.hosts": "*", 
            "ipc.client.connection.maxidletime": "3600000"
        }, 
        "hive-site": {
            "javax.jdo.option.ConnectionDriverName": "com.mysql.jdbc.Driver", 
            "hive.fetch.task.aggr": "false", 
            "hive.execution.engine": "tez", 
            "hive.tez.java.opts": "-server -Djava.net.preferIPv4Stack=true -XX:NewRatio=8 -XX:+UseNUMA -XX:+UseG1GC -XX:+ResizeTLAB -XX:+PrintGCDetails -verbose:gc -XX:+PrintGCTimeStamps", 
            "hive.server2.thrift.http.port": "10001", 
            "hive.tez.min.partition.factor": "0.25", 
            "hive.tez.cpu.vcores": "-1", 
            "hive.compute.query.using.stats": "true", 
            "hive.stats.dbclass": "fs", 
            "hive.merge.size.per.task": "256000000", 
            "hive.fetch.task.conversion": "more", 
            "hive.auto.convert.sortmerge.join.to.mapjoin": "false", 
            "hive.server2.thrift.http.path": "cliservice", 
            "hive.exec.scratchdir": "/tmp/hive", 
            "hive.exec.post.hooks": "org.apache.hadoop.hive.ql.hooks.ATSHook", 
            "hive.zookeeper.namespace": "hive_zookeeper_namespace", 
            "hive.cbo.enable": "true", 
            "hive.optimize.reducededuplication": "true", 
            "hive.optimize.bucketmapjoin": "true", 
            "hive.mapjoin.bucket.cache.size": "10000", 
            "hive.limit.optimize.enable": "true", 
            "hive.fetch.task.conversion.threshold": "1073741824", 
            "hive.server2.enable.doAs": "true", 
            "hive.exec.max.dynamic.partitions": "5000", 
            "hive.metastore.sasl.enabled": "false", 
            "hive.txn.manager": "org.apache.hadoop.hive.ql.lockmgr.DummyTxnManager", 
            "hive.optimize.constant.propagation": "true", 
            "hive.exec.submitviachild": "false", 
            "hive.metastore.kerberos.principal": "hive/_HOST@EXAMPLE.COM", 
            "hive.txn.max.open.batch": "1000", 
            "hive.exec.compress.output": "false", 
            "hive.tez.auto.reducer.parallelism": "true", 
            "hive.security.authenticator.manager": "org.apache.hadoop.hive.ql.security.ProxyUserAuthenticator", 
            "hive.merge.mapfiles": "true", 
            "hive.exec.parallel.thread.number": "8", 
            "hive.mapjoin.optimized.hashtable": "true", 
            "hive.default.fileformat": "TextFile", 
            "hive.optimize.metadataonly": "true", 
            "hive.tez.dynamic.partition.pruning.max.event.size": "1048576", 
            "hive.server2.thrift.max.worker.threads": "500", 
            "hive.optimize.sort.dynamic.partition": "false", 
            "hive.server2.table.type.mapping": "CLASSIC", 
            "hive.metastore.pre.event.listeners": "org.apache.hadoop.hive.ql.security.authorization.AuthorizationPreEventListener", 
            "hive.metastore.failure.retries": "24", 
            "hive.merge.smallfiles.avgsize": "16000000", 
            "hive.tez.max.partition.factor": "2.0", 
            "hive.server2.transport.mode": "binary", 
            "atlas.hook.hive.minThreads": "1", 
            "hive.tez.container.size": "170", 
            "hive.optimize.bucketmapjoin.sortedmerge": "false", 
            "hive.compactor.worker.threads": "0", 
            "hive.security.metastore.authorization.manager": "org.apache.hadoop.hive.ql.security.authorization.StorageBasedAuthorizationProvider", 
            "hive.map.aggr.hash.percentmemory": "0.5", 
            "hive.user.install.directory": "/user/", 
            "datanucleus.autoCreateSchema": "false", 
            "hive.conf.restricted.list": "hive.security.authenticator.manager,hive.security.authorization.manager,hive.users.in.admin.role", 
            "hive.merge.rcfile.block.level": "true", 
            "hive.map.aggr": "true", 
            "hive.metastore.client.connect.retry.delay": "5s", 
            "hive.security.authorization.enabled": "false", 
            "hive.map.aggr.hash.force.flush.memory.threshold": "0.9", 
            "hive.server2.tez.default.queues": "default", 
            "hive.prewarm.enabled": "false", 
            "hive.exec.reducers.max": "1009", 
            "hive.metastore.kerberos.keytab.file": "/etc/security/keytabs/hive.service.keytab", 
            "hive.stats.fetch.partition.stats": "true", 
            "hive.cli.print.header": "false", 
            "hive.server2.thrift.sasl.qop": "auth", 
            "hive.server2.support.dynamic.service.discovery": "true", 
            "hive.server2.thrift.port": "10000", 
            "hive.exec.reducers.bytes.per.reducer": "67108864", 
            "hive.compactor.abortedtxn.threshold": "1000", 
            "hive.tez.dynamic.partition.pruning.max.data.size": "104857600", 
            "hive.metastore.warehouse.dir": "/apps/hive/warehouse", 
            "hive.metastore.client.socket.timeout": "1800s", 
            "hive.server2.zookeeper.namespace": "hiveserver2", 
            "hive.prewarm.numcontainers": "3", 
            "hive.cluster.delegation.token.store.class": "org.apache.hadoop.hive.thrift.ZooKeeperTokenStore", 
            "hive.security.metastore.authenticator.manager": "org.apache.hadoop.hive.ql.security.HadoopDefaultMetastoreAuthenticator", 
            "atlas.hook.hive.maxThreads": "1", 
            "hive.auto.convert.join": "true", 
            "hive.enforce.bucketing": "false", 
            "hive.server2.authentication.spnego.keytab": "HTTP/_HOST@EXAMPLE.COM", 
            "hive.mapred.reduce.tasks.speculative.execution": "false", 
            "javax.jdo.option.ConnectionURL": "jdbc:mysql://c6402.ambari.apache.org/hive?createDatabaseIfNotExist=true", 
            "hive.exec.dynamic.partition.mode": "strict", 
            "hive.auto.convert.sortmerge.join": "true", 
            "hive.zookeeper.quorum": "c6403.ambari.apache.org:2181,c6402.ambari.apache.org:2181,c6401.ambari.apache.org:2181", 
            "hive.security.authorization.manager": "org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdConfOnlyAuthorizerFactory", 
            "hive.exec.parallel": "false", 
            "hive.exec.compress.intermediate": "false", 
            "hive.enforce.sorting": "true", 
            "hive.txn.timeout": "300", 
            "hive.metastore.authorization.storage.checks": "false", 
            "hive.exec.orc.default.stripe.size": "67108864", 
            "hive.metastore.cache.pinobjtypes": "Table,Database,Type,FieldSchema,Order", 
            "hive.server2.logging.operation.enabled": "true", 
            "hive.merge.tezfiles": "false", 
            "hive.compactor.initiator.on": "false", 
            "hive.auto.convert.join.noconditionaltask": "true", 
            "hive.compactor.worker.timeout": "86400L", 
            "hive.optimize.null.scan": "true", 
            "hive.server2.tez.initialize.default.sessions": "false", 
            "datanucleus.cache.level2.type": "none", 
            "hive.stats.autogather": "true", 
            "hive.server2.use.SSL": "false", 
            "hive.exec.submit.local.task.via.child": "true", 
            "hive.merge.mapredfiles": "false", 
            "hive.vectorized.execution.enabled": "true", 
            "hive.cluster.delegation.token.store.zookeeper.connectString": "c6403.ambari.apache.org:2181,c6402.ambari.apache.org:2181,c6401.ambari.apache.org:2181", 
            "hive.map.aggr.hash.min.reduction": "0.5", 
            "hive.tez.log.level": "INFO", 
            "hive.server2.tez.sessions.per.default.queue": "1", 
            "hive.exec.max.dynamic.partitions.pernode": "2000", 
            "hive.tez.dynamic.partition.pruning": "true", 
            "datanucleus.fixedDatastore": "true", 
            "hive.limit.pushdown.memory.usage": "0.04", 
            "hive.security.metastore.authorization.auth.reads": "true", 
            "ambari.hive.db.schema.name": "hive", 
            "hive.vectorized.groupby.checkinterval": "4096", 
            "hive.smbjoin.cache.rows": "10000", 
            "hive.metastore.execute.setugi": "true", 
            "hive.zookeeper.client.port": "2181", 
            "hive.vectorized.groupby.maxentries": "100000", 
            "hive.server2.authentication.spnego.principal": "/etc/security/keytabs/spnego.service.keytab", 
            "hive.cluster.delegation.token.store.zookeeper.znode": "/hive/cluster/delegation", 
            "javax.jdo.option.ConnectionPassword": "password", 
            "hive.exec.max.created.files": "100000", 
            "hive.default.fileformat.managed": "TextFile", 
            "hive.vectorized.execution.reduce.enabled": "false", 
            "hive.orc.splits.include.file.footer": "false", 
            "hive.exec.pre.hooks": "org.apache.hadoop.hive.ql.hooks.ATSHook", 
            "hive.merge.orcfile.stripe.level": "true", 
            "hive.exec.failure.hooks": "org.apache.hadoop.hive.ql.hooks.ATSHook", 
            "hive.server2.allow.user.substitution": "true", 
            "hive.optimize.index.filter": "true", 
            "hive.exec.orc.encoding.strategy": "SPEED", 
            "hive.metastore.connect.retries": "24", 
            "hive.metastore.server.max.threads": "100000", 
            "hive.exec.orc.compression.strategy": "SPEED", 
            "hive.vectorized.groupby.flush.percent": "0.1", 
            "hive.metastore.uris": "thrift://c6402.ambari.apache.org:9083", 
            "hive.enforce.sortmergebucketmapjoin": "true", 
            "hive.auto.convert.join.noconditionaltask.size": "59419306", 
            "javax.jdo.option.ConnectionUserName": "hive", 
            "hive.compactor.delta.num.threshold": "10", 
            "hive.exec.dynamic.partition": "true", 
            "hive.server2.authentication": "NONE", 
            "hive.stats.fetch.column.stats": "true", 
            "hive.orc.compute.splits.num.threads": "10", 
            "hive.tez.smb.number.waves": "0.5", 
            "hive.convert.join.bucket.mapjoin.tez": "false", 
            "hive.optimize.reducededuplication.min.reducer": "4", 
            "hive.metastore.schema.verification": "true", 
            "hive.server2.logging.operation.log.location": "/tmp/hive/operation_logs", 
            "hive.tez.input.format": "org.apache.hadoop.hive.ql.io.HiveInputFormat", 
            "hive.exec.orc.default.compress": "ZLIB", 
            "hive.support.concurrency": "false", 
            "hive.compactor.check.interval": "300L", 
            "hive.compactor.delta.pct.threshold": "0.1f"
        }, 
        "yarn-env": {
            "yarn_pid_dir_prefix": "/var/run/hadoop-yarn", 
            "yarn_user_nproc_limit": "65536", 
            "apptimelineserver_heapsize": "1024", 
            "yarn_user_nofile_limit": "32768", 
            "is_supported_yarn_ranger": "true", 
            "nodemanager_heapsize": "1024", 
            "content": "\n      export HADOOP_YARN_HOME={{hadoop_yarn_home}}\n      export YARN_LOG_DIR={{yarn_log_dir_prefix}}/$USER\n      export YARN_PID_DIR={{yarn_pid_dir_prefix}}/$USER\n      export HADOOP_LIBEXEC_DIR={{hadoop_libexec_dir}}\n      export JAVA_HOME={{java64_home}}\n      export JAVA_LIBRARY_PATH=\"${JAVA_LIBRARY_PATH}:{{hadoop_java_io_tmpdir}}\"\n\n      # We need to add the EWMA appender for the yarn daemons only;\n      # however, YARN_ROOT_LOGGER is shared by the yarn client and the\n      # daemons. This is restrict the EWMA appender to daemons only.\n      INVOKER=\"${0##*/}\"\n      if [ \"$INVOKER\" == \"yarn-daemon.sh\" ]; then\n        export YARN_ROOT_LOGGER=${YARN_ROOT_LOGGER:-INFO,EWMA,RFA}\n      fi\n\n      # User for YARN daemons\n      export HADOOP_YARN_USER=${HADOOP_YARN_USER:-yarn}\n\n      # resolve links - $0 may be a softlink\n      export YARN_CONF_DIR=\"${YARN_CONF_DIR:-$HADOOP_YARN_HOME/conf}\"\n\n      # some Java parameters\n      # export JAVA_HOME=/home/y/libexec/jdk1.6.0/\n      if [ \"$JAVA_HOME\" != \"\" ]; then\n      #echo \"run java in $JAVA_HOME\"\n      JAVA_HOME=$JAVA_HOME\n      fi\n\n      if [ \"$JAVA_HOME\" = \"\" ]; then\n      echo \"Error: JAVA_HOME is not set.\"\n      exit 1\n      fi\n\n      JAVA=$JAVA_HOME/bin/java\n      JAVA_HEAP_MAX=-Xmx1000m\n\n      # For setting YARN specific HEAP sizes please use this\n      # Parameter and set appropriately\n      YARN_HEAPSIZE={{yarn_heapsize}}\n\n      # check envvars which might override default args\n      if [ \"$YARN_HEAPSIZE\" != \"\" ]; then\n      JAVA_HEAP_MAX=\"-Xmx\"\"$YARN_HEAPSIZE\"\"m\"\n      fi\n\n      # Resource Manager specific parameters\n\n      # Specify the max Heapsize for the ResourceManager using a numerical value\n      # in the scale of MB. For example, to specify an jvm option of -Xmx1000m, set\n      # the value to 1000.\n      # This value will be overridden by an Xmx setting specified in either YARN_OPTS\n      # and/or YARN_RESOURCEMANAGER_OPTS.\n      # If not specified, the default value will be picked from either YARN_HEAPMAX\n      # or JAVA_HEAP_MAX with YARN_HEAPMAX as the preferred option of the two.\n      export YARN_RESOURCEMANAGER_HEAPSIZE={{resourcemanager_heapsize}}\n\n      # Specify the JVM options to be used when starting the ResourceManager.\n      # These options will be appended to the options specified as YARN_OPTS\n      # and therefore may override any similar flags set in YARN_OPTS\n      #export YARN_RESOURCEMANAGER_OPTS=\n\n      # Node Manager specific parameters\n\n      # Specify the max Heapsize for the NodeManager using a numerical value\n      # in the scale of MB. For example, to specify an jvm option of -Xmx1000m, set\n      # the value to 1000.\n      # This value will be overridden by an Xmx setting specified in either YARN_OPTS\n      # and/or YARN_NODEMANAGER_OPTS.\n      # If not specified, the default value will be picked from either YARN_HEAPMAX\n      # or JAVA_HEAP_MAX with YARN_HEAPMAX as the preferred option of the two.\n      export YARN_NODEMANAGER_HEAPSIZE={{nodemanager_heapsize}}\n\n      # Specify the max Heapsize for the HistoryManager using a numerical value\n      # in the scale of MB. For example, to specify an jvm option of -Xmx1000m, set\n      # the value to 1024.\n      # This value will be overridden by an Xmx setting specified in either YARN_OPTS\n      # and/or YARN_HISTORYSERVER_OPTS.\n      # If not specified, the default value will be picked from either YARN_HEAPMAX\n      # or JAVA_HEAP_MAX with YARN_HEAPMAX as the preferred option of the two.\n      export YARN_HISTORYSERVER_HEAPSIZE={{apptimelineserver_heapsize}}\n\n      # Specify the JVM options to be used when starting the NodeManager.\n      # These options will be appended to the options specified as YARN_OPTS\n      # and therefore may override any similar flags set in YARN_OPTS\n      #export YARN_NODEMANAGER_OPTS=\n\n      # so that filenames w/ spaces are handled correctly in loops below\n      IFS=\n\n\n      # default log directory and file\n      if [ \"$YARN_LOG_DIR\" = \"\" ]; then\n      YARN_LOG_DIR=\"$HADOOP_YARN_HOME/logs\"\n      fi\n      if [ \"$YARN_LOGFILE\" = \"\" ]; then\n      YARN_LOGFILE='yarn.log'\n      fi\n\n      # default policy file for service-level authorization\n      if [ \"$YARN_POLICYFILE\" = \"\" ]; then\n      YARN_POLICYFILE=\"hadoop-policy.xml\"\n      fi\n\n      # restore ordinary behaviour\n      unset IFS\n\n\n      YARN_OPTS=\"$YARN_OPTS -Dhadoop.log.dir=$YARN_LOG_DIR\"\n      YARN_OPTS=\"$YARN_OPTS -Dyarn.log.dir=$YARN_LOG_DIR\"\n      YARN_OPTS=\"$YARN_OPTS -Dhadoop.log.file=$YARN_LOGFILE\"\n      YARN_OPTS=\"$YARN_OPTS -Dyarn.log.file=$YARN_LOGFILE\"\n      YARN_OPTS=\"$YARN_OPTS -Dyarn.home.dir=$YARN_COMMON_HOME\"\n      YARN_OPTS=\"$YARN_OPTS -Dyarn.id.str=$YARN_IDENT_STRING\"\n      YARN_OPTS=\"$YARN_OPTS -Dhadoop.root.logger=${YARN_ROOT_LOGGER:-INFO,console}\"\n      YARN_OPTS=\"$YARN_OPTS -Dyarn.root.logger=${YARN_ROOT_LOGGER:-INFO,console}\"\n      if [ \"x$JAVA_LIBRARY_PATH\" != \"x\" ]; then\n      YARN_OPTS=\"$YARN_OPTS -Djava.library.path=$JAVA_LIBRARY_PATH\"\n      fi\n      YARN_OPTS=\"$YARN_OPTS -Dyarn.policy.file=$YARN_POLICYFILE\"\n      YARN_OPTS=\"$YARN_OPTS -Djava.io.tmpdir={{hadoop_java_io_tmpdir}}\"\n    ", 
            "yarn_heapsize": "1024", 
            "min_user_id": "1000", 
            "yarn_cgroups_enabled": "false", 
            "yarn_user": "yarn", 
            "resourcemanager_heapsize": "1024", 
            "yarn_log_dir_prefix": "/var/log/hadoop-yarn"
        }, 
        "hawq-site": {
            "hawq_re_cgroup_hierarchy_name": "hawq", 
            "hawq_master_directory": "/data/hawq/master", 
            "hawq_segment_address_port": "40000", 
            "hawq_master_temp_directory": "/tmp/hawq/master", 
            "hawq_standby_address_host": "c6402.ambari.apache.org", 
            "hawq_master_address_port": "5432", 
            "hawq_segment_temp_directory": "/tmp/hawq/segment", 
            "hawq_master_address_host": "c6403.ambari.apache.org", 
            "hawq_rm_yarn_queue_name": "default", 
            "hawq_rm_yarn_address": "c6402.ambari.apache.org:8032", 
            "hawq_re_cgroup_mount_point": "/sys/fs/cgroup", 
            "hawq_dfs_url": "c6401.ambari.apache.org:8020/hawq_default", 
            "hawq_global_rm_type": "none", 
            "hawq_segment_directory": "/data/hawq/segment", 
            "hawq_rm_memory_limit_perseg": "64GB", 
            "hawq_rm_yarn_scheduler_address": "c6402.ambari.apache.org:8030", 
            "hawq_rm_yarn_app_name": "hawq", 
            "hawq_re_cpu_enable": "false", 
            "hawq_rm_nvcore_limit_perseg": "16"
        }, 
        "ranger-yarn-policymgr-ssl": {
            "xasecure.policymgr.clientssl.keystore": "/usr/phd/current/hadoop-client/conf/ranger-yarn-plugin-keystore.jks", 
            "xasecure.policymgr.clientssl.truststore.password": "changeit", 
            "xasecure.policymgr.clientssl.keystore.credential.file": "jceks://file{{credential_file}}", 
            "xasecure.policymgr.clientssl.truststore": "/usr/phd/current/hadoop-client/conf/ranger-yarn-plugin-truststore.jks", 
            "xasecure.policymgr.clientssl.truststore.credential.file": "jceks://file{{credential_file}}", 
            "xasecure.policymgr.clientssl.keystore.password": "myKeyFilePassword"
        }, 
        "hawq-check-env": {
            "content": "\n[global]\nconfigfile_version = 4\n\n[linux.mount]\nmount.points = /\n\n[linux.sysctl]\nsysctl.kernel.shmmax = 500000000\nsysctl.kernel.shmmni = 4096\nsysctl.kernel.shmall = 4000000000\nsysctl.kernel.sem = 250 512000 100 2048\nsysctl.kernel.sysrq = 1\nsysctl.kernel.core_uses_pid = 1\nsysctl.kernel.msgmnb = 65536\nsysctl.kernel.msgmax = 65536\nsysctl.kernel.msgmni = 2048\nsysctl.net.ipv4.tcp_syncookies = 0\nsysctl.net.ipv4.ip_forward = 0\nsysctl.net.ipv4.conf.default.accept_source_route = 0\nsysctl.net.ipv4.tcp_tw_recycle = 1\nsysctl.net.ipv4.tcp_max_syn_backlog = 200000\nsysctl.net.ipv4.conf.all.arp_filter = 1\nsysctl.net.ipv4.ip_local_port_range = 1281 65535\nsysctl.net.core.netdev_max_backlog = 200000\nsysctl.vm.overcommit_memory = 2\nsysctl.fs.nr_open = 3000000\nsysctl.kernel.threads-max = 798720\nsysctl.kernel.pid_max = 798720\n# increase network\nsysctl.net.core.rmem_max = 2097152\nsysctl.net.core.wmem_max = 2097152\n\n[linux.limits]\nsoft.nofile = 2900000\nhard.nofile = 2900000\nsoft.nproc  = 131072\nhard.nproc  = 131072\n\n[linux.diskusage]\ndiskusage.monitor.mounts = /\ndiskusage.monitor.usagemax = 90%\n\n[hdfs]\ndfs.mem.namenode.heap = 40960\ndfs.mem.datanode.heap = 6144\n# in hdfs-site.xml\ndfs.support.append = true\ndfs.client.enable.read.from.local = true\ndfs.block.local-path-access.user = gpadmin\ndfs.datanode.max.transfer.threads = 40960\ndfs.client.socket-timeout = 300000000\ndfs.datanode.socket.write.timeout = 7200000\ndfs.namenode.handler.count = 60\nipc.server.handler.queue.size = 3300\ndfs.datanode.handler.count = 60\nipc.client.connection.maxidletime = 3600000\ndfs.namenode.accesstime.precision = -1"
        }, 
        "hadoop-env": {
            "keyserver_port": "", 
            "proxyuser_group": "users", 
            "hdfs_user_nproc_limit": "65536", 
            "hdfs_log_dir_prefix": "/var/log/hadoop", 
            "hdfs_user_nofile_limit": "128000", 
            "hdfs_user": "hdfs", 
            "keyserver_host": " ", 
            "namenode_opt_maxnewsize": "200m", 
            "namenode_opt_maxpermsize": "256m", 
            "content": "\n# Set Hadoop-specific environment variables here.\n\n# The only required environment variable is JAVA_HOME.  All others are\n# optional.  When running a distributed configuration it is best to\n# set JAVA_HOME in this file, so that it is correctly defined on\n# remote nodes.\n\n# The java implementation to use.  Required.\nexport JAVA_HOME={{java_home}}\nexport HADOOP_HOME_WARN_SUPPRESS=1\n\n# Hadoop home directory\nexport HADOOP_HOME=${HADOOP_HOME:-{{hadoop_home}}}\n\n# Hadoop Configuration Directory\n\n{# this is different for PHD1 #}\n# Path to jsvc required by secure PHD 2.0 datanode\nexport JSVC_HOME={{jsvc_path}}\n\n\n# The maximum amount of heap to use, in MB. Default is 1000.\nexport HADOOP_HEAPSIZE=\"{{hadoop_heapsize}}\"\n\nexport HADOOP_NAMENODE_INIT_HEAPSIZE=\"-Xms{{namenode_heapsize}}\"\n\n# Extra Java runtime options.  Empty by default.\nexport HADOOP_OPTS=\"-Djava.net.preferIPv4Stack=true ${HADOOP_OPTS}\"\n\n# Command specific options appended to HADOOP_OPTS when specified\nHADOOP_JOBTRACKER_OPTS=\"-server -XX:ParallelGCThreads=8 -XX:+UseConcMarkSweepGC -XX:ErrorFile={{hdfs_log_dir_prefix}}/$USER/hs_err_pid%p.log -XX:NewSize={{jtnode_opt_newsize}} -XX:MaxNewSize={{jtnode_opt_maxnewsize}} -Xloggc:{{hdfs_log_dir_prefix}}/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -Xmx{{jtnode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dmapred.audit.logger=INFO,MRAUDIT -Dhadoop.mapreduce.jobsummary.logger=INFO,JSA ${HADOOP_JOBTRACKER_OPTS}\"\n\nHADOOP_TASKTRACKER_OPTS=\"-server -Xmx{{ttnode_heapsize}} -Dhadoop.security.logger=ERROR,console -Dmapred.audit.logger=ERROR,console ${HADOOP_TASKTRACKER_OPTS}\"\n\n{% if java_version < 8 %}\nSHARED_HADOOP_NAMENODE_OPTS=\"-server -XX:ParallelGCThreads=8 -XX:+UseConcMarkSweepGC -XX:ErrorFile={{hdfs_log_dir_prefix}}/$USER/hs_err_pid%p.log -XX:NewSize={{namenode_opt_newsize}} -XX:MaxNewSize={{namenode_opt_maxnewsize}} -XX:PermSize={{namenode_opt_permsize}} -XX:MaxPermSize={{namenode_opt_maxpermsize}} -Xloggc:{{hdfs_log_dir_prefix}}/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -Xms{{namenode_heapsize}} -Xmx{{namenode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dhdfs.audit.logger=INFO,DRFAAUDIT\"\nexport HADOOP_NAMENODE_OPTS=\"${SHARED_HADOOP_NAMENODE_OPTS} -XX:OnOutOfMemoryError=\\\"/usr/phd/current/hadoop-hdfs-namenode/bin/kill-name-node\\\" -Dorg.mortbay.jetty.Request.maxFormContentSize=-1 ${HADOOP_NAMENODE_OPTS}\"\nexport HADOOP_DATANODE_OPTS=\"-server -XX:ParallelGCThreads=4 -XX:+UseConcMarkSweepGC -XX:ErrorFile=/var/log/hadoop/$USER/hs_err_pid%p.log -XX:NewSize=200m -XX:MaxNewSize=200m -XX:PermSize=128m -XX:MaxPermSize=256m -Xloggc:/var/log/hadoop/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -Xms{{dtnode_heapsize}} -Xmx{{dtnode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dhdfs.audit.logger=INFO,DRFAAUDIT ${HADOOP_DATANODE_OPTS}\"\n\nexport HADOOP_SECONDARYNAMENODE_OPTS=\"${SHARED_HADOOP_NAMENODE_OPTS} -XX:OnOutOfMemoryError=\\\"/usr/phd/current/hadoop-hdfs-secondarynamenode/bin/kill-secondary-name-node\\\" ${HADOOP_SECONDARYNAMENODE_OPTS}\"\n\n# The following applies to multiple commands (fs, dfs, fsck, distcp etc)\nexport HADOOP_CLIENT_OPTS=\"-Xmx${HADOOP_HEAPSIZE}m -XX:MaxPermSize=512m $HADOOP_CLIENT_OPTS\"\n\n{% else %}\nSHARED_HADOOP_NAMENODE_OPTS=\"-server -XX:ParallelGCThreads=8 -XX:+UseConcMarkSweepGC -XX:ErrorFile={{hdfs_log_dir_prefix}}/$USER/hs_err_pid%p.log -XX:NewSize={{namenode_opt_newsize}} -XX:MaxNewSize={{namenode_opt_maxnewsize}} -Xloggc:{{hdfs_log_dir_prefix}}/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -Xms{{namenode_heapsize}} -Xmx{{namenode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dhdfs.audit.logger=INFO,DRFAAUDIT\"\nexport HADOOP_NAMENODE_OPTS=\"${SHARED_HADOOP_NAMENODE_OPTS} -XX:OnOutOfMemoryError=\\\"/usr/phd/current/hadoop-hdfs-namenode/bin/kill-name-node\\\" -Dorg.mortbay.jetty.Request.maxFormContentSize=-1 ${HADOOP_NAMENODE_OPTS}\"\nexport HADOOP_DATANODE_OPTS=\"-server -XX:ParallelGCThreads=4 -XX:+UseConcMarkSweepGC -XX:ErrorFile=/var/log/hadoop/$USER/hs_err_pid%p.log -XX:NewSize=200m -XX:MaxNewSize=200m -Xloggc:/var/log/hadoop/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -Xms{{dtnode_heapsize}} -Xmx{{dtnode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dhdfs.audit.logger=INFO,DRFAAUDIT ${HADOOP_DATANODE_OPTS}\"\n\nexport HADOOP_SECONDARYNAMENODE_OPTS=\"${SHARED_HADOOP_NAMENODE_OPTS} -XX:OnOutOfMemoryError=\\\"/usr/phd/current/hadoop-hdfs-secondarynamenode/bin/kill-secondary-name-node\\\" ${HADOOP_SECONDARYNAMENODE_OPTS}\"\n\n# The following applies to multiple commands (fs, dfs, fsck, distcp etc)\nexport HADOOP_CLIENT_OPTS=\"-Xmx${HADOOP_HEAPSIZE}m $HADOOP_CLIENT_OPTS\"\n{% endif %}\n\nHADOOP_NFS3_OPTS=\"-Xmx{{nfsgateway_heapsize}}m -Dhadoop.security.logger=ERROR,DRFAS ${HADOOP_NFS3_OPTS}\"\nHADOOP_BALANCER_OPTS=\"-server -Xmx{{hadoop_heapsize}}m ${HADOOP_BALANCER_OPTS}\"\n\n\n# On secure datanodes, user to run the datanode as after dropping privileges\nexport HADOOP_SECURE_DN_USER=${HADOOP_SECURE_DN_USER:-{{hadoop_secure_dn_user}}}\n\n# Extra ssh options.  Empty by default.\nexport HADOOP_SSH_OPTS=\"-o ConnectTimeout=5 -o SendEnv=HADOOP_CONF_DIR\"\n\n# Where log files are stored.  $HADOOP_HOME/logs by default.\nexport HADOOP_LOG_DIR={{hdfs_log_dir_prefix}}/$USER\n\n# History server logs\nexport HADOOP_MAPRED_LOG_DIR={{mapred_log_dir_prefix}}/$USER\n\n# Where log files are stored in the secure data environment.\nexport HADOOP_SECURE_DN_LOG_DIR={{hdfs_log_dir_prefix}}/$HADOOP_SECURE_DN_USER\n\n# File naming remote slave hosts.  $HADOOP_HOME/conf/slaves by default.\n# export HADOOP_SLAVES=${HADOOP_HOME}/conf/slaves\n\n# host:path where hadoop code should be rsync'd from.  Unset by default.\n# export HADOOP_MASTER=master:/home/$USER/src/hadoop\n\n# Seconds to sleep between slave commands.  Unset by default.  This\n# can be useful in large clusters, where, e.g., slave rsyncs can\n# otherwise arrive faster than the master can service them.\n# export HADOOP_SLAVE_SLEEP=0.1\n\n# The directory where pid files are stored. /tmp by default.\nexport HADOOP_PID_DIR={{hadoop_pid_dir_prefix}}/$USER\nexport HADOOP_SECURE_DN_PID_DIR={{hadoop_pid_dir_prefix}}/$HADOOP_SECURE_DN_USER\n\n# History server pid\nexport HADOOP_MAPRED_PID_DIR={{mapred_pid_dir_prefix}}/$USER\n\nYARN_RESOURCEMANAGER_OPTS=\"-Dyarn.server.resourcemanager.appsummary.logger=INFO,RMSUMMARY\"\n\n# A string representing this instance of hadoop. $USER by default.\nexport HADOOP_IDENT_STRING=$USER\n\n# The scheduling priority for daemon processes.  See 'man nice'.\n\n# export HADOOP_NICENESS=10\n\n# Add database libraries\nJAVA_JDBC_LIBS=\"\"\nif [ -d \"/usr/share/java\" ]; then\n  for jarFile in `ls /usr/share/java | grep -E \"(mysql|ojdbc|postgresql|sqljdbc)\" 2>/dev/null`\n  do\n    JAVA_JDBC_LIBS=${JAVA_JDBC_LIBS}:$jarFile\n  done\nfi\n\n# Add libraries to the hadoop classpath - some may not need a colon as they already include it\nexport HADOOP_CLASSPATH=${HADOOP_CLASSPATH}${JAVA_JDBC_LIBS}\n\n# Setting path to hdfs command line\nexport HADOOP_LIBEXEC_DIR={{hadoop_libexec_dir}}\n\n# Mostly required for hadoop 2.0\nexport JAVA_LIBRARY_PATH=${JAVA_LIBRARY_PATH}\n\nexport HADOOP_OPTS=\"-Dhdp.version=$HDP_VERSION $HADOOP_OPTS\"\n\n{% if is_datanode_max_locked_memory_set %}\n# Fix temporary bug, when ulimit from conf files is not picked up, without full relogin. \n# Makes sense to fix only when runing DN as root \nif [ \"$command\" == \"datanode\" ] && [ \"$EUID\" -eq 0 ] && [ -n \"$HADOOP_SECURE_DN_USER\" ]; then\n  ulimit -l {{datanode_max_locked_memory}}\nfi\n{% endif %}\n    ", 
            "namenode_heapsize": "1024m", 
            "namenode_opt_newsize": "200m", 
            "nfsgateway_heapsize": "1024", 
            "dtnode_heapsize": "1024m", 
            "hadoop_root_logger": "INFO,RFA", 
            "hadoop_heapsize": "1024", 
            "hadoop_pid_dir_prefix": "/var/run/hadoop", 
            "namenode_opt_permsize": "128m"
        }, 
        "hdfs-client": {
            "dfs.default.blocksize": "134217728", 
            "rpc.client.write.timeout": "3600000", 
            "rpc.client.timeout": "3600000", 
            "input.localread.default.buffersize": "2097152", 
            "input.localread.blockinfo.cachesize": "1000", 
            "output.close.timeout": "900000", 
            "rpc.client.ping.interval": "10000", 
            "dfs.client.log.severity": "INFO", 
            "dfs.client.use.legacy.blockreader.local": "false", 
            "dfs.client.read.shortcircuit": "true", 
            "dfs.prefetchsize": "10", 
            "output.default.chunksize": "512", 
            "rpc.client.connect.tcpnodelay": "true", 
            "output.default.packetsize": "65536", 
            "dfs.default.replica": "3", 
            "rpc.client.socket.linger.timeout": "-1", 
            "dfs.client.failover.max.attempts": "15", 
            "output.read.timeout": "3600000", 
            "input.read.getblockinfo.retry": "3", 
            "output.write.timeout": "3600000", 
            "output.packetpool.size": "1024", 
            "rpc.client.connect.retry": "10", 
            "rpc.client.connect.timeout": "600000", 
            "rpc.client.max.idle": "10000", 
            "output.connect.timeout": "600000", 
            "input.write.timeout": "3600000", 
            "dfs.domain.socket.path": "/var/lib/hadoop-hdfs/dn_socket", 
            "output.replace-datanode-on-failure": "false", 
            "rpc.client.read.timeout": "3600000", 
            "input.read.timeout": "3600000", 
            "input.connect.timeout": "600000", 
            "output.default.write.retry": "10"
        }, 
        "zookeeper-log4j": {
            "content": "\n#\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n#\n#\n\n#\n# ZooKeeper Logging Configuration\n#\n\n# DEFAULT: console appender only\nlog4j.rootLogger=INFO, CONSOLE\n\n# Example with rolling log file\n#log4j.rootLogger=DEBUG, CONSOLE, ROLLINGFILE\n\n# Example with rolling log file and tracing\n#log4j.rootLogger=TRACE, CONSOLE, ROLLINGFILE, TRACEFILE\n\n#\n# Log INFO level and above messages to the console\n#\nlog4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender\nlog4j.appender.CONSOLE.Threshold=INFO\nlog4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout\nlog4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} - %-5p [%t:%C{1}@%L] - %m%n\n\n#\n# Add ROLLINGFILE to rootLogger to get log file output\n#    Log DEBUG level and above messages to a log file\nlog4j.appender.ROLLINGFILE=org.apache.log4j.RollingFileAppender\nlog4j.appender.ROLLINGFILE.Threshold=DEBUG\nlog4j.appender.ROLLINGFILE.File=zookeeper.log\n\n# Max log file size of 10MB\nlog4j.appender.ROLLINGFILE.MaxFileSize=10MB\n# uncomment the next line to limit number of backup files\n#log4j.appender.ROLLINGFILE.MaxBackupIndex=10\n\nlog4j.appender.ROLLINGFILE.layout=org.apache.log4j.PatternLayout\nlog4j.appender.ROLLINGFILE.layout.ConversionPattern=%d{ISO8601} - %-5p [%t:%C{1}@%L] - %m%n\n\n\n#\n# Add TRACEFILE to rootLogger to get log file output\n#    Log DEBUG level and above messages to a log file\nlog4j.appender.TRACEFILE=org.apache.log4j.FileAppender\nlog4j.appender.TRACEFILE.Threshold=TRACE\nlog4j.appender.TRACEFILE.File=zookeeper_trace.log\n\nlog4j.appender.TRACEFILE.layout=org.apache.log4j.PatternLayout\n### Notice we are including log4j's NDC here (%x)\nlog4j.appender.TRACEFILE.layout.ConversionPattern=%d{ISO8601} - %-5p [%t:%C{1}@%L][%x] - %m%n\n    "
        }, 
        "yarn-site": {
            "yarn.client.nodemanager-connect.max-wait-ms": "60000", 
            "yarn.node-labels.enabled": "false", 
            "yarn.resourcemanager.scheduler.monitor.enable": "false", 
            "yarn.resourcemanager.zk-num-retries": "1000", 
            "yarn.timeline-service.bind-host": "0.0.0.0", 
            "yarn.resourcemanager.ha.enabled": "false", 
            "yarn.nodemanager.linux-container-executor.cgroups.hierarchy": "hadoop-yarn", 
            "yarn.timeline-service.webapp.address": "c6402.ambari.apache.org:8188", 
            "yarn.resourcemanager.state-store.max-completed-applications": "${yarn.resourcemanager.max-completed-applications}", 
            "yarn.timeline-service.enabled": "true", 
            "yarn.nodemanager.recovery.enabled": "true", 
            "yarn.timeline-service.http-authentication.type": "simple", 
            "yarn.resourcemanager.webapp.https.address": "c6402.ambari.apache.org:8090", 
            "yarn.timeline-service.entity-group-fs-store.summary-store": "org.apache.hadoop.yarn.server.timeline.RollingLevelDBTimelineStore", 
            "yarn.resourcemanager.hostname": "c6402.ambari.apache.org", 
            "yarn.resourcemanager.am.max-attempts": "2", 
            "yarn.nodemanager.log-aggregation.debug-enabled": "false", 
            "yarn.scheduler.maximum-allocation-vcores": "8", 
            "yarn.nodemanager.health-checker.script.timeout-ms": "60000", 
            "yarn.nodemanager.vmem-pmem-ratio": "2.1", 
            "yarn.resourcemanager.nodes.exclude-path": "/etc/hadoop/conf/yarn.exclude", 
            "yarn.nodemanager.linux-container-executor.cgroups.mount": "false", 
            "yarn.resourcemanager.system-metrics-publisher.dispatcher.pool-size": "10", 
            "yarn.log.server.url": "http://c6402.ambari.apache.org:19888/jobhistory/logs", 
            "yarn.application.classpath": "$HADOOP_CONF_DIR,/usr/phd/current/hadoop-client/*,/usr/phd/current/hadoop-client/lib/*,/usr/phd/current/hadoop-hdfs-client/*,/usr/phd/current/hadoop-hdfs-client/lib/*,/usr/phd/current/hadoop-yarn-client/*,/usr/phd/current/hadoop-yarn-client/lib/*", 
            "yarn.resourcemanager.webapp.delegation-token-auth-filter.enabled": "false", 
            "yarn.nodemanager.resource.cpu-vcores": "8", 
            "yarn.nodemanager.local-dirs": "/hadoop/yarn/local", 
            "yarn.nodemanager.linux-container-executor.cgroups.strict-resource-usage": "false", 
            "yarn.nodemanager.remote-app-log-dir-suffix": "logs", 
            "yarn.resourcemanager.connect.max-wait.ms": "900000", 
            "yarn.resourcemanager.address": "c6402.ambari.apache.org:8050", 
            "yarn.scheduler.maximum-allocation-mb": "5120", 
            "yarn.nodemanager.container-monitor.interval-ms": "3000", 
            "yarn.node-labels.fs-store.retry-policy-spec": "2000, 500", 
            "yarn.resourcemanager.zk-acl": "world:anyone:rwcda", 
            "yarn.timeline-service.leveldb-state-store.path": "/hadoop/yarn/timeline", 
            "yarn.timeline-service.address": "c6402.ambari.apache.org:10200", 
            "yarn.log-aggregation-enable": "true", 
            "yarn.nodemanager.delete.debug-delay-sec": "0", 
            "yarn.timeline-service.store-class": "org.apache.hadoop.yarn.server.timeline.LeveldbTimelineStore", 
            "yarn.timeline-service.client.retry-interval-ms": "1000", 
            "yarn.timeline-service.entity-group-fs-store.group-id-plugin-classes": "", 
            "hadoop.registry.zk.quorum": "c6402.ambari.apache.org:2181,c6401.ambari.apache.org:2181,c6403.ambari.apache.org:2181", 
            "yarn.nodemanager.aux-services": "mapreduce_shuffle", 
            "yarn.nodemanager.aux-services.mapreduce_shuffle.class": "org.apache.hadoop.mapred.ShuffleHandler", 
            "yarn.nodemanager.disk-health-checker.max-disk-utilization-per-disk-percentage": "90", 
            "yarn.resourcemanager.zk-timeout-ms": "10000", 
            "yarn.resourcemanager.fs.state-store.uri": " ", 
            "yarn.nodemanager.linux-container-executor.group": "hadoop", 
            "yarn.nodemanager.remote-app-log-dir": "/app-logs", 
            "yarn.timeline-service.entity-group-fs-store.cleaner-interval-seconds": "3600", 
            "yarn.resourcemanager.fs.state-store.retry-policy-spec": "2000, 500", 
            "yarn.timeline-service.generic-application-history.store-class": "org.apache.hadoop.yarn.server.applicationhistoryservice.NullApplicationHistoryStore", 
            "yarn.nodemanager.disk-health-checker.min-healthy-disks": "0.25", 
            "yarn.resourcemanager.work-preserving-recovery.enabled": "true", 
            "yarn.resourcemanager.resource-tracker.address": "c6402.ambari.apache.org:8025", 
            "yarn.resourcemanager.system-metrics-publisher.enabled": "true", 
            "yarn.resourcemanager.scheduler.class": "org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler", 
            "yarn.nodemanager.resource.memory-mb": "5120", 
            "yarn.timeline-service.entity-group-fs-store.active-dir": "/ats/active/", 
            "yarn.timeline-service.ttl-ms": "2678400000", 
            "yarn.nodemanager.resource.percentage-physical-cpu-limit": "80", 
            "yarn.nodemanager.disk-health-checker.min-free-space-per-disk-mb": "1000", 
            "yarn.nodemanager.log-aggregation.roll-monitoring-interval-seconds": "-1", 
            "yarn.nodemanager.log.retain-second": "604800", 
            "yarn.timeline-service.state-store-class": "org.apache.hadoop.yarn.server.timeline.recovery.LeveldbTimelineStateStore", 
            "yarn.nodemanager.log-dirs": "/hadoop/yarn/log", 
            "yarn.timeline-service.client.max-retries": "30", 
            "yarn.nodemanager.health-checker.interval-ms": "135000", 
            "yarn.nodemanager.admin-env": "MALLOC_ARENA_MAX=$MALLOC_ARENA_MAX", 
            "yarn.nodemanager.vmem-check-enabled": "false", 
            "yarn.acl.enable": "false", 
            "yarn.timeline-service.leveldb-timeline-store.read-cache-size": "104857600", 
            "yarn.nodemanager.linux-container-executor.resources-handler.class": "org.apache.hadoop.yarn.server.nodemanager.util.DefaultLCEResourcesHandler", 
            "yarn.resourcemanager.webapp.address": "c6402.ambari.apache.org:8088", 
            "yarn.timeline-service.http-authentication.simple.anonymous.allowed": "true", 
            "yarn.timeline-service.leveldb-timeline-store.start-time-read-cache-size": "10000", 
            "yarn.resourcemanager.bind-host": "0.0.0.0", 
            "yarn.http.policy": "HTTP_ONLY", 
            "yarn.timeline-service.version": "1.5", 
            "yarn.resourcemanager.zk-address": "c6402.ambari.apache.org:2181,c6401.ambari.apache.org:2181,c6403.ambari.apache.org:2181", 
            "yarn.nodemanager.recovery.dir": "{{yarn_log_dir_prefix}}/nodemanager/recovery-state", 
            "yarn.nodemanager.container-executor.class": "org.apache.hadoop.yarn.server.nodemanager.DefaultContainerExecutor", 
            "yarn.resourcemanager.store.class": "org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore", 
            "yarn.timeline-service.entity-group-fs-store.retain-seconds": "604800", 
            "yarn.scheduler.minimum-allocation-vcores": "1", 
            "yarn.timeline-service.leveldb-timeline-store.path": "/hadoop/yarn/timeline", 
            "yarn.scheduler.minimum-allocation-mb": "512", 
            "yarn.timeline-service.ttl-enable": "true", 
            "yarn.resourcemanager.scheduler.address": "c6402.ambari.apache.org:8030", 
            "yarn.log-aggregation.retain-seconds": "2592000", 
            "yarn.nodemanager.address": "0.0.0.0:45454", 
            "hadoop.registry.rm.enabled": "false", 
            "yarn.timeline-service.leveldb-timeline-store.ttl-interval-ms": "300000", 
            "yarn.resourcemanager.work-preserving-recovery.scheduling-wait-ms": "10000", 
            "yarn.resourcemanager.zk-state-store.parent-path": "/rmstore", 
            "yarn.nodemanager.log-aggregation.compression-type": "gz", 
            "yarn.nodemanager.log-aggregation.num-log-files-per-app": "30", 
            "yarn.resourcemanager.recovery.enabled": "true", 
            "yarn.timeline-service.recovery.enabled": "true", 
            "yarn.nodemanager.bind-host": "0.0.0.0", 
            "yarn.resourcemanager.zk-retry-interval-ms": "1000", 
            "yarn.admin.acl": "yarn", 
            "yarn.node-labels.fs-store.root-dir": "/system/yarn/node-labels", 
            "yarn.timeline-service.entity-group-fs-store.scan-interval-seconds": "60", 
            "yarn.timeline-service.leveldb-timeline-store.start-time-write-cache-size": "10000", 
            "yarn.client.nodemanager-connect.retry-interval-ms": "10000", 
            "yarn.resourcemanager.admin.address": "c6402.ambari.apache.org:8141", 
            "yarn.timeline-service.webapp.https.address": "c6402.ambari.apache.org:8190", 
            "yarn.resourcemanager.connect.retry-interval.ms": "30000", 
            "yarn.timeline-service.entity-group-fs-store.done-dir": "/ats/done/"
        }, 
        "ranger-yarn-security": {
            "ranger.plugin.yarn.policy.rest.ssl.config.file": "/etc/hadoop/conf/ranger-policymgr-ssl-yarn.xml", 
            "ranger.plugin.yarn.policy.source.impl": "org.apache.ranger.admin.client.RangerAdminRESTClient", 
            "ranger.plugin.yarn.service.name": "{{repo_name}}", 
            "ranger.plugin.yarn.policy.rest.url": "{{policymgr_mgr_url}}", 
            "ranger.plugin.yarn.policy.cache.dir": "/etc/ranger/{{repo_name}}/policycache", 
            "ranger.plugin.yarn.policy.pollIntervalMs": "30000"
        }, 
        "capacity-scheduler": {
            "yarn.scheduler.capacity.default.minimum-user-limit-percent": "100", 
            "yarn.scheduler.capacity.root.default.maximum-capacity": "100", 
            "yarn.scheduler.capacity.root.accessible-node-labels": "*", 
            "yarn.scheduler.capacity.root.capacity": "100", 
            "yarn.scheduler.capacity.maximum-am-resource-percent": "0.2", 
            "yarn.scheduler.capacity.maximum-applications": "10000", 
            "yarn.scheduler.capacity.root.default.user-limit-factor": "1", 
            "yarn.scheduler.capacity.node-locality-delay": "40", 
            "yarn.scheduler.capacity.root.default.acl_submit_applications": "*", 
            "yarn.scheduler.capacity.root.default.state": "RUNNING", 
            "yarn.scheduler.capacity.root.default.capacity": "100", 
            "yarn.scheduler.capacity.root.acl_administer_queue": "*", 
            "yarn.scheduler.capacity.root.queues": "default", 
            "yarn.scheduler.capacity.root.default.acl_administer_jobs": "*", 
            "yarn.scheduler.capacity.resource-calculator": "org.apache.hadoop.yarn.util.resource.DefaultResourceCalculator"
        }, 
        "hbase-log4j": {
            "content": "\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\n# Define some default values that can be overridden by system properties\nhbase.root.logger=INFO,console\nhbase.security.logger=INFO,console\nhbase.log.dir=.\nhbase.log.file=hbase.log\n\n# Define the root logger to the system property \"hbase.root.logger\".\nlog4j.rootLogger=${hbase.root.logger}\n\n# Logging Threshold\nlog4j.threshold=ALL\n\n#\n# Daily Rolling File Appender\n#\nlog4j.appender.DRFA=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.DRFA.File=${hbase.log.dir}/${hbase.log.file}\n\n# Rollver at midnight\nlog4j.appender.DRFA.DatePattern=.yyyy-MM-dd\n\n# 30-day backup\n#log4j.appender.DRFA.MaxBackupIndex=30\nlog4j.appender.DRFA.layout=org.apache.log4j.PatternLayout\n\n# Pattern format: Date LogLevel LoggerName LogMessage\nlog4j.appender.DRFA.layout.ConversionPattern=%d{ISO8601} %-5p [%t] %c{2}: %m%n\n\n# Rolling File Appender properties\nhbase.log.maxfilesize=256MB\nhbase.log.maxbackupindex=20\n\n# Rolling File Appender\nlog4j.appender.RFA=org.apache.log4j.RollingFileAppender\nlog4j.appender.RFA.File=${hbase.log.dir}/${hbase.log.file}\n\nlog4j.appender.RFA.MaxFileSize=${hbase.log.maxfilesize}\nlog4j.appender.RFA.MaxBackupIndex=${hbase.log.maxbackupindex}\n\nlog4j.appender.RFA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RFA.layout.ConversionPattern=%d{ISO8601} %-5p [%t] %c{2}: %m%n\n\n#\n# Security audit appender\n#\nhbase.security.log.file=SecurityAuth.audit\nhbase.security.log.maxfilesize=256MB\nhbase.security.log.maxbackupindex=20\nlog4j.appender.RFAS=org.apache.log4j.RollingFileAppender\nlog4j.appender.RFAS.File=${hbase.log.dir}/${hbase.security.log.file}\nlog4j.appender.RFAS.MaxFileSize=${hbase.security.log.maxfilesize}\nlog4j.appender.RFAS.MaxBackupIndex=${hbase.security.log.maxbackupindex}\nlog4j.appender.RFAS.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RFAS.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\nlog4j.category.SecurityLogger=${hbase.security.logger}\nlog4j.additivity.SecurityLogger=false\n#log4j.logger.SecurityLogger.org.apache.hadoop.hbase.security.access.AccessController=TRACE\n\n#\n# Null Appender\n#\nlog4j.appender.NullAppender=org.apache.log4j.varia.NullAppender\n\n#\n# console\n# Add \"console\" to rootlogger above if you want to use this\n#\nlog4j.appender.console=org.apache.log4j.ConsoleAppender\nlog4j.appender.console.target=System.err\nlog4j.appender.console.layout=org.apache.log4j.PatternLayout\nlog4j.appender.console.layout.ConversionPattern=%d{ISO8601} %-5p [%t] %c{2}: %m%n\n\n# Custom Logging levels\n\nlog4j.logger.org.apache.zookeeper=INFO\n#log4j.logger.org.apache.hadoop.fs.FSNamesystem=DEBUG\nlog4j.logger.org.apache.hadoop.hbase=INFO\n# Make these two classes INFO-level. Make them DEBUG to see more zk debug.\nlog4j.logger.org.apache.hadoop.hbase.zookeeper.ZKUtil=INFO\nlog4j.logger.org.apache.hadoop.hbase.zookeeper.ZooKeeperWatcher=INFO\n#log4j.logger.org.apache.hadoop.dfs=DEBUG\n# Set this class to log INFO only otherwise its OTT\n# Enable this to get detailed connection error/retry logging.\n# log4j.logger.org.apache.hadoop.hbase.client.HConnectionManager$HConnectionImplementation=TRACE\n\n\n# Uncomment this line to enable tracing on _every_ RPC call (this can be a lot of output)\n#log4j.logger.org.apache.hadoop.ipc.HBaseServer.trace=DEBUG\n\n# Uncomment the below if you want to remove logging of client region caching'\n# and scan of .META. messages\n# log4j.logger.org.apache.hadoop.hbase.client.HConnectionManager$HConnectionImplementation=INFO\n# log4j.logger.org.apache.hadoop.hbase.client.MetaScanner=INFO"
        }, 
        "ssl-server": {
            "ssl.server.keystore.location": "/etc/security/serverKeys/keystore.jks", 
            "ssl.server.keystore.keypassword": "bigdata", 
            "ssl.server.truststore.location": "/etc/security/serverKeys/all.jks", 
            "ssl.server.keystore.password": "bigdata", 
            "ssl.server.truststore.password": "bigdata", 
            "ssl.server.truststore.type": "jks", 
            "ssl.server.keystore.type": "jks", 
            "ssl.server.truststore.reload.interval": "10000"
        }, 
        "webhcat-site": {
            "templeton.hive.properties": "hive.metastore.local=false,hive.metastore.uris=thrift://c6402.ambari.apache.org:9083,hive.metastore.sasl.enabled=false,hive.metastore.execute.setugi=true", 
            "templeton.hadoop.conf.dir": "/etc/hadoop/conf", 
            "templeton.port": "50111", 
            "templeton.hive.home": "hive.tar.gz/hive", 
            "templeton.hcat": "/usr/phd/${hdp.version}/hive/bin/hcat", 
            "templeton.exec.timeout": "60000", 
            "templeton.hcat.home": "hive.tar.gz/hive/hcatalog", 
            "templeton.sqoop.home": "sqoop.tar.gz/sqoop", 
            "templeton.python": "${env.PYTHON_CMD}", 
            "templeton.sqoop.archive": "hdfs:///phd/apps/${hdp.version}/sqoop/sqoop.tar.gz", 
            "templeton.libjars": "/usr/phd/${hdp.version}/zookeeper/zookeeper.jar,/usr/phd/${hdp.version}/hive/lib/hive-common.jar", 
            "templeton.hadoop": "/usr/phd/${hdp.version}/hadoop/bin/hadoop", 
            "templeton.override.enabled": "false", 
            "templeton.jar": "/usr/phd/${hdp.version}/hive/share/webhcat/svr/lib/hive-webhcat-*.jar", 
            "templeton.storage.class": "org.apache.hive.hcatalog.templeton.tool.ZooKeeperStorage", 
            "templeton.hive.extra.files": "/usr/phd/${hdp.version}/tez/conf/tez-site.xml,/usr/phd/${hdp.version}/tez,/usr/phd/${hdp.version}/tez/lib", 
            "templeton.hive.path": "hive.tar.gz/hive/bin/hive", 
            "templeton.pig.path": "pig.tar.gz/pig/bin/pig", 
            "templeton.sqoop.path": "sqoop.tar.gz/sqoop/bin/sqoop", 
            "templeton.zookeeper.hosts": "c6403.ambari.apache.org:2181,c6402.ambari.apache.org:2181,c6401.ambari.apache.org:2181", 
            "templeton.hive.archive": "hdfs:///phd/apps/${hdp.version}/hive/hive.tar.gz", 
            "templeton.streaming.jar": "hdfs:///phd/apps/${hdp.version}/mapreduce/hadoop-streaming.jar", 
            "templeton.pig.archive": "hdfs:///phd/apps/${hdp.version}/pig/pig.tar.gz"
        }, 
        "hbase-env": {
            "hbase_pid_dir": "/var/run/hbase", 
            "phoenix_sql_enabled": "false", 
            "hbase_user_nproc_limit": "16000", 
            "hbase_regionserver_xmn_max": "512", 
            "hbase_regionserver_xmn_ratio": "0.2", 
            "hbase_java_io_tmpdir": "/tmp", 
            "hbase_user": "hbase", 
            "hbase_master_heapsize": "1024", 
            "hbase_user_nofile_limit": "32000", 
            "content": "\n# Set environment variables here.\n\n# The java implementation to use. Java 1.6 required.\nexport JAVA_HOME={{java64_home}}\n\n# HBase Configuration directory\nexport HBASE_CONF_DIR=${HBASE_CONF_DIR:-{{hbase_conf_dir}}}\n\n# Extra Java CLASSPATH elements. Optional.\nexport HBASE_CLASSPATH=${HBASE_CLASSPATH}\n\n\n# The maximum amount of heap to use, in MB. Default is 1000.\n# export HBASE_HEAPSIZE=1000\n\n# Extra Java runtime options.\n# Below are what we set by default. May only work with SUN JVM.\n# For more on why as well as other possible settings,\n# see http://wiki.apache.org/hadoop/PerformanceTuning\nexport SERVER_GC_OPTS=\"-verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:{{log_dir}}/gc.log-`date +'%Y%m%d%H%M'`\"\n# Uncomment below to enable java garbage collection logging.\n# export HBASE_OPTS=\"$HBASE_OPTS -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:$HBASE_HOME/logs/gc-hbase.log\"\n\n# Uncomment and adjust to enable JMX exporting\n# See jmxremote.password and jmxremote.access in $JRE_HOME/lib/management to configure remote password access.\n# More details at: http://java.sun.com/javase/6/docs/technotes/guides/management/agent.html\n#\n# export HBASE_JMX_BASE=\"-Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false\"\n# If you want to configure BucketCache, specify '-XX: MaxDirectMemorySize=' with proper direct memory size\n# export HBASE_THRIFT_OPTS=\"$HBASE_JMX_BASE -Dcom.sun.management.jmxremote.port=10103\"\n# export HBASE_ZOOKEEPER_OPTS=\"$HBASE_JMX_BASE -Dcom.sun.management.jmxremote.port=10104\"\n\n# File naming hosts on which HRegionServers will run. $HBASE_HOME/conf/regionservers by default.\nexport HBASE_REGIONSERVERS=${HBASE_CONF_DIR}/regionservers\n\n# Extra ssh options. Empty by default.\n# export HBASE_SSH_OPTS=\"-o ConnectTimeout=1 -o SendEnv=HBASE_CONF_DIR\"\n\n# Where log files are stored. $HBASE_HOME/logs by default.\nexport HBASE_LOG_DIR={{log_dir}}\n\n# A string representing this instance of hbase. $USER by default.\n# export HBASE_IDENT_STRING=$USER\n\n# The scheduling priority for daemon processes. See 'man nice'.\n# export HBASE_NICENESS=10\n\n# The directory where pid files are stored. /tmp by default.\nexport HBASE_PID_DIR={{pid_dir}}\n\n# Seconds to sleep between slave commands. Unset by default. This\n# can be useful in large clusters, where, e.g., slave rsyncs can\n# otherwise arrive faster than the master can service them.\n# export HBASE_SLAVE_SLEEP=0.1\n\n# Tell HBase whether it should manage it's own instance of Zookeeper or not.\nexport HBASE_MANAGES_ZK=false\n\n{% if java_version < 8 %}\nJDK_DEPENDED_OPTS=\"-XX:PermSize=128m -XX:MaxPermSize=128m\"\n{% endif %}\n      \n{% if security_enabled %}\nexport HBASE_OPTS=\"$HBASE_OPTS -XX:+UseConcMarkSweepGC -XX:ErrorFile={{log_dir}}/hs_err_pid%p.log -Djava.security.auth.login.config={{client_jaas_config_file}} -Djava.io.tmpdir={{java_io_tmpdir}}\"\nexport HBASE_MASTER_OPTS=\"$HBASE_MASTER_OPTS -Xmx{{master_heapsize}} -Djava.security.auth.login.config={{master_jaas_config_file}} $JDK_DEPENDED_OPTS\"\nexport HBASE_REGIONSERVER_OPTS=\"$HBASE_REGIONSERVER_OPTS -Xmn{{regionserver_xmn_size}} -XX:CMSInitiatingOccupancyFraction=70  -Xms{{regionserver_heapsize}} -Xmx{{regionserver_heapsize}} -Djava.security.auth.login.config={{regionserver_jaas_config_file}} $JDK_DEPENDED_OPTS\"\nexport PHOENIX_QUERYSERVER_OPTS=\"$PHOENIX_QUERYSERVER_OPTS -Djava.security.auth.login.config={{queryserver_jaas_config_file}}\"\n{% else %}\nexport HBASE_OPTS=\"$HBASE_OPTS -XX:+UseConcMarkSweepGC -XX:ErrorFile={{log_dir}}/hs_err_pid%p.log -Djava.io.tmpdir={{java_io_tmpdir}}\"\nexport HBASE_MASTER_OPTS=\"$HBASE_MASTER_OPTS -Xmx{{master_heapsize}} $JDK_DEPENDED_OPTS\"\nexport HBASE_REGIONSERVER_OPTS=\"$HBASE_REGIONSERVER_OPTS -Xmn{{regionserver_xmn_size}} -XX:CMSInitiatingOccupancyFraction=70  -Xms{{regionserver_heapsize}} -Xmx{{regionserver_heapsize}} $JDK_DEPENDED_OPTS\"\n{% endif %}\n\n# HBase off-heap MaxDirectMemorySize\nexport HBASE_REGIONSERVER_OPTS=\"$HBASE_REGIONSERVER_OPTS {% if hbase_max_direct_memory_size %} -XX:MaxDirectMemorySize={{hbase_max_direct_memory_size}}m {% endif %}\"", 
            "hbase_regionserver_heapsize": "1024", 
            "hbase_log_dir": "/var/log/hbase"
        }, 
        "ranger-hive-audit": {}, 
        "hawq-sysctl-env": {
            "kernel.shmall": "4000000000", 
            "kernel.msgmnb": "65536", 
            "net.ipv4.ip_forward": "0", 
            "kernel.shmmni": "4096", 
            "kernel.msgmni": "2048", 
            "net.core.rmem_max": "2097152", 
            "kernel.threads-max": "798720", 
            "net.ipv4.ip_local_port_range": "1281 65535", 
            "net.ipv4.tcp_tw_recycle": "1", 
            "kernel.pid_max": "798720", 
            "kernel.shmmax": "500000000", 
            "net.ipv4.conf.all.arp_filter": "1", 
            "kernel.sem": "250 512000 100 2048", 
            "net.ipv4.conf.default.accept_source_route": "0", 
            "kernel.core_uses_pid": "1", 
            "vm.overcommit_memory": "1", 
            "kernel.msgmax": "65536", 
            "net.ipv4.tcp_syncookies": "0", 
            "net.ipv4.tcp_max_syn_backlog": "200000", 
            "fs.nr_open": "3000000", 
            "net.core.wmem_max": "2097152", 
            "net.core.netdev_max_backlog": "200000", 
            "kernel.sysrq": "1"
        }, 
        "pxf-site": {
            "pxf.service.kerberos.keytab": "/etc/security/keytabs/pxf.service.keytab"
        }, 
        "zoo.cfg": {
            "clientPort": "2181", 
            "autopurge.purgeInterval": "24", 
            "syncLimit": "5", 
            "dataDir": "/hadoop/zookeeper", 
            "initLimit": "10", 
            "tickTime": "2000", 
            "autopurge.snapRetainCount": "30"
        }, 
        "ranger-hdfs-security": {
            "ranger.plugin.hdfs.policy.source.impl": "org.apache.ranger.admin.client.RangerAdminRESTClient", 
            "ranger.plugin.hdfs.service.name": "{{repo_name}}", 
            "ranger.plugin.hdfs.policy.cache.dir": "/etc/ranger/{{repo_name}}/policycache", 
            "ranger.plugin.hdfs.policy.pollIntervalMs": "30000", 
            "ranger.plugin.hdfs.policy.rest.url": "{{policymgr_mgr_url}}", 
            "ranger.plugin.hdfs.policy.rest.ssl.config.file": "/etc/hadoop/conf/ranger-policymgr-ssl.xml", 
            "xasecure.add-hadoop-authorization": "true"
        }, 
        "hiveserver2-site": {
            "hive.security.authorization.enabled": "false"
        }, 
        "ranger-hbase-policymgr-ssl": {}, 
        "mapred-site": {
            "yarn.app.mapreduce.am.log.level": "INFO", 
            "mapreduce.jobhistory.address": "c6402.ambari.apache.org:10020", 
            "mapreduce.cluster.administrators": " hadoop", 
            "mapreduce.reduce.input.buffer.percent": "0.0", 
            "mapreduce.output.fileoutputformat.compress": "false", 
            "mapreduce.framework.name": "yarn", 
            "mapreduce.map.speculative": "false", 
            "mapreduce.reduce.shuffle.merge.percent": "0.66", 
            "yarn.app.mapreduce.am.resource.mb": "512", 
            "mapreduce.map.java.opts": "-Xmx410m", 
            "mapreduce.application.classpath": "$PWD/mr-framework/hadoop/share/hadoop/mapreduce/*:$PWD/mr-framework/hadoop/share/hadoop/mapreduce/lib/*:$PWD/mr-framework/hadoop/share/hadoop/common/*:$PWD/mr-framework/hadoop/share/hadoop/common/lib/*:$PWD/mr-framework/hadoop/share/hadoop/yarn/*:$PWD/mr-framework/hadoop/share/hadoop/yarn/lib/*:$PWD/mr-framework/hadoop/share/hadoop/hdfs/*:$PWD/mr-framework/hadoop/share/hadoop/hdfs/lib/*:$PWD/mr-framework/hadoop/share/hadoop/tools/lib/*:/usr/phd/${hdp.version}/hadoop/lib/hadoop-lzo-0.6.0.${hdp.version}.jar:/etc/hadoop/conf/secure", 
            "mapreduce.job.reduce.slowstart.completedmaps": "0.05", 
            "mapreduce.output.fileoutputformat.compress.type": "BLOCK", 
            "mapreduce.reduce.speculative": "false", 
            "mapreduce.reduce.java.opts": "-Xmx756m", 
            "mapreduce.am.max-attempts": "2", 
            "yarn.app.mapreduce.am.admin-command-opts": "-Dhdp.version=${hdp.version}", 
            "mapreduce.reduce.log.level": "INFO", 
            "mapreduce.map.sort.spill.percent": "0.7", 
            "mapreduce.job.emit-timeline-data": "false", 
            "mapreduce.application.framework.path": "/phd/apps/${hdp.version}/mapreduce/mapreduce.tar.gz#mr-framework", 
            "mapreduce.task.timeout": "300000", 
            "mapreduce.map.memory.mb": "512", 
            "mapreduce.task.io.sort.factor": "100", 
            "mapreduce.jobhistory.intermediate-done-dir": "/mr-history/tmp", 
            "mapreduce.reduce.memory.mb": "1024", 
            "mapreduce.jobhistory.recovery.enable": "true", 
            "mapreduce.job.counters.max": "130", 
            "mapreduce.map.log.level": "INFO", 
            "mapreduce.shuffle.port": "13562", 
            "mapreduce.jobhistory.recovery.store.leveldb.path": "/hadoop/mapreduce/jhs", 
            "mapreduce.reduce.shuffle.fetch.retry.timeout-ms": "30000", 
            "mapreduce.admin.user.env": "LD_LIBRARY_PATH=/usr/phd/${hdp.version}/hadoop/lib/native:/usr/phd/${hdp.version}/hadoop/lib/native/Linux-amd64-64", 
            "mapreduce.jobhistory.recovery.store.class": "org.apache.hadoop.mapreduce.v2.hs.HistoryServerLeveldbStateStoreService", 
            "mapreduce.map.output.compress": "false", 
            "yarn.app.mapreduce.am.staging-dir": "/user", 
            "mapreduce.reduce.shuffle.parallelcopies": "30", 
            "yarn.app.mapreduce.am.command-opts": "-Xmx410m", 
            "mapreduce.jobhistory.webapp.address": "c6402.ambari.apache.org:19888", 
            "mapreduce.jobhistory.done-dir": "/mr-history/done", 
            "mapreduce.admin.reduce.child.java.opts": "-server -XX:NewRatio=8 -Djava.net.preferIPv4Stack=true -Dhdp.version=${hdp.version}", 
            "mapreduce.reduce.shuffle.fetch.retry.enabled": "1", 
            "mapreduce.task.io.sort.mb": "358", 
            "mapreduce.reduce.shuffle.input.buffer.percent": "0.7", 
            "mapreduce.reduce.shuffle.fetch.retry.interval-ms": "1000", 
            "mapreduce.jobhistory.bind-host": "0.0.0.0", 
            "mapreduce.admin.map.child.java.opts": "-server -XX:NewRatio=8 -Djava.net.preferIPv4Stack=true -Dhdp.version=${hdp.version}"
        }, 
        "cluster-env": {
            "managed_hdfs_resource_property_names": "",
            "security_enabled": "false", 
            "smokeuser_keytab": "/etc/security/keytabs/smokeuser.headless.keytab", 
            "ignore_groupsusers_create": "false", 
            "override_uid": "true", 
            "kerberos_domain": "EXAMPLE.COM", 
            "repo_suse_rhel_template": "[{{repo_id}}]\nname={{repo_id}}\n{% if mirror_list %}mirrorlist={{mirror_list}}{% else %}baseurl={{base_url}}{% endif %}\n\npath=/\nenabled=1\ngpgcheck=0", 
            "user_group": "hadoop", 
            "command_retry_enabled": "true", 
            "commands_to_retry": "INSTALL,START", 
            "smokeuser": "ambari-qa", 
            "command_retry_max_time_in_sec": "600", 
            "repo_ubuntu_template": "{{package_type}} {{base_url}} {{components}}"
        }, 
        "zookeeper-env": {
            "zk_log_dir": "/var/log/zookeeper", 
            "content": "\nexport JAVA_HOME={{java64_home}}\nexport ZOOKEEPER_HOME={{zk_home}}\nexport ZOO_LOG_DIR={{zk_log_dir}}\nexport ZOOPIDFILE={{zk_pid_file}}\nexport SERVER_JVMFLAGS={{zk_server_heapsize}}\nexport JAVA=$JAVA_HOME/bin/java\nexport CLASSPATH=$CLASSPATH:/usr/share/zookeeper/*\n\n{% if security_enabled %}\nexport SERVER_JVMFLAGS=\"$SERVER_JVMFLAGS -Djava.security.auth.login.config={{zk_server_jaas_file}}\"\nexport CLIENT_JVMFLAGS=\"$CLIENT_JVMFLAGS -Djava.security.auth.login.config={{zk_client_jaas_file}}\"\n{% endif %}\n    ", 
            "zk_pid_dir": "/var/run/zookeeper", 
            "zk_user": "zookeeper"
        }, 
        "pig-log4j": {
            "content": "\n#\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n#\n#\n\n# ***** Set root logger level to DEBUG and its only appender to A.\nlog4j.logger.org.apache.pig=info, A\n\n# ***** A is set to be a ConsoleAppender.\nlog4j.appender.A=org.apache.log4j.ConsoleAppender\n# ***** A uses PatternLayout.\nlog4j.appender.A.layout=org.apache.log4j.PatternLayout\nlog4j.appender.A.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n"
        }, 
        "ranger-hbase-security": {}
    }, 
    "configurationTags": {
        "mapred-site": {
            "tag": "TOPOLOGY_RESOLVED"
        }, 
        "ssl-client": {
            "tag": "TOPOLOGY_RESOLVED"
        }, 
        "ranger-yarn-plugin-properties": {
            "tag": "TOPOLOGY_RESOLVED"
        }, 
        "ranger-hdfs-policymgr-ssl": {
            "tag": "TOPOLOGY_RESOLVED"
        }, 
        "pig-env": {
            "tag": "version1452639308147"
        }, 
        "ranger-hbase-audit": {
            "tag": "version1452639308147"
        }, 
        "yarn-env": {
            "tag": "TOPOLOGY_RESOLVED"
        }, 
        "ranger-hive-policymgr-ssl": {
            "tag": "version1452639308147"
        }, 
        "yarn-client": {
            "tag": "version1452553270170"
        }, 
        "ranger-hive-security": {
            "tag": "version1452639308147"
        }, 
        "hbase-policy": {
            "tag": "version1452639308147"
        }, 
        "webhcat-env": {
            "tag": "version1452639308147"
        }, 
        "hcat-env": {
            "tag": "version1452639308147"
        }, 
        "tez-site": {
            "tag": "INITIAL"
        }, 
        "hdfs-site": {
            "tag": "TOPOLOGY_RESOLVED"
        }, 
        "yarn-log4j": {
            "tag": "TOPOLOGY_RESOLVED"
        }, 
        "tez-env": {
            "tag": "INITIAL"
        }, 
        "hbase-site": {
            "tag": "version1452639308147"
        }, 
        "hadoop-policy": {
            "tag": "TOPOLOGY_RESOLVED"
        }, 
        "hdfs-log4j": {
            "tag": "TOPOLOGY_RESOLVED"
        }, 
        "ranger-hbase-plugin-properties": {
            "tag": "version1452639308147"
        }, 
        "hive-exec-log4j": {
            "tag": "version1452639308147"
        }, 
        "ranger-yarn-audit": {
            "tag": "TOPOLOGY_RESOLVED"
        }, 
        "mapred-env": {
            "tag": "TOPOLOGY_RESOLVED"
        }, 
        "yarn-site": {
            "tag": "version1452553056496"
        }, 
        "hawq-env": {
            "tag": "version1452553270170"
        }, 
        "ranger-hive-plugin-properties": {
            "tag": "version1452639308147"
        }, 
        "ranger-hdfs-plugin-properties": {
            "tag": "TOPOLOGY_RESOLVED"
        }, 
        "zoo.cfg": {
            "tag": "INITIAL"
        }, 
        "pig-properties": {
            "tag": "version1452639308147"
        }, 
        "hawq-limits-env": {
            "tag": "version1452553270170"
        }, 
        "ranger-hdfs-audit": {
            "tag": "TOPOLOGY_RESOLVED"
        }, 
        "core-site": {
            "tag": "version1452639308135"
        }, 
        "hive-env": {
            "tag": "version1452639308147"
        }, 
        "hawq-site": {
            "tag": "version1452553270170"
        }, 
        "webhcat-log4j": {
            "tag": "version1452639308147"
        }, 
        "ranger-yarn-policymgr-ssl": {
            "tag": "TOPOLOGY_RESOLVED"
        }, 
        "hawq-check-env": {
            "tag": "version1452553270170"
        }, 
        "hadoop-env": {
            "tag": "TOPOLOGY_RESOLVED"
        }, 
        "hdfs-client": {
            "tag": "version1452553270170"
        }, 
        "zookeeper-log4j": {
            "tag": "INITIAL"
        }, 
        "hive-site": {
            "tag": "version1452639308147"
        }, 
        "ranger-yarn-security": {
            "tag": "TOPOLOGY_RESOLVED"
        }, 
        "capacity-scheduler": {
            "tag": "TOPOLOGY_RESOLVED"
        }, 
        "hbase-log4j": {
            "tag": "version1452639308147"
        }, 
        "ssl-server": {
            "tag": "TOPOLOGY_RESOLVED"
        }, 
        "webhcat-site": {
            "tag": "version1452639308147"
        }, 
        "hbase-env": {
            "tag": "version1452639308147"
        }, 
        "zookeeper-env": {
            "tag": "INITIAL"
        }, 
        "hawq-sysctl-env": {
            "tag": "version1452553270170"
        }, 
        "pxf-site": {
            "tag": "version1452553270170"
        }, 
        "hive-log4j": {
            "tag": "version1452639308147"
        }, 
        "ranger-hdfs-security": {
            "tag": "TOPOLOGY_RESOLVED"
        }, 
        "hiveserver2-site": {
            "tag": "version1452639308147"
        }, 
        "ranger-hbase-policymgr-ssl": {
            "tag": "version1452639308147"
        }, 
        "ranger-hbase-security": {
            "tag": "version1452639308147"
        }, 
        "ranger-hive-audit": {
            "tag": "version1452639308147"
        }, 
        "pig-log4j": {
            "tag": "version1452639308147"
        }, 
        "cluster-env": {
            "tag": "TOPOLOGY_RESOLVED"
        }
    }, 
    "commandId": "159-0", 
    "forceRefreshConfigTags": [], 
    "clusterHostInfo": {
        "snamenode_host": [
            "c6402.ambari.apache.org"
        ], 
        "nm_hosts": [
            "c6402.ambari.apache.org", 
            "c6403.ambari.apache.org", 
            "c6401.ambari.apache.org"
        ], 
        "hive_metastore_host": [
            "c6402.ambari.apache.org"
        ], 
        "slave_hosts": [
            "c6402.ambari.apache.org", 
            "c6403.ambari.apache.org", 
            "c6401.ambari.apache.org"
        ], 
        "hive_server_host": [
            "c6402.ambari.apache.org"
        ], 
        "hawqmaster_hosts": [
            "c6403.ambari.apache.org"
        ], 
        "hbase_rs_hosts": [
            "c6403.ambari.apache.org"
        ], 
        "webhcat_server_host": [
            "c6402.ambari.apache.org"
        ], 
        "ambari_server_host": [
            "c6401.ambari.apache.org"
        ], 
        "zookeeper_hosts": [
            "c6402.ambari.apache.org", 
            "c6403.ambari.apache.org", 
            "c6401.ambari.apache.org"
        ], 
        "hawqstandby_hosts": [
            "c6402.ambari.apache.org"
        ], 
        "app_timeline_server_hosts": [
            "c6402.ambari.apache.org"
        ], 
        "hawqsegment_hosts": [
            "c6402.ambari.apache.org", 
            "c6403.ambari.apache.org", 
            "c6401.ambari.apache.org"
        ], 
        "all_ping_ports": [
            "8670", 
            "8670", 
            "8670"
        ], 
        "rm_host": [
            "c6402.ambari.apache.org"
        ], 
        "all_hosts": [
            "c6402.ambari.apache.org", 
            "c6403.ambari.apache.org", 
            "c6401.ambari.apache.org"
        ], 
        "all_racks": [
            "/default-rack", 
            "/default-rack", 
            "/default-rack"
        ], 
        "all_ipv4_ips": [
            "192.168.64.102", 
            "192.168.64.103", 
            "192.168.64.101"
        ], 
        "hs_host": [
            "c6402.ambari.apache.org"
        ], 
        "namenode_host": [
            "c6401.ambari.apache.org"
        ], 
        "hbase_master_hosts": [
            "c6401.ambari.apache.org"
        ], 
        "pxf_hosts": [
            "c6402.ambari.apache.org", 
            "c6403.ambari.apache.org", 
            "c6401.ambari.apache.org"
        ], 
        "hive_mysql_host": [
            "c6402.ambari.apache.org"
        ]
    }
}
