<?xml version="1.0"?>
<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<upgrade xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="upgrade-pack.xsd">
  <target>3.0.*.*</target>
  <target-stack>HDP-3.0</target-stack>
  <downgrade-allowed>false</downgrade-allowed>
  <type>NON_ROLLING</type>
  <prerequisite-checks>
    <check>org.apache.ambari.server.checks.AtlasMigrationPropertyCheck</check>
    <check>org.apache.ambari.server.checks.AmbariMetricsHadoopSinkVersionCompatibilityCheck</check>
    <configuration>
      <!-- Configuration properties for all pre-reqs including required pre-reqs -->
      <check-properties name="org.apache.ambari.server.checks.AmbariMetricsHadoopSinkVersionCompatibilityCheck">
        <property name="min-hadoop-sink-version">2.7.0.0</property>
        <property name="request-status-check-retry-interval">6000</property>
        <property name="request-status-check-num-retries">20</property>
      </check-properties>
    </configuration>
  </prerequisite-checks>
  <order>
    <group xsi:type="cluster" name="PRE_CLUSTER" title="Prepare Upgrade">
      <direction>UPGRADE</direction>

      <skippable>true</skippable>
      <supports-auto-skip-failure>false</supports-auto-skip-failure>

      <execute-stage service="YARN" component="RESOURCEMANAGER" title="Stop YARN Queues">
        <condition xsi:type="config" type="yarn-site"
                   property="yarn.resourcemanager.work-preserving-recovery.enabled" value="true"
                   comparison="not-equals"/>
        <task xsi:type="manual">
          <message>Before continuing, please stop all YARN queues.</message>
        </task>
      </execute-stage>

      <execute-stage service="STORM" component="NIMBUS" title="Stop Storm Topologies">
        <task xsi:type="manual">
          <message>Before continuing, please deactivate and kill any currently running topologies.
          </message>
        </task>
      </execute-stage>

      <execute-stage service="TEZ" component="TEZ_CLIENT" title="Check Tez Tarball">
        <task xsi:type="execute" hosts="any">
          <script>scripts/pre_upgrade.py</script>
          <function>prepare</function>
        </task>
      </execute-stage>

      <execute-stage service="HIVE" component="MYSQL_SERVER" title="Backup Local Hive Metastore Database">
        <task xsi:type="execute" hosts="master">
          <script>scripts/pre_upgrade.py</script>
          <function>backup_hive_metastore_database_local</function>
        </task>
      </execute-stage>

      <execute-stage service="HIVE" component="HIVE_METASTORE" title="Backup External Metastore Database">
        <condition xsi:type="config" type="hive-env" property="hive_database" value="New MySQL Database" comparison="not-equals"/>
        <task xsi:type="execute" hosts="any">
          <script>scripts/pre_upgrade.py</script>
          <function>backup_hive_metastore_database_external</function>
        </task>
      </execute-stage>

      <execute-stage service="HIVE" component="HIVE_METASTORE" title="Check Backup External Metastore Database">
        <condition xsi:type="config" type="hive-env" property="hive_database" value="New MySQL Database" comparison="not-equals"/>
        <task xsi:type="manual">
          <message>The previous step may not have been successful if the Hive Metastore database is on a different host then the Hive Metastore.</message>
          <message>Please check the output log of the step, Look for the text "MANUAL DB DUMP REQUIRED!!".</message>
          <message>If it is present please follow the instructions there.</message>
        </task>
      </execute-stage>

      <execute-stage service="HIVE" component="HIVE_METASTORE" title="Register MySQL driver for Hive">
        <condition xsi:type="config" type="hive-env" property="hive_database_type" value="mysql" comparison="equals"/>
        <task xsi:type="manual">
          <message>Please download the java driver for MySQL from https://dev.mysql.com/downloads/connector/j/ on the ambari host.</message>
          <message>Once downloaded to the Ambari Server host, run:</message>
          <message>ambari-server setup --jdbc-db=mysql --jdbc-driver=/path/to/mysql/com.mysql.jdbc.Driver</message>
        </task>
      </execute-stage>

      <execute-stage service="HIVE" component="HIVE_METASTORE" title="Register PostgreSQL driver for Hive">
        <condition xsi:type="config" type="hive-env" property="hive_database_type" value="postgres" comparison="equals"/>
        <task xsi:type="manual">
          <message>Please download the java driver for PostgreSQL from https://jdbc.postgresql.org/ on the ambari host.</message>
          <message>Once downloaded to the Ambari Server host, run:</message>
          <message>ambari-server setup --jdbc-db=postgres --jdbc-driver=/path/to/postgres/org.postgresql.Driver</message>
        </task>
      </execute-stage>

      <execute-stage service="HIVE" component="HIVE_METASTORE" title="Register Oracle driver for Hive">
        <condition xsi:type="config" type="hive-env" property="hive_database_type" value="oracle" comparison="equals"/>
        <task xsi:type="manual">
          <message>Please download the java driver for Oracle from http://www.oracle.com/technetwork/database/features/jdbc/index-091264.html on the ambari host.</message>
          <message>Once downloaded to the Ambari Server host, run:</message>
          <message>ambari-server setup --jdbc-db=oracle --jdbc-driver=/path/to/oracle/oracle.jdbc.driver.OracleDriver</message>
        </task>
      </execute-stage>

      <execute-stage service="HIVE" component="HIVE_METASTORE" title="Pre Upgrade Hive Table conversion notification">
        <task xsi:type="manual">
          <message>Please note that all managed tables must become Acid or MM tables in Hive 3.0.</message>
          <message>All tables will be compacted. No more Update/Delete/Merge (with update/delete) can be run after the upgrade.</message>
          <message>This may be time consuming, you may do it manually on host {{hosts.all}}</message>
          <message>Please note that after this step Hive Servers will be stopped, and the same command will be executed converting the tables left still unconverted.</message>
        </task>
      </execute-stage>
    </group>

    <group xsi:type="stop" name="STOP_HIVE_SERVERS" title="Stop Hive Servers">
      <service name="HIVE">
        <component>HIVE_SERVER</component>
        <component>HIVE_SERVER_INTERACTIVE</component>
      </service>
    </group>

    <group xsi:type="cluster" name="CONVERT_HIVE_TABLES" title="Convert Hive Tables">
      <execute-stage service="HIVE" component="HIVE_METASTORE" title="Convert Hive Tables">
        <task xsi:type="execute" hosts="any">
          <script>scripts/pre_upgrade.py</script>
          <function>convert_tables</function>
        </task>
      </execute-stage>
    </group>

    <group xsi:type="stop" name="STOP_HIGH_LEVEL_SERVICE_COMPONENTS"  title="Stop Components for High-Level Services">
      <service-check>false</service-check>
      <skippable>true</skippable>
      <supports-auto-skip-failure>false</supports-auto-skip-failure>
      <parallel-scheduler/>

      <service name="ATLAS">
        <component>ATLAS_SERVER</component>
      </service>

      <service name="FLUME">
        <component>FLUME_HANDLER</component>
      </service>

      <service name="ACCUMULO">
        <component>ACCUMULO_TRACER</component>
        <component>ACCUMULO_GC</component>
        <component>ACCUMULO_TSERVER</component>
        <component>ACCUMULO_MONITOR</component>
        <component>ACCUMULO_MASTER</component>
      </service>

      <service name="STORM">
        <component>DRPC_SERVER</component>
        <component>STORM_UI_SERVER</component>
        <component>SUPERVISOR</component>
        <component>NIMBUS</component>
      </service>

      <service name="KNOX">
        <component>KNOX_GATEWAY</component>
      </service>

      <service name="FALCON">
        <component>FALCON_SERVER</component>
      </service>

      <service name="OOZIE">
        <component>OOZIE_SERVER</component>
      </service>

      <service name="SPARK">
        <component>SPARK_JOBHISTORYSERVER</component>
        <component>SPARK_THRIFTSERVER</component>
        <component>LIVY_SERVER</component>
      </service>

      <service name="SPARK2">
        <component>SPARK2_JOBHISTORYSERVER</component>
        <component>SPARK2_THRIFTSERVER</component>
        <component>LIVY2_SERVER</component>
      </service>

      <service name="ZEPPELIN">
        <component>ZEPPELIN_MASTER</component>
      </service>

      <service name="HIVE">
        <component>WEBHCAT_SERVER</component>
        <component>HIVE_METASTORE</component>
      </service>

      <service name="YARN">
        <component>NODEMANAGER</component>
        <component>RESOURCEMANAGER</component>
        <component>APP_TIMELINE_SERVER</component>
      </service>

      <service name="MAPREDUCE2">
        <component>HISTORYSERVER</component>
      </service>

      <service name="DRUID">
        <component>DRUID_HISTORICAL</component>
        <component>DRUID_MIDDLEMANAGER</component>
        <component>DRUID_BROKER</component>
        <component>DRUID_ROUTER</component>
        <component>DRUID_COORDINATOR</component>
        <component>DRUID_OVERLORD</component>
        <component>DRUID_SUPERSET</component>
      </service>
      <service name="SUPERSET">
        <component>SUPERSET</component>
      </service>
    </group>

    <group xsi:type="cluster" name="Backups" title="Perform Backups">
      <direction>UPGRADE</direction>
      <skippable>true</skippable>
      <supports-auto-skip-failure>false</supports-auto-skip-failure>

      <execute-stage service="OOZIE" component="OOZIE_SERVER" title="Backup Oozie Database">
        <task xsi:type="manual">
          <message>Before continuing, please backup the Oozie Server database referenced by the
            Oozie server
            located on {{hosts.all}}.
          </message>
        </task>
      </execute-stage>

      <execute-stage service="HBASE" component="HBASE_MASTER" title="Snapshot HBASE">
        <task xsi:type="execute" hosts="master">
          <script>scripts/hbase_upgrade.py</script>
          <function>take_snapshot</function>
        </task>
      </execute-stage>

      <execute-stage service="HDFS" component="NAMENODE" title="Prepare HDFS">
        <task xsi:type="execute" hosts="master">
          <script>scripts/namenode.py</script>
          <function>prepare_express_upgrade</function>
        </task>
      </execute-stage>

      <execute-stage service="RANGER" component="RANGER_ADMIN" title="Backup Ranger Database">
        <task xsi:type="manual">
          <message>Before continuing, please backup the Ranger Admin database on the following
            host(s):
            {{hosts.all}}.
          </message>
        </task>
      </execute-stage>

      <execute-stage service="RANGER_KMS" component="RANGER_KMS_SERVER"
                     title="Backup Ranger KMS Database">
        <task xsi:type="manual">
          <message>Before continuing, please backup Ranger KMS database on the following host(s):
            {{hosts.all}}.
          </message>
        </task>
      </execute-stage>

      <execute-stage service="ZEPPELIN" component="ZEPPELIN_MASTER"
                     title="Pre Upgrade Zeppelin notebooks Backup">
        <task xsi:type="manual">
          <message>Before continuing, please backup Zeppelin notebooks directory on the following
            host(s):
            {{hosts.all}}.
          </message>
        </task>
      </execute-stage>

    </group>

    <group xsi:type="stop" name="STOP_LOW_LEVEL_SERVICE_COMPONENTS" title="Stop Components for Core Services">
      <service-check>false</service-check>
      <skippable>true</skippable>
      <supports-auto-skip-failure>false</supports-auto-skip-failure>
      <parallel-scheduler/>

      <service name="HBASE">
        <component>HBASE_REGIONSERVER</component>
        <component>HBASE_MASTER</component>
        <component>PHOENIX_QUERY_SERVER</component>
      </service>

      <service name="KAFKA">
        <component>KAFKA_BROKER</component>
      </service>

      <service name="AMBARI_METRICS">
        <component>METRICS_COLLECTOR</component>
        <component>METRICS_MONITOR</component>
        <component>METRICS_GRAFANA</component>
      </service>

      <service name="HDFS">
        <component>DATANODE</component>
        <component>NAMENODE</component>
        <component>SECONDARY_NAMENODE</component>
        <component>ZKFC</component>
        <component>JOURNALNODE</component>
        <component>NFS_GATEWAY</component>
      </service>

      <service name="RANGER">
        <component>RANGER_USERSYNC</component>
        <component>RANGER_ADMIN</component>
        <component>RANGER_TAGSYNC</component>
      </service>

      <service name="RANGER_KMS">
        <component>RANGER_KMS_SERVER</component>
      </service>

      <service name="ZOOKEEPER">
        <component>ZOOKEEPER_SERVER</component>
      </service>
    </group>

    <group xsi:type="cluster" name="Restore Backups" title="Restore Backups">
      <direction>DOWNGRADE</direction>
      <skippable>true</skippable>

      <!-- If the user attempts a downgrade after this point, they will need to restore backups
      before starting any of the services. -->

      <execute-stage service="OOZIE" component="OOZIE_SERVER" title="Restore Oozie Database">
        <task xsi:type="manual">
          <message>Before continuing, please restore the Oozie Server database referenced by the
            Oozie server
            located on {{hosts.all}}.
          </message>
        </task>
      </execute-stage>

      <execute-stage service="HIVE" component="HIVE_METASTORE" title="Restore Hive Metastore">
        <task xsi:type="manual">
          <message>Before continuing, please restore the Hive Metastore database referenced by the
            Hive
            Metastore service(s) located on the following host(s):: {{hosts.all}}.
          </message>
        </task>
      </execute-stage>

      <execute-stage service="RANGER" component="RANGER_ADMIN" title="Restore Ranger Database">
        <task xsi:type="manual">
          <message>Before continuing, please restore the Ranger Admin database and Ranger Audit
            database on
            the following host(s): {{hosts.all}}.
          </message>
        </task>
      </execute-stage>

      <execute-stage service="RANGER_KMS" component="RANGER_KMS_SERVER" title="Restore Ranger KMS Database">
        <task xsi:type="manual">
          <message>Before continuing, please restore Ranger KMS database</message>
        </task>
      </execute-stage>

      <execute-stage service="ZEPPELIN" component="ZEPPELIN_MASTER" title="Restore Zeppelin notebooks directory">
        <task xsi:type="manual">
          <message>Before continuing, please restore Zeppelin notebooks directory</message>
        </task>
      </execute-stage>
    </group>

    <!-- Since the add component task might need components which are to be removed, this should always be done after adding new components -->
    <group xsi:type="cluster" name="REMOVE_UNSUPPORTED_SERVICES"  title="Remove unsupported services and components">
      <execute-stage title="Remove unsupported services and components">
        <task xsi:type="server_action"
              class="org.apache.ambari.server.serveraction.upgrades.DeleteUnsupportedServicesAndComponents">
          <summary>Delete services and components which are removed from the new release</summary>
        </task>
      </execute-stage>
    </group>

    <!-- After processing this group, will change the effective Stack of the UpgradeContext object. -->
    <group xsi:type="update-stack" name="UPDATE_DESIRED_REPOSITORY_ID" title="Update Target Repositories">
      <execute-stage title="Update Target Repositories">
        <task xsi:type="server_action"
              class="org.apache.ambari.server.serveraction.upgrades.UpdateDesiredRepositoryAction"/>
      </execute-stage>
    </group>

    <!-- Add new components only after the desired stack has been moved -->
    <group xsi:type="cluster" name="ADD_HIVE_CLIENT_TO_SHS" title="Add Hive Client to Spark History Server">
      <direction>UPGRADE</direction>
      <skippable>true</skippable>
      <execute-stage service="SPARK2" title="History Server">
        <task xsi:type="add_component" service="HIVE" component="HIVE_CLIENT" host-service="SPARK2" host-component="SPARK2_JOBHISTORYSERVER" hosts="any">
          <summary>Add Hive Client to all History Servers</summary>
        </task>
      </execute-stage>
    </group>

    <!-- Add new components only after the desired stack has been moved -->
    <group xsi:type="cluster" name="ADD_YARN_COMPONENTS" title="Add New YARN Components">
      <direction>UPGRADE</direction>
      <skippable>true</skippable>
      <execute-stage service="YARN" title="Timeline Reader">
        <task xsi:type="add_component" service="YARN" component="TIMELINE_READER" host-service="YARN" host-component="APP_TIMELINE_SERVER" hosts="any">
          <summary>Add Timeline Reader to the cluster</summary>
        </task>
      </execute-stage>

      <execute-stage service="YARN" title="Registry DNS">
        <task xsi:type="add_component" service="YARN" component="YARN_REGISTRY_DNS" host-service="YARN" host-component="APP_TIMELINE_SERVER" hosts="any">
          <summary>Add Registry DNS to the cluster</summary>
        </task>
      </execute-stage>
    </group>

    <group xsi:type="cluster" name="Upgrade service configs" title="Upgrade service configs">
      <direction>UPGRADE</direction>   <!--  prevent config changes on downgrade -->
      <skippable>true</skippable>  <!-- May fix configuration problems manually -->

      <!--HDFS-->
      <execute-stage service="HDFS" component="NAMENODE" title="Remove temporary HDFS HA properties">
        <task xsi:type="configure" id="hdfs_remove_initial_ha_properties"/>
      </execute-stage>

      <execute-stage service="HDFS" component="NAMENODE" title="Enable USER variable for hadoop-env">
        <task xsi:type="configure" id="hdfs_fix_user_variable"/>
      </execute-stage>

      <execute-stage service="HDFS" component="NAMENODE" title="Convert HDP 2.6 variable naming to HDP 3.0">
        <task xsi:type="configure" id="hdp_30_hdfs_stack_variables_update"/>
      </execute-stage>

      <execute-stage service="HDFS" component="NAMENODE" title="Update HADOOP_SECURE_PID_DIR and HADOOP_SECURE_LOG_DIR">
        <task xsi:type="configure" id="hdp_30_hdfs_secure_variables_update"/>
      </execute-stage>

      <execute-stage service="HDFS" component="DATANODE" title="Enables SASL for authentication of data transfer protocol">
        <condition xsi:type="security" type="kerberos"/>
        <task xsi:type="configure" id="hdfs_set_data_transfer_protection"/>
      </execute-stage>

      <execute-stage service="HDFS" component="DATANODE" title="Encrypting the data transfered between hadoop services and clients">
        <condition xsi:type="security" type="kerberos"/>
        <task xsi:type="configure" id="hdfs_set_hadoop_rpc_protection_on_kerberized_cluster"/>
      </execute-stage>

      <execute-stage service="HDFS" component="HDFS_CLIENT" title="Set User-Agent">
        <task xsi:type="configure" id="hdfs_user_agent"/>
      </execute-stage>

      <!--YARN-->
      <execute-stage service="YARN" component="RESOURCEMANAGER" title="Remove invalid HADOOP_OPTS and YARN_OPTS">
        <task xsi:type="configure" id="hdp_30_remove_invalid_hadoop_and_yarn_opts"/>
      </execute-stage>

      <execute-stage service="YARN" component="RESOURCEMANAGER" title="Fix Hadoop and YARN loggers">
        <task xsi:type="configure" id="hdp_30_update_hadoop_and_yarn_loggers"/>
      </execute-stage>

      <!-- adds options required if Registry DNS is added -->
      <execute-stage service="YARN" component="RESOURCEMANAGER" title="Add Registry DNS OPTS">
        <task xsi:type="configure" id="hdp_30_add_registry_dns_secure_opts"/>
      </execute-stage>

      <execute-stage service="YARN" component="RESOURCEMANAGER" title="Add Secure PID and Log Directory Exports">
        <task xsi:type="configure" id="hdp_30_add_secure_pid_and_log_dirs"/>
      </execute-stage>

      <execute-stage service="YARN" component="RESOURCEMANAGER" title="Add Timeline Reader OPTS">
        <task xsi:type="configure" id="hdp_30_add_timeline_reader_opts"/>
      </execute-stage>

      <execute-stage service="YARN" component="RESOURCEMANAGER" title="Create yarn-system queue based on cluster capacity">
        <task xsi:type="server_action" class="org.apache.ambari.server.serveraction.upgrades.YarnNodeManagerCapacityCalculation">
          <summary>Create yarn-system queue based on cluster capacity</summary>
        </task>
      </execute-stage>

      <!-- Do this last to convert any variable which remained -->
      <execute-stage service="YARN" component="RESOURCEMANAGER" title="Convert YARN HDP 2.6 variable naming to HDP 3.0">
        <task xsi:type="configure" id="hdp_30_yarn_stack_variables_update"/>
      </execute-stage>

      <execute-stage service="YARN" component="RESOURCEMANAGER" title="Update YARN root logger">
        <task xsi:type="configure" id="hdp_30_update_yarn_root_logger"/>
      </execute-stage>

      <execute-stage service="MAPREDUCE2" component="HISTORYSERVER" title="Convert Mapreduce HDP 2.6 variable naming to HDP 3.0">
        <task xsi:type="configure" id="hdp_30_mapred_stack_variables_update"/>
      </execute-stage>

      <execute-stage service="MAPREDUCE2" component="HISTORYSERVER" title="Update Mapreduce loggers">
        <task xsi:type="configure" id="hdp_30_update_mapreduce_loggers"/>
      </execute-stage>

      <execute-stage service="YARN" component="APP_TIMELINE_SERVER" title="Add DistributedShellTimelinePlugin to ATS">
        <task xsi:type="configure" id="hdp_30_add_distributed_shell_class_to_ats" />
      </execute-stage>

      <execute-stage service="MAPREDUCE2" component="MAPREDUCE2_CLIENT" title="Apply config changes for Mapreduce2 client">
        <task xsi:type="server_action"
              class="org.apache.ambari.server.serveraction.upgrades.FixLzoCodecPath">
          <summary>Verifying LZO codec path for mapreduce</summary>
        </task>
      </execute-stage>

      <!--Yarn Apptimeline server-->
      <execute-stage service="YARN" component="APP_TIMELINE_SERVER" title="Apply config changes for App timeline server">
        <task xsi:type="server_action"
              class="org.apache.ambari.server.serveraction.upgrades.FixYarnWebServiceUrl">
          <summary>Fixing YARN Webservice Url</summary>
        </task>
      </execute-stage>

      <execute-stage service="YARN" component="APP_TIMELINE_SERVER" title="Removing Spark classpath entries from ATS">
        <task xsi:type="configure" id="hdp_30_remove_spark_classpaths_injections" />
      </execute-stage>

      <execute-stage service="YARN" title="Apply config changes for Timeline Reader">
        <task xsi:type="server_action"
              class="org.apache.ambari.server.serveraction.upgrades.FixTimelineReaderAddress">
          <summary>Setting YARN Timeline Reader Url</summary>
        </task>
      </execute-stage>

      <execute-stage>
        <task xsi:type="server_action"
              class="org.apache.ambari.server.serveraction.upgrades.FixCapacitySchedulerOrderingPolicy">
          <summary>Validate Root Queue Ordering Policy</summary>
        </task>
      </execute-stage>

      <!--TEZ-->
      <execute-stage service="TEZ" component="TEZ_CLIENT" title="Verify LZO codec path for Tez">
        <task xsi:type="server_action"
              class="org.apache.ambari.server.serveraction.upgrades.FixLzoCodecPath">
          <summary>Verifying LZO codec path for Tez</summary>
        </task>
      </execute-stage>

      <!--HIVE-->
      <execute-stage service="HIVE" component="HIVE_SERVER" title="Update hive.exec.dynamic.partition.mode to 'nonstrict'">
        <task xsi:type="configure" id="hive_exec_dynamic_partition_mode_nonstrict"/>
      </execute-stage>

      <execute-stage service="HIVE" component="HIVE_SERVER" title="Update default hive-env.sh">
        <task xsi:type="configure" id="update_hive_env_default" />
      </execute-stage>

      <execute-stage service="HIVE" component="HIVE_SERVER" title="Update default hive-exec-log4j2.properties">
        <task xsi:type="configure" id="update_hive_exec_log4j2_default" />
      </execute-stage>

      <execute-stage service="HIVE" component="HIVE_SERVER" title="Update default HSI hive-env.sh">
        <task xsi:type="configure" id="update_hsi_hive_env_sh_default" />
      </execute-stage>

      <execute-stage service="HIVE" component="HIVE_SERVER" title="Update default hive-log4j2.properties">
        <task xsi:type="configure" id="update_hive_log4j2_default" />
      </execute-stage>

      <execute-stage service="HIVE" component="HIVE_SERVER" title="Update default llap-daemon-log4j2.properties">
        <task xsi:type="configure" id="update_llap_cli_log4j2_default" />
      </execute-stage>

      <execute-stage service="HIVE" component="HIVE_SERVER" title="Update default llap-cli-log4j2.properties">
        <task xsi:type="configure" id="update_llap_daemon_log4j_default" />
      </execute-stage>

      <execute-stage service="HIVE" component="HIVE_SERVER" title="Update log files and locations">
        <task xsi:type="configure" id="hdp_30_hive_log_file" />
      </execute-stage>

      <execute-stage service="HIVE" component="HIVE_SERVER" title="Update Hive hook for DAS">
        <task xsi:type="configure" id="hdp_3_0_config_for_hive_das_hook">
          <summary>Update org.apache.hadoop.hive.ql.hooks.ATSHook to org.apache.hadoop.hive.ql.hooks.HiveProtoLoggingHook</summary>
        </task>
      </execute-stage>

      <execute-stage service="HIVE" component="HIVE_SERVER_INTERACTIVE" title="Update HSI hive jar path">
        <task xsi:type="configure" id="update_hsi_hive_jar_path" />
      </execute-stage>

      <execute-stage service="HIVE" component="HIVE_SERVER_INTERACTIVE" title="Update HSI log file location">
        <task xsi:type="configure" id="hdp_30_hsi_log_file" />
      </execute-stage>

      <execute-stage service="HIVE" component="HIVE_SERVER" title="Updating Ranger Hive Policy Rest SSL File path config">
        <task xsi:type="configure" id="hdp_3_0_updating_ranger_hive_policy_rest_ssl_file" />
      </execute-stage>

      <!--OOZIE-->
      <execute-stage service="OOZIE" component="OOZIE_SERVER" title="Apply config changes for Oozie Server">
        <task xsi:type="server_action"
              class="org.apache.ambari.server.serveraction.upgrades.OozieConfigCalculation">
          <summary>Adjusting Oozie properties</summary>
        </task>
      </execute-stage>

      <!--HBASE-->
      <execute-stage service="HBASE" component="HBASE_REGIONSERVER" title="Apply config changes for HBase Region Servers">
        <task xsi:type="configure" id="hbase_regionserver_cmsinitiatingoccupancyfraction_replace"/>
      </execute-stage>

      <!--RANGER-->
      <execute-stage service="RANGER" component="RANGER_USERSYNC" title="Updating Ranger Usersync Config">
        <task xsi:type="configure" id="hdp_3_0_ranger_usersync_maintain_groupsearch_enable_flag"/>
      </execute-stage>

      <execute-stage service="RANGER" component="RANGER_TAGSYNC" title="Adding Ranger Tagsync Config">
        <task xsi:type="configure" id="hdp_3_0_add_ranger_tagsync_cookie_enabled_config"/>
      </execute-stage>

      <!--ATLAS-->
      <execute-stage service="ATLAS" component="ATLAS_SERVER" title="Updating Atlas configurations.">
        <task xsi:type="configure" id="atlas_upgrade_configuration"/>
      </execute-stage>

      <execute-stage service="ATLAS" component="ATLAS_SERVER" title="Adding Janus-graph logger configurations for Atlas.">
        <task xsi:type="configure" id="atlas_log4j_adding_janus_graph"/>
      </execute-stage>

      <!--KAFKA-->
      <execute-stage service="KAFKA" component="KAFKA_BROKER" title="Parameterizing Kafka Log4J Properties">
        <task xsi:type="configure" id="kafka_log4j_parameterize">
          <summary>Updating the Kafka Log4J properties to include parameterizations</summary>
        </task>
      </execute-stage>

      <execute-stage service="KAFKA" component="KAFKA_BROKER" title="Add interbroker protocol version">
        <task xsi:type="configure" id="add_inter_broker_protocol_version">
          <summary>Update kafka server properties to add inter.broker.protocol.version</summary>
        </task>
      </execute-stage>

      <execute-stage service="KAFKA" component="KAFKA_BROKER" title="Add log message format version">
        <task xsi:type="configure" id="add_skip_log_message_format_version">
          <summary>Update kafka server properties to add log.message.format.version if not
            present.
          </summary>
        </task>
      </execute-stage>

      <!--STORM-->
      <execute-stage service="STORM" component="NIMBUS" title="Apply config changes for Storm AutoCreds">
        <task xsi:type="configure" id="storm_nimbus_autocred_config"/>
      </execute-stage>

      <execute-stage service="STORM" component="NIMBUS" title="Update config changes for Storm">
        <task xsi:type="configure" id="hdp_3_0_update_storm_env_ext_classpath"/>
      </execute-stage>

      <execute-stage service="STORM" component="NIMBUS" title="Apply config changes for Nimbus">
        <task xsi:type="configure" id="increase_storm_zookeeper_timeouts"/>
      </execute-stage>

      <execute-stage service="STORM" component="NIMBUS" title="Parameterizing Storm worker Log4J Properties">
        <task xsi:type="configure" id="storm_worker_log4j_parameterize">
          <summary>Updating the Storm worker Log4J properties to include parameterizations</summary>
        </task>
      </execute-stage>
      <execute-stage service="STORM" component="NIMBUS" title="Parameterizing Storm cluster Log4J Properties">
        <task xsi:type="configure" id="storm_cluster_log4j_parameterize">
          <summary>Updating the Storm cluster Log4J properties to include parameterizations
          </summary>
        </task>
      </execute-stage>
      <execute-stage service="STORM" component="NIMBUS" title="Removing jmxetric from childopts">
        <task xsi:type="configure" id="storm_remove_jmxetric"/>
      </execute-stage>

      <execute-stage service="STORM" component="NIMBUS" title="Updating storm logsearch config">
        <task xsi:type="configure" id="hdp_3_0_0_0_storm_logsearch_conf"/>
      </execute-stage>

      <!--ZEPPELIN-->
      <execute-stage service="ZEPPELIN" component="ZEPPELIN_MASTER" title="Apply zeppelin.notebook.storage config">
        <task xsi:type="configure" id="hdp_3_0_0_0_zeppelin_notebook_storage"/>
      </execute-stage>

      <execute-stage service="ZEPPELIN" component="ZEPPELIN_MASTER" title="Crate zeppelin-site config based on zeppelin-conf">
        <task xsi:type="configure" id="hdp_3_0_0_0_zeppelin_site"/>
      </execute-stage>

      <execute-stage service="ZEPPELIN" component="ZEPPELIN_MASTER" title="Update content property and remove unnecessary properties">
        <task xsi:type="configure" id="hdp_3_0_0_0_zeppelin_env"/>
      </execute-stage>

      <!--SPARK2-->
      <execute-stage service="SPARK2" component="SPARK2_THRIFTSERVER" title="Update content property in env config">
        <task xsi:type="configure" id="hdp_3_0_0_0_spark2_env"/>
      </execute-stage>

      <execute-stage service="SPARK2" component="SPARK2_THRIFTSERVER" title="Update Yarn ACL Admin queue">
        <task xsi:type="server_action" class="org.apache.ambari.server.serveraction.upgrades.AddSparkUserToYarnACLAdminQueue">
            <summary>Adding spark user to ACL admin queue property in capacity-scheduler config.</summary>
        </task>
      </execute-stage>

      <!--ACCUMULO-->
      <execute-stage service="ACCUMULO" component="ACCUMULO_MASTER" title="Convert Accumulo HDP 2.6 env variable naming to HDP 3.0">
        <task xsi:type="configure" id="hdp_30_accumulo_stack_variables_update"/>
      </execute-stage>

      <execute-stage service="ACCUMULO" component="ACCUMULO_MASTER" title="Update Accumulo HDP 2.6 classpath for HDP 3.0">
        <task xsi:type="configure" id="hdp_30_accumulo_classpath_update"/>
      </execute-stage>

    </group>

    <!--
    After processing this group, the user-specified Kerberos descriptor will be updated to work with
    the new stack-level Kerberos descriptor.
    -->
    <group xsi:type="cluster" name="UPDATE_KERBEROS_DESCRIPTORS" title="Update Kerberos Descriptors">
      <condition xsi:type="security" type="kerberos"/>
      <execute-stage title="Update the user-specified Kerberos descriptor">
        <task xsi:type="server_action"
              class="org.apache.ambari.server.serveraction.upgrades.UpgradeUserKerberosDescriptor"/>
      </execute-stage>
    </group>

    <!--
    After processing this group, items declared to be preconfigured will be applied to the existing
    configurations.
    -->
    <group xsi:type="cluster" name="PRECONFIGURE_COMMON_KERBEROS_PROPERTIES" title="Preconfigure Kerberos-related properties">
      <condition xsi:type="security" type="kerberos"/>
      <direction>UPGRADE</direction>
      <execute-stage title="Preconfigure Kerberos-related properties">
        <task xsi:type="server_action"
              class="org.apache.ambari.server.serveraction.upgrades.PreconfigureKerberosAction"/>
      </execute-stage>
    </group>

    <!-- This group is necessary since new components are being added to the cluster in this upgrade -->
    <group xsi:type="cluster" name="REGENERATE_KEYTABS" title="Regenerate Missing Keytabs">
      <condition xsi:type="security" type="kerberos"/>
      <direction>UPGRADE</direction>
      <execute-stage title="Regenerate Missing Keytabs">
        <task xsi:type="regenerate_keytabs"/>
      </execute-stage>
    </group>

    <!-- This group is necessary since new components are being added to the cluster in this upgrade -->
    <group xsi:type="cluster" name="MANUAL_REGENERATE_KEYTABS" title="Manually Regenerate Missing Keytabs">
      <condition xsi:type="security" type="kerberos" kdc-type="none"/>
      <direction>UPGRADE</direction>
      <execute-stage title="Manually Regenerate Missing Keytabs">
        <task xsi:type="manual">
          <message>Ambari is configured to have principals and keytabs managed externally.
            Before proceeding, you will need to manually create new principals and keytabs for the following cluster changes which have been made.
            You can download a summary of all principals and keytabs from the Kerberos section in Ambari.</message>
          <message> · All Spark Job History Server hosts now have a Hive Client installed</message>
          <message> · All YARN Application Timeline Service hosts now have Timeline Reader installed</message>
          <message> · All YARN Application Timeline Service hosts now have Registry DNS installed</message>
          <message> · The principal yarn-ats-hbase is required for all YARN hosts</message>
          <message> · The principal amsmon is required for all AMS Monitors</message>
          <message> · A Spark service principal replaces a legacy Spark headless principal on all Spark hosts</message>
        </task>
      </execute-stage>
    </group>

    <!--
    Invoke "hdp-select set all" to change any components we may have missed
    that are installed on the hosts but not known by Ambari.
    -->
    <group xsi:type="cluster" name="ALL_HOST_OPS" title="Set Version On All Hosts">
      <scope>COMPLETE</scope>
      <direction>UPGRADE</direction>
      <skippable>true</skippable>
      <supports-auto-skip-failure>false</supports-auto-skip-failure>

      <execute-stage title="Update stack to {{version}}">
        <task xsi:type="execute">
          <script>scripts/stack_select_set_all.py</script>
          <function>actionexecute</function>
        </task>
      </execute-stage>
    </group>

    <group xsi:type="restart" name="KERBEROS" title="Kerberos">
      <condition xsi:type="security" type="kerberos"/>
      <direction>UPGRADE</direction>
      <service-check>false</service-check>
      <skippable>true</skippable>
      <supports-auto-skip-failure>false</supports-auto-skip-failure>
      <parallel-scheduler/>
      <service name="KERBEROS">
        <component>KERBEROS_CLIENT</component>
      </service>
    </group>

    <!-- Now, restart all of the services. -->
    <group xsi:type="restart" name="ZOOKEEPER" title="ZooKeeper">
      <service-check>false</service-check>
      <skippable>true</skippable>
      <supports-auto-skip-failure>false</supports-auto-skip-failure>
      <parallel-scheduler/>
      <service name="ZOOKEEPER">
        <component>ZOOKEEPER_SERVER</component>
        <component>ZOOKEEPER_CLIENT</component>
      </service>
    </group>

    <group xsi:type="restart" name="RANGER" title="Ranger">
      <service-check>false</service-check>
      <skippable>true</skippable>
      <supports-auto-skip-failure>false</supports-auto-skip-failure>
      <parallel-scheduler/>
      <service name="RANGER">
        <component>RANGER_ADMIN</component>
        <component>RANGER_USERSYNC</component>
        <component>RANGER_TAGSYNC</component>
      </service>
    </group>

    <group xsi:type="restart" name="HDFS" title="HDFS">
      <service-check>false</service-check>
      <skippable>true</skippable>
      <supports-auto-skip-failure>false</supports-auto-skip-failure>
      <parallel-scheduler/>
      <service name="HDFS">
        <component>JOURNALNODE</component>
        <component>ZKFC</component>
        <component>NAMENODE</component>
        <component>SECONDARY_NAMENODE</component>
        <component>NFS_GATEWAY</component>
        <component>HDFS_CLIENT</component>
      </service>
    </group>

    <group xsi:type="restart" name="HDFS_DATANODES" title="HDFS DataNodes">
      <service-check>false</service-check>
      <skippable>true</skippable>
      <parallel-scheduler/>
      <service name="HDFS">
        <component>DATANODE</component>
      </service>
    </group>

    <group xsi:type="cluster" name="HDFS_LEAVE_SAFEMODE" title="HDFS - Wait to leave Safemode">
      <service-check>false</service-check>
      <skippable>true</skippable>
      <supports-auto-skip-failure>false</supports-auto-skip-failure>

      <execute-stage service="HDFS" component="NAMENODE" title="Wait to leave Safemode">
        <task xsi:type="execute" hosts="all">
          <summary>Wait for NameNode to leave Safemode</summary>
          <script>scripts/namenode.py</script>
          <function>wait_for_safemode_off</function>
        </task>
      </execute-stage>
    </group>

    <group xsi:type="restart" name="RANGER_KMS" title="Ranger KMS">
      <service-check>false</service-check>
      <skippable>true</skippable>
      <supports-auto-skip-failure>false</supports-auto-skip-failure>
      <parallel-scheduler/>
      <service name="RANGER_KMS">
        <component>RANGER_KMS_SERVER</component>
      </service>
    </group>

    <group xsi:type="restart" name="AMBARI_METRICS" title="Ambari Metrics">
      <service-check>false</service-check>
      <skippable>true</skippable>
      <supports-auto-skip-failure>false</supports-auto-skip-failure>
      <parallel-scheduler/>
      <service name="AMBARI_METRICS">
        <component>METRICS_COLLECTOR</component>
        <component>METRICS_MONITOR</component>
        <component>METRICS_GRAFANA</component>
      </service>
    </group>

    <group xsi:type="restart" name="KAFKA" title="Kafka">
      <service-check>false</service-check>
      <skippable>true</skippable>
      <parallel-scheduler/>
      <service name="KAFKA">
        <component>KAFKA_BROKER</component>
      </service>
    </group>

    <group xsi:type="restart" name="MAPREDUCE2" title="MapReduce2">
      <service-check>false</service-check>
      <skippable>true</skippable>
      <supports-auto-skip-failure>false</supports-auto-skip-failure>
      <parallel-scheduler/>

      <service name="MAPREDUCE2">
        <component>HISTORYSERVER</component>
        <component>MAPREDUCE2_CLIENT</component>
      </service>
    </group>

    <group xsi:type="restart" name="YARN_RESOURCE_MANAGERS" title="YARN ResourceManagers">
      <service-check>false</service-check>
      <skippable>true</skippable>
      <supports-auto-skip-failure>false</supports-auto-skip-failure>

      <service name="YARN">
        <component>RESOURCEMANAGER</component>
      </service>
    </group>

    <group xsi:type="restart" name="YARN" title="YARN">
      <service-check>false</service-check>
      <skippable>true</skippable>
      <supports-auto-skip-failure>false</supports-auto-skip-failure>
      <parallel-scheduler/>

      <service name="YARN">
        <component>APP_TIMELINE_SERVER</component>
        <component>TIMELINE_READER</component>
        <component>YARN_REGISTRY_DNS</component>
        <component>YARN_CLIENT</component>
      </service>
    </group>

    <group xsi:type="restart" name="YARN_NODEMANAGERS" title="YARN NodeManagers">
      <service-check>false</service-check>
      <skippable>true</skippable>
      <parallel-scheduler/>

      <service name="YARN">
        <component>NODEMANAGER</component>
      </service>
    </group>

    <group xsi:type="cluster" name="START_YARN_QUEUES" title="Start YARN Queues">
      <direction>UPGRADE</direction>
      <service-check>false</service-check>
      <skippable>true</skippable>
      <parallel-scheduler/>

      <execute-stage service="YARN" component="RESOURCEMANAGER" title="Start YARN Queues">
        <condition xsi:type="config" type="yarn-site"
                   property="yarn.resourcemanager.work-preserving-recovery.enabled" value="true"
                   comparison="not-equals"/>
        <task xsi:type="manual">
          <message>Before continuing, please start all YARN queues.</message>
        </task>
      </execute-stage>
    </group>

    <group xsi:type="restart" name="HBASE" title="HBASE">
      <service-check>false</service-check>
      <skippable>true</skippable>
      <supports-auto-skip-failure>false</supports-auto-skip-failure>
      <parallel-scheduler/>
      <service name="HBASE">
        <component>HBASE_MASTER</component>
        <component>HBASE_REGIONSERVER</component>
        <component>HBASE_CLIENT</component>
        <component>PHOENIX_QUERY_SERVER</component>
      </service>
    </group>

    <group xsi:type="restart" name="CLIENTS" title="Tez, Pig, Sqoop Clients">
      <service-check>false</service-check>
      <skippable>true</skippable>
      <parallel-scheduler/>
      <service name="TEZ">
        <component>TEZ_CLIENT</component>
      </service>

      <service name="PIG">
        <component>PIG</component>
      </service>

      <service name="SQOOP">
        <component>SQOOP</component>
      </service>
    </group>

    <group name="SERVICE_CHECK_1" title="All Service Checks" xsi:type="service-check">
      <direction>UPGRADE</direction>
      <skippable>true</skippable>
      <priority>
        <service>ZOOKEEPER</service>
        <service>RANGER</service>
        <service>RANGER_KMS</service>
        <service>HDFS</service>
        <service>KAFKA</service>
        <service>YARN</service>
        <service>MAPREDUCE2</service>
        <service>HBASE</service>
      </priority>
    </group>

    <group xsi:type="restart" name="HIVE_METASTORE" title="Hive Metastore">
      <service-check>false</service-check>
      <skippable>true</skippable>
      <supports-auto-skip-failure>false</supports-auto-skip-failure>
      <parallel-scheduler>
        <max-degree-of-parallelism>1</max-degree-of-parallelism>
      </parallel-scheduler>
      <service name="HIVE">
        <component>HIVE_METASTORE</component>
      </service>
    </group>

    <group xsi:type="cluster" name="MOVE_HIVE_TABLES" title="Move Hive Tables">
      <execute-stage service="HIVE" component="HIVE_METASTORE" title="Move Hive Tables">
        <task xsi:type="execute" hosts="any">
          <script>scripts/post_upgrade.py</script>
          <function>move_tables</function>
        </task>
      </execute-stage>
    </group>

    <group xsi:type="restart" name="HIVE_SERVERS" title="Hive Servers">
      <service-check>false</service-check>
      <skippable>true</skippable>
      <supports-auto-skip-failure>false</supports-auto-skip-failure>
      <parallel-scheduler>
        <max-degree-of-parallelism>1</max-degree-of-parallelism>
      </parallel-scheduler>
      <service name="HIVE">
        <component>HIVE_SERVER</component>
        <component>HIVE_SERVER_INTERACTIVE</component>
      </service>
    </group>

    <group xsi:type="restart" name="HIVE_CLIENTS" title="Hive Clients">
      <service-check>false</service-check>
      <skippable>true</skippable>
      <supports-auto-skip-failure>false</supports-auto-skip-failure>
      <parallel-scheduler/>
      <service name="HIVE">
        <component>HIVE_CLIENT</component>
      </service>
    </group>

    <group xsi:type="restart" name="SPARK2" title="Spark2">
      <service-check>false</service-check>
      <skippable>true</skippable>
      <supports-auto-skip-failure>false</supports-auto-skip-failure>
      <parallel-scheduler/>
      <service name="SPARK2">
        <component>SPARK2_JOBHISTORYSERVER</component>
        <component>SPARK2_THRIFTSERVER</component>
        <component>LIVY2_SERVER</component>
      </service>
    </group>

    <group xsi:type="restart" name="SPARK2_CLIENTS" title="Spark2 Clients">
      <service-check>false</service-check>
      <skippable>true</skippable>
      <parallel-scheduler/>
      <service name="SPARK2">
        <component>SPARK2_CLIENT</component>
      </service>
    </group>

    <group xsi:type="restart" name="ZEPPELIN" title="Zeppelin">
      <service-check>false</service-check>
      <skippable>true</skippable>
      <supports-auto-skip-failure>false</supports-auto-skip-failure>
      <parallel-scheduler/>
      <service name="ZEPPELIN">
        <component>ZEPPELIN_MASTER</component>
      </service>
    </group>

    <group xsi:type="restart" name="ATLAS" title="Atlas">
      <service-check>false</service-check>
      <skippable>true</skippable>
      <supports-auto-skip-failure>false</supports-auto-skip-failure>
      <parallel-scheduler/>
      <service name="ATLAS">
        <component>ATLAS_SERVER</component>
      </service>
    </group>

    <group xsi:type="restart" name="ATLAS_CLIENTS" title="Atlas Clients">
      <service-check>false</service-check>
      <skippable>true</skippable>
      <supports-auto-skip-failure>true</supports-auto-skip-failure>
      <parallel-scheduler/>
      <service name="ATLAS">
        <component>ATLAS_CLIENT</component>
      </service>
    </group>

    <group xsi:type="restart" name="OOZIE" title="Oozie">
      <service-check>false</service-check>
      <skippable>true</skippable>
      <supports-auto-skip-failure>false</supports-auto-skip-failure>
      <parallel-scheduler/>
      <service name="OOZIE">
        <component>OOZIE_SERVER</component>
      </service>
    </group>

    <group xsi:type="restart" name="OOZIE_CLIENTS" title="Oozie Clients">
      <service-check>false</service-check>
      <skippable>true</skippable>
      <parallel-scheduler/>
      <service name="OOZIE">
        <component>OOZIE_CLIENT</component>
      </service>
    </group>


    <group name="SERVICE_CHECK_2" title="All Service Checks" xsi:type="service-check">
      <direction>UPGRADE</direction>
      <skippable>true</skippable>
      <priority>
        <service>HIVE</service>
        <service>SPARK2</service>
        <service>ATLAS</service>
        <service>ZEPPELIN</service>
        <service>OOZIE</service>
      </priority>
    </group>

    <group xsi:type="restart" name="KNOX" title="Knox">
      <service-check>false</service-check>
      <skippable>true</skippable>
      <parallel-scheduler/>
      <service name="KNOX">
        <component>KNOX_GATEWAY</component>
      </service>
    </group>

    <group xsi:type="restart" name="STORM" title="Storm">
      <service-check>false</service-check>
      <skippable>true</skippable>
      <parallel-scheduler/>
      <service name="STORM">
        <component>NIMBUS</component>
        <component>SUPERVISOR</component>
        <component>STORM_UI_SERVER</component>
        <component>DRPC_SERVER</component>
      </service>
    </group>

    <group xsi:type="restart" name="ACCUMULO" title="Accumulo">
      <service-check>false</service-check>
      <skippable>true</skippable>
      <parallel-scheduler/>
      <service name="ACCUMULO">
        <component>ACCUMULO_MASTER</component>
        <component>ACCUMULO_TSERVER</component>
        <component>ACCUMULO_MONITOR</component>
        <component>ACCUMULO_GC</component>
        <component>ACCUMULO_TRACER</component>
        <component>ACCUMULO_CLIENT</component>
      </service>
    </group>

    <group xsi:type="restart" name="DRUID" title="Druid">
      <skippable>true</skippable>
      <service name="DRUID">
        <component>DRUID_HISTORICAL</component>
        <component>DRUID_MIDDLEMANAGER</component>
        <component>DRUID_BROKER</component>
        <component>DRUID_ROUTER</component>
        <component>DRUID_COORDINATOR</component>
        <component>DRUID_OVERLORD</component>
        <component>DRUID_SUPERSET</component>
      </service>
    </group>

    <group xsi:type="restart" name="SUPERSET" title="Superset">
      <skippable>true</skippable>
      <service name="SUPERSET">
        <component>SUPERSET</component>
      </service>
    </group>

    <group name="SERVICE_CHECK_3" title="All Service Checks" xsi:type="service-check">
      <direction>UPGRADE</direction>
      <skippable>true</skippable>
      <priority>
        <service>KNOX</service>
        <service>STORM</service>
        <service>ACCUMULO</service>
        <service>DRUID</service>
        <service>SUPERSET</service>
      </priority>
    </group>

    <group xsi:type="cluster" name="FINALIZE_PRE_CHECK" title="Finalize {{direction.text.proper}} Pre-Check">
      <direction>UPGRADE</direction>

      <execute-stage title="Check Component Versions">
        <task xsi:type="server_action"
              class="org.apache.ambari.server.serveraction.upgrades.ComponentVersionCheckAction"/>
      </execute-stage>
    </group>

    <group xsi:type="cluster" name="POST_CLUSTER" title="Finalize {{direction.text.proper}}">
      <skippable>true</skippable>
      <supports-auto-skip-failure>false</supports-auto-skip-failure>

      <execute-stage title="Confirm Finalize">
        <direction>UPGRADE</direction>
        <task xsi:type="manual">
          <message>Please confirm you are ready to finalize.</message>
        </task>
      </execute-stage>

      <execute-stage service="HBASE" component="HBASE_MASTER" title="Delete HBase snapshots">
        <direction>UPGRADE</direction>
        <task xsi:type="manual">
          <message>You can now remove any HBase snapshots which were created at the beginning of the
            upgrade.
            To see existing snapshots, use the following HBase shell command:
          </message>
          <message>hbase> list_snapshots</message>
          <message>Once you have found an existing snapshot which you would like to remove, you can
            use the
            following command:
          </message>
          <message>hbase> delete_snapshot 'snapshotName'</message>
        </task>
      </execute-stage>

      <execute-stage service="RANGER" component="RANGER_ADMIN" title="Ranger update password config Check">
        <direction>UPGRADE</direction>
        <task xsi:type="manual">
          <message>Please follow below steps after successful upgrade</message>
          <message>-- Please update passwords for Ranger Usersync, Tagsync and Keyadmin under Ranger Service Config Tab from Ambari. Otherwise Ranger Admin restart will fail after upgrade.</message>
          <message>Password guidelines</message>
          <message>-- Password should be minimum 8 characters with minimum one alphabet and one numeric. Unsupported special characters are  " ' \ `.</message>
        </task>
      </execute-stage>

      <execute-stage service="HDFS" component="NAMENODE" title="Execute HDFS Finalize">
        <task xsi:type="execute" hosts="master">
          <script>scripts/namenode.py</script>
          <function>finalize_non_rolling_upgrade</function>
        </task>
      </execute-stage>

      <execute-stage title="Save Cluster State">
        <task xsi:type="server_action"
              class="org.apache.ambari.server.serveraction.upgrades.FinalizeUpgradeAction">
        </task>
      </execute-stage>

    </group>
  </order>

  <processing>
    <service name="KERBEROS">
      <component name="KERBEROS_CLIENT">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>
    </service>

    <service name="ZOOKEEPER">
      <component name="ZOOKEEPER_SERVER">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>

      <component name="ZOOKEEPER_CLIENT">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>
    </service>

    <service name="RANGER">
      <component name="RANGER_ADMIN">
        <pre-upgrade>

          <task xsi:type="execute" hosts="all">
            <script>scripts/ranger_admin.py</script>
            <function>set_pre_start</function>
          </task>

          <task xsi:type="execute" hosts="any">
            <summary>Upgrading Ranger database schema</summary>
            <script>scripts/ranger_admin.py</script>
            <function>setup_ranger_database</function>
          </task>

          <task xsi:type="configure_function" hosts="all"/>

          <task xsi:type="execute" hosts="any">
            <summary>Applying Ranger java patches</summary>
            <script>scripts/ranger_admin.py</script>
            <function>setup_ranger_java_patches</function>
          </task>
        </pre-upgrade>

        <pre-downgrade copy-upgrade="true"/>

        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>

      </component>

      <component name="RANGER_USERSYNC">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>

      <component name="RANGER_TAGSYNC">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>
    </service>

    <service name="HDFS">
      <component name="NAMENODE">
        <upgrade>
          <task xsi:type="restart-task" timeout-config="upgrade.parameter.nn-restart.timeout"/>
        </upgrade>
      </component>

      <component name="SECONDARY_NAMENODE">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>

      <component name="DATANODE">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>

      <component name="HDFS_CLIENT">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>

      <component name="JOURNALNODE">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>

      <component name="ZKFC">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>

      <component name="NFS_GATEWAY">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>
    </service>

    <service name="RANGER_KMS">
      <component name="RANGER_KMS_SERVER">
        <pre-upgrade>
          <task xsi:type="execute" hosts="any" sequential="true">
            <summary>Upgrading Ranger KMS database schema</summary>
            <script>scripts/kms_server.py</script>
            <function>setup_ranger_kms_database</function>
          </task>
        </pre-upgrade>

        <pre-downgrade>
          <task xsi:type="execute" hosts="any" sequential="true">
            <summary>Downgrading Ranger KMS database schema</summary>
            <script>scripts/kms_server.py</script>
            <function>setup_ranger_kms_database</function>
          </task>
        </pre-downgrade>

        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>
    </service>

    <service name="MAPREDUCE2">
      <component name="HISTORYSERVER">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>

      <component name="MAPREDUCE2_CLIENT">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>
    </service>

    <service name="YARN">
      <component name="APP_TIMELINE_SERVER">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>

      <component name="RESOURCEMANAGER">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>

      <component name="NODEMANAGER">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>

      <component name="YARN_CLIENT">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>

      <component name="TIMELINE_READER">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>

      <component name="YARN_REGISTRY_DNS">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>
    </service>

    <service name="KAFKA">
      <component name="KAFKA_BROKER">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>
    </service>

    <service name="HBASE">
      <component name="HBASE_MASTER">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>

      <component name="HBASE_REGIONSERVER">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>

      <component name="HBASE_CLIENT">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>
    </service>

    <service name="TEZ">
      <component name="TEZ_CLIENT">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>
    </service>

    <service name="PIG">
      <component name="PIG">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>
    </service>

    <service name="SQOOP">
      <component name="SQOOP">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>
    </service>

    <service name="HIVE">
      <component name="HIVE_METASTORE">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>

      <component name="HIVE_SERVER">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>

      <component name="HIVE_SERVER_INTERACTIVE">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>

      <component name="HIVE_CLIENT">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>
    </service>

    <service name="SPARK2">
      <component name="SPARK2_JOBHISTORYSERVER">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>
      <component name="SPARK2_THRIFTSERVER">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>
      <component name="SPARK2_CLIENT">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>
      <component name="LIVY2_SERVER">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>
    </service>

    <service name="ZEPPELIN">
      <component name="ZEPPELIN_MASTER">
        <pre-upgrade>
          <task xsi:type="server_action" class="org.apache.ambari.server.serveraction.upgrades.CreateZeppelinSiteConfig">
            <summary>Creating zeppelin-site and removing zeppelin-config config</summary>
          </task>
        </pre-upgrade>
        <pre-downgrade/>
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>
    </service>

    <service name="OOZIE">
      <component name="OOZIE_SERVER">
        <pre-upgrade>
          <!-- It is extremely important that both of these tasks run on the exact same host. Hence, pick the first alphabetically. -->
          <task xsi:type="configure_function" hosts="first"/>

          <task xsi:type="execute" hosts="first" sequential="true">
            <summary>Upgrading the Oozie database and creating a new sharelib</summary>
            <script>scripts/oozie_server_upgrade.py</script>
            <function>upgrade_oozie_database_and_sharelib</function>
          </task>
        </pre-upgrade>

        <pre-downgrade>
          <task xsi:type="execute" hosts="any" sequential="true">
            <summary>Create a new sharelib</summary>
            <script>scripts/oozie_server_upgrade.py</script>
            <function>create_sharelib</function>
          </task>
        </pre-downgrade>

        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>

      <component name="OOZIE_CLIENT">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>
    </service>

    <service name="KNOX">
      <component name="KNOX_GATEWAY">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>
    </service>

    <service name="STORM">
      <component name="NIMBUS">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>

      <component name="SUPERVISOR">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>

      <component name="STORM_UI_SERVER">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>

      <component name="DRPC_SERVER">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>
    </service>

    <service name="ACCUMULO">
      <component name="ACCUMULO_MASTER">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>

      <component name="ACCUMULO_TSERVER">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>

      <component name="ACCUMULO_MONITOR">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>

      <component name="ACCUMULO_GC">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>

      <component name="ACCUMULO_TRACER">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>

      <component name="ACCUMULO_CLIENT">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>
    </service>

    <service name="ATLAS">
      <component name="ATLAS_SERVER">
        <pre-upgrade>
          <task xsi:type="execute" hosts="all">
            <summary>Configuring Atlas for HDP 3.0</summary>
            <script>scripts/metadata_server.py</script>
            <function>configure_atlas_for_upgrade</function>
          </task>
        </pre-upgrade>
        <pre-downgrade/> <!--  no-op to prevent config changes on downgrade -->
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>

      <component name="ATLAS_CLIENT">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>
    </service>

    <service name="DRUID">
      <component name="DRUID_HISTORICAL">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>
      <component name="DRUID_MIDDLEMANAGER">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>
      <component name="DRUID_BROKER">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>
      <component name="DRUID_ROUTER">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>
      <component name="DRUID_COORDINATOR">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>
      <component name="DRUID_OVERLORD">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>
      <component name="DRUID_SUPERSET">
        <upgrade>
          <task xsi:type="restart-task"/>
        </upgrade>
      </component>
    </service>
  </processing>
</upgrade>
