<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<!--
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
-->
<configuration>
  <property>
    <name>recovery_enabled</name>
    <value>true</value>
    <description>Auto start enabled or not for this cluster.</description>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>recovery_type</name>
    <value>AUTO_START</value>
    <description>Auto start type.</description>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>recovery_lifetime_max_count</name>
    <value>1024</value>
    <description>Auto start lifetime maximum count of recovery attempt allowed per host component. This is reset when agent is restarted.</description>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>recovery_max_count</name>
    <value>6</value>
    <description>Auto start maximum count of recovery attempt allowed per host component in a window. This is reset when agent is restarted.</description>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>recovery_window_in_minutes</name>
    <value>60</value>
    <description>Auto start recovery window size in minutes.</description>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>recovery_retry_interval</name>
    <value>5</value>
    <description>Auto start recovery retry gap between tries per host component.</description>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>security_enabled</name>
    <value>false</value>
    <description>Hadoop Security</description>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>kerberos_domain</name>
    <value>EXAMPLE.COM</value>
    <description>Kerberos realm.</description>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>ignore_groupsusers_create</name>
    <display-name>Use Ambari to Manage Group Memberships</display-name>
    <value>false</value>
    <property-type>ADDITIONAL_USER_PROPERTY</property-type>
    <description>Ambari will add or remove service accounts from groups.</description>
    <value-attributes>
      <overridable>false</overridable>
      <type>boolean-inverted</type>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>sysprep_skip_create_users_and_groups</name>
    <display-name>Use Ambari to Manage Service Accounts and Groups</display-name>
    <value>false</value>
    <property-type>ADDITIONAL_USER_PROPERTY</property-type>
    <description>Ambari will create the service accounts and groups that are required for each service if they do not exist in the /etc/password, and /etc/group of the Ambari Managed hosts.</description>
    <value-attributes>
      <overridable>true</overridable>
      <type>boolean-inverted</type>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>sysprep_skip_copy_fast_jar_hdfs</name>
    <display-name>Whether to skip copying the tarballs to HDFS on a sysprepped cluster</display-name>
    <value>false</value>
    <description>Whether to skip copying the tarballs to HDFS on a sysprepped cluster, during both fresh install and stack upgrade</description>
    <value-attributes>
      <overridable>true</overridable>
      <type>boolean</type>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>sysprep_skip_copy_tarballs_hdfs</name>
    <display-name>Whether to skip copying the tarballs to HDFS on a sysprepped cluster</display-name>
    <value>false</value>
    <description>Whether to skip copying the tarballs to HDFS on a sysprepped cluster, during both fresh install and stack upgrade</description>
    <value-attributes>
      <overridable>true</overridable>
      <type>boolean</type>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>sysprep_skip_copy_oozie_share_lib_to_hdfs</name>
    <display-name>Whether to skip copying the Oozie share lib to HDFS on sysprepped cluster</display-name>
    <value>false</value>
    <description>Whether to skip copying the Oozie share lib to HDFS on sysprepped cluster, during both fresh install and stack upgrade</description>
    <value-attributes>
      <overridable>true</overridable>
      <type>boolean</type>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>sysprep_skip_oozie_schema_create</name>
    <display-name>Whether to skip creating the Oozie DB schema on sysprepped cluster</display-name>
    <value>false</value>
    <description>Whether to skip creating the Oozie DB schema on sysprepped cluster, during fresh install</description>
    <value-attributes>
      <overridable>true</overridable>
      <type>boolean</type>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>sysprep_skip_hive_schema_create</name>
    <display-name>Whether to skip creating the Hive Metastore DB schema on sysprepped cluster</display-name>
    <value>false</value>
    <description>Whether to skip creating the Hive Metastore DB schema on sysprepped cluster, during fresh install</description>
    <value-attributes>
      <overridable>true</overridable>
      <type>boolean</type>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>sysprep_skip_lzo_package_operations</name>
    <display-name>Whether LZO packages are also pre-installed on sysprepped cluster</display-name>
    <value>false</value>
    <description>In sysprepped environments true value indicates that LZO packages are pre-installed and should not be managed by Ambari</description>
    <value-attributes>
      <overridable>true</overridable>
      <type>boolean</type>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>sysprep_skip_setup_jce</name>
    <display-name>Whether to skip setting up the unlimited key JCE policy on sysprepped cluster</display-name>
    <value>false</value>
    <description>Whether to skip setting up the unlimited key JCE policy on sysprepped cluster, during both fresh install and upgrades</description>
    <value-attributes>
      <overridable>true</overridable>
      <type>boolean</type>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>smokeuser</name>
    <display-name>Smoke User</display-name>
    <value>ambari-qa</value>
    <property-type>USER</property-type>
    <description>User executing service checks</description>
    <value-attributes>
      <type>user</type>
      <overridable>false</overridable>
      <user-groups>
        <property>
          <type>hadoop-env</type>
          <name>proxyuser_group</name>
        </property>
        <property>
          <type>cluster-env</type>
          <name>user_group</name>
        </property>
      </user-groups>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>smokeuser_keytab</name>
    <value>/etc/security/keytabs/smokeuser.headless.keytab</value>
    <description>Path to smoke test user keytab file</description>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>user_group</name>
    <display-name>Hadoop Group</display-name>
    <value>hadoop</value>
    <property-type>GROUP</property-type>
    <description>Hadoop user group.</description>
    <value-attributes>
      <type>user</type>
      <overridable>false</overridable>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>repo_suse_rhel_template</name>
    <value>[{{repo_id}}]
name={{repo_id}}
{% if mirror_list %}mirrorlist={{mirror_list}}{% else %}baseurl={{base_url}}{% endif %}

path=/
enabled=1
gpgcheck=0</value>
    <description>Template of repositories for rhel and suse.</description>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>repo_ubuntu_template</name>
    <value>{{package_type}} {{base_url}} {{components}}</value>
    <description>Template of repositories for ubuntu.</description>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>override_uid</name>
    <value>true</value>
    <property-type>ADDITIONAL_USER_PROPERTY</property-type>
    <display-name>Use Ambari to Manage Service Accounts UID's</display-name>
    <description>Ambari will be able to change UID's of service accounts.</description>
    <value-attributes>
      <overridable>false</overridable>
      <type>boolean</type>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>fetch_nonlocal_groups</name>
    <value>true</value>
    <display-name>Ambari fetch nonlocal groups</display-name>
    <description>Ambari requires fetching all the groups. This can be slow
        on envs with enabled ldap. Setting this option to false will enable Ambari,
        to skip user/group management connected with ldap groups.</description>
    <value-attributes>
      <overridable>false</overridable>
      <type>boolean</type>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>managed_hdfs_resource_property_names</name>
    <value/>
    <description>Comma separated list of property names with HDFS resource paths.
        Resource from this list will be managed even if it is marked as not managed in the stack</description>
    <value-attributes>
      <overridable>false</overridable>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <!-- Define stack_name property in the base stack. DO NOT override this property for each stack version -->
  <property>
    <name>stack_name</name>
    <value>HDP</value>
    <description>The name of the stack.</description>
    <value-attributes>
      <read-only>true</read-only>
      <overridable>false</overridable>
      <visible>false</visible>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <!-- Define stack_tools property in the base stack. DO NOT override this property for each stack version -->
  <property>
    <name>stack_tools</name>
    <value/>
    <description>Stack specific tools</description>
    <property-type>VALUE_FROM_PROPERTY_FILE</property-type>
    <value-attributes>
      <property-file-name>stack_tools.json</property-file-name>
      <property-file-type>json</property-file-type>
      <read-only>true</read-only>
      <overridable>false</overridable>
      <visible>false</visible>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <!-- Define stack_features property in the base stack. DO NOT override this property for each stack version -->
  <property>
    <name>stack_features</name>
    <value/>
    <description>List of features supported by the stack</description>
    <property-type>VALUE_FROM_PROPERTY_FILE</property-type>
    <value-attributes>
      <property-file-name>stack_features.json</property-file-name>
      <property-file-type>json</property-file-type>
      <read-only>true</read-only>
      <overridable>false</overridable>
      <visible>false</visible>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <!-- Define stack_packages property in the base stack. DO NOT override this property for each stack version -->
  <property>
    <name>stack_packages</name>
    <value/>
    <description>Associations between component and stack-select tools.</description>
    <property-type>VALUE_FROM_PROPERTY_FILE</property-type>
    <value-attributes>
      <property-file-name>stack_packages.json</property-file-name>
      <property-file-type>json</property-file-type>
      <read-only>true</read-only>
      <overridable>false</overridable>
      <visible>false</visible>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>stack_root</name>
    <value>{"HDP":"/usr/hdp"}</value>
    <description>JSON which defines the stack root by stack name</description>
    <value-attributes>
      <read-only>true</read-only>
      <overridable>false</overridable>
      <visible>false</visible>
    </value-attributes>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>alerts_repeat_tolerance</name>
    <value>1</value>
    <description>The number of consecutive alerts required to transition an alert from the SOFT to the HARD state.</description>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>ignore_bad_mounts</name>
    <value>false</value>
    <description>For properties handled by handle_mounted_dirs this will make Ambari not to create any directories.</description>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>manage_dirs_on_root</name>
    <value>true</value>
    <description>For properties handled by handle_mounted_dirs this will make Ambari to manage (create and set permissions) unknown directories on / partition</description>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>one_dir_per_partition</name>
    <value>false</value>
    <description>For properties handled by handle_mounted_dirs this will make Ambari </description>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>hide_yarn_memory_widget</name>
    <value>false</value>
    <description>YARN Memory widget should be hidden by default on the dashboard.</description>
    <on-ambari-upgrade add="true"/>
  </property>
   <property>
    <name>agent_mounts_ignore_list</name>
    <value/>
    <description>Comma separated list of the mounts which would be ignored by Ambari during property values suggestion by Stack Advisor</description>
    <on-ambari-upgrade add="false"/>
    <value-attributes>
      <visible>true</visible>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
    <name>enable_external_ranger</name>
    <value>false</value>
    <description>Flag to turn on when external setup of External Ranger is done.</description>
    <on-ambari-upgrade add="false"/>
  </property>
  <property>
    <name>service_check_type</name>
    <display-name>Service Check Type</display-name>
    <value>full</value>
    <description>Indicates the complexity of the service check.  Valid values are 'minimal' or 'full'.</description>
    <on-ambari-upgrade add="true"/>
    <value-attributes>
      <visible>true</visible>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
    <name>namenode_rolling_restart_timeout</name>
    <value>4200</value>
    <description>Timeout for namenode rolling restart command.</description>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>namenode_rolling_restart_safemode_exit_timeout</name>
    <value>3600</value>
    <description>Timeout for safemode exit, during namenode rolling restart</description>
    <on-ambari-upgrade add="true"/>
  </property>
  <property>
    <name>manage_hive_fsroot</name>
    <value>true</value>
    <description>If flag is set to true, ambari will manage fsroot for Hive, by setting it to fs.defautlFS of local HDFS</description>
    <on-ambari-upgrade add="false"/>
  </property>
</configuration>
