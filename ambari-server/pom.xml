<?xml version="1.0"?>
<!-- Licensed under the Apache License, Version 2.0 (the "License"); you
  may not use this file except in compliance with the License. You may obtain
  a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless
  required by applicable law or agreed to in writing, software distributed
  under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
  OR CONDITIONS OF ANY KIND, either express or implied. See the License for
  the specific language governing permissions and limitations under the License.
  See accompanying LICENSE file. -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <parent>
    <groupId>org.apache.ambari</groupId>
    <artifactId>ambari-project</artifactId>
    <version>1.3.0-SNAPSHOT</version>
    <relativePath>../ambari-project</relativePath>
  </parent>
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.apache.ambari</groupId>
  <artifactId>ambari-server</artifactId>
  <packaging>jar</packaging>
  <name>Ambari Server</name>
  <version>1.3.0-SNAPSHOT</version>
  <description>Ambari Server</description>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <python.ver>python &gt;= 2.6</python.ver>
    <deb.python.ver>python (&gt;= 2.6)</deb.python.ver>
    <deb.architecture>amd64</deb.architecture>
    <deb.dependency.list>openssl, postgresql (&gt;= 8.1), ${deb.python.ver}, curl</deb.dependency.list>
    <custom.tests>false</custom.tests>
    <hdpUrlForCentos6>http://public-repo-1.hortonworks.com/HDP/centos6/2.x/updates/2.1.1.0</hdpUrlForCentos6>
    <hdpLatestUrl>http://public-repo-1.hortonworks.com/HDP/hdp_urlinfo.json</hdpLatestUrl>
    <ambari_commons.install.dir>/usr/lib/ambari-server/lib/ambari_commons</ambari_commons.install.dir>
    <resource_management.install.dir>/usr/lib/ambari-server/lib/resource_management</resource_management.install.dir>
    <ambari-web-dir>${basedir}/../ambari-web/public</ambari-web-dir>
    <ambari-admin-dir>${basedir}/../ambari-admin</ambari-admin-dir>
    <contrib-views-dir>${basedir}/../contrib/views</contrib-views-dir>
  </properties>
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>1.8</version>
        <executions>
          <execution>
            <id>parse-version</id>
            <phase>validate</phase>
            <goals>
              <goal>parse-version</goal>
            </goals>
          </execution>
          <execution>
            <id>regex-property</id>
            <goals>
              <goal>regex-property</goal>
            </goals>
            <configuration>
              <name>ambariVersion</name>
              <value>${project.version}</value>
              <regex>^([0-9]+)\.([0-9]+)\.([0-9]+)(\.|-).*</regex>
              <replacement>$1.$2.$3</replacement>
              <failIfNoMatch>false</failIfNoMatch>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <version>2.6</version>
        <executions>
          <execution>
            <id>copy-resources</id>
            <phase>generate-test-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${basedir}/target/</outputDirectory>
              <resources>
                <resource>
                  <directory>${basedir}/../</directory>
                  <includes>
                    <include>version</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${basedir}/sbin/</directory>
                  <includes>
                    <include>ambari-server</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.0</version>
      </plugin>
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <configuration>
          <descriptors>
            <descriptor>src/main/assemblies/server.xml</descriptor>
          </descriptors>
          <tarLongFileMode>gnu</tarLongFileMode>
        </configuration>
        <executions>
          <execution>
            <id>build-tarball</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.rat</groupId>
        <artifactId>apache-rat-plugin</artifactId>
        <configuration>
          <excludes>
            <exclude>pass.txt</exclude>
            <exclude>derby.log</exclude>
            <exclude>src/test/resources/users.ldif</exclude>
            <exclude>src/test/resources/gsInstaller-hosts.txt</exclude>
            <exclude>src/test/resources/temporal_ganglia_data.txt</exclude>
            <exclude>src/test/resources/users.ldif</exclude>
            <exclude>src/main/resources/hive-schema-0.10.0.oracle.sql</exclude>
            <exclude>src/main/resources/hive-schema-0.12.0.oracle.sql</exclude>
            <exclude>src/main/resources/db/serial</exclude>
            <exclude>src/main/resources/db/index.txt</exclude>
            <exclude>src/main/resources/stacks/HDP/2.1.GlusterFS/services/YARN/package/templates/exclude_hosts_list.j2</exclude>
            <exclude>src/main/resources/stacks/HDP/2.0.6/services/HDFS/package/scripts/balancer-emulator/balancer-err.log</exclude>
            <exclude>src/main/resources/stacks/HDP/2.0.6/services/HDFS/package/scripts/balancer-emulator/balancer.log</exclude>
            <exclude>conf/unix/ca.config</exclude>
            <exclude>conf/unix/krb5JAASLogin.conf</exclude>
            <exclude>**/*.json</exclude>
            <exclude>**/*.sql</exclude>
            <exclude>**/repo_suse_rhel.j2</exclude>
            <exclude>**/repo_debian.j2</exclude>
            <exclude>**/.pydev*</exclude>

            <!--gitignore content -->
            <exclude>src/main/resources/db/newcerts/**</exclude>

            <!-- Stack definitions -->
            <exclude>src/main/resources/stacks/HDP/2.0._/services/HBASE/package/templates/regionservers.j2</exclude>

            <!--test samples -->
            <exclude>src/test/resources/TestAmbaryServer.samples/**</exclude>
            <exclude>src/test/resources/*.txt</exclude>
            <exclude>src/test/resources/users_for_dn_with_space.ldif</exclude>

            <!--Velocity log -->
            <exclude>**/velocity.log*</exclude>
          </excludes>
        </configuration>
        <executions>
          <execution>
            <phase>test</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>eclipselink-staticweave-maven-plugin</artifactId>
        <groupId>au.com.alderaan</groupId>
        <version>1.0.4</version>
        <executions>
          <execution>
            <goals>
              <goal>weave</goal>
            </goals>
            <phase>process-classes</phase>
            <configuration>
              <logLevel>ALL</logLevel>
              <includeProjectClasspath>true</includeProjectClasspath>
            </configuration>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>eclipselink</artifactId>
            <version>2.4.0</version>
          </dependency>
        </dependencies>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>rpm-maven-plugin</artifactId>
        <version>2.0.1</version>
        <executions>
          <execution>
            <!-- unbinds rpm creation from maven lifecycle -->
            <phase>none</phase>
            <goals>
              <goal>rpm</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <copyright>2012, Apache Software Foundation</copyright>
          <group>Development</group>
          <description>Maven Recipe: RPM Package.</description>
          <autoRequires>no</autoRequires>
          <requires>
            <require>postgresql-server &gt;= 8.1</require>
            <require>openssl</require>
            <require>${python.ver}</require>
          </requires>
          <postinstallScriptlet>
            <scriptFile>src/main/package/rpm/postinstall.sh</scriptFile>
            <fileEncoding>utf-8</fileEncoding>
          </postinstallScriptlet>
          <preinstallScriptlet>
            <scriptFile>src/main/package/rpm/preinstall.sh</scriptFile>
            <fileEncoding>utf-8</fileEncoding>
          </preinstallScriptlet>
          <preremoveScriptlet>
            <scriptFile>src/main/package/rpm/preremove.sh</scriptFile>
            <fileEncoding>utf-8</fileEncoding>
          </preremoveScriptlet>
          <defaultFilemode>644</defaultFilemode>
          <defaultDirmode>755</defaultDirmode>
          <defaultUsername>root</defaultUsername>
          <defaultGroupname>root</defaultGroupname>
          <mappings>
            <mapping>
              <directory>/usr/lib/ambari-server</directory>
              <dependency>
              </dependency>
            </mapping>
            <mapping>
              <directory>/usr/lib/ambari-server/web</directory>
              <sources>
                <source>
                  <location>${ambari-web-dir}</location>
                  <includes>
                    <include>**</include>
                  </includes>
                </source>
              </sources>
            </mapping>
            <mapping>
              <directory>/usr/lib/ambari-server</directory>
              <sources>
                <source>
                  <location>${project.build.directory}/${project.artifactId}-${project.version}.jar</location>
                </source>
              </sources>
            </mapping>
            <mapping>
              <directory>${ambari_commons.install.dir}</directory>
              <sources>
                <source>
                  <location>
                    ${project.basedir}/../ambari-common/src/main/python/ambari_commons
                  </location>
                </source>
              </sources>
            </mapping>
            <mapping>
              <directory>${resource_management.install.dir}</directory>
              <sources>
                <source>
                  <location>
                    ${project.basedir}/../ambari-common/src/main/python/resource_management
                  </location>
                </source>
              </sources>
            </mapping>
              <mapping>
              <directory>/usr/sbin</directory>
              <filemode>755</filemode>
              <username>root</username>
              <groupname>root</groupname>
              <directoryIncluded>false</directoryIncluded>
              <sources>
                <source>
                  <location>src/main/python/ambari-server.py</location>
                </source>
                <source>
                  <location>sbin/ambari-server</location>
                  <filter>true</filter>
                </source>
              </sources>
            </mapping>
            <mapping>
              <directory>/var/lib/ambari-server/</directory>
              <filemode>755</filemode>
              <username>root</username>
              <groupname>root</groupname>
              <directoryIncluded>false</directoryIncluded>
              <sources>
                <source>
                  <location>../ambari-common/src/main/unix/ambari-python-wrap</location>
                </source>
              </sources>
            </mapping>
            <mapping>
              <directory>/etc/ambari-server/conf</directory>
              <configuration>true</configuration>
              <sources>
                <source>
                  <location>conf/unix/ambari.properties</location>
                </source>
                <source>
                  <location>conf/unix/log4j.properties</location>
                </source>
                <source>
                  <location>conf/unix/krb5JAASLogin.conf</location>
                </source>
              </sources>
            </mapping>
            <mapping>
              <directory>/var/lib/ambari-server/</directory>
              <filemode>700</filemode>
              <username>root</username>
              <groupname>root</groupname>
              <sources>
                <source>
                  <location>conf/unix/ambari-env.sh</location>
                </source>
              </sources>
            </mapping>
            <mapping>
              <directory>/var/lib/ambari-server/</directory>
              <filemode>700</filemode>
              <username>root</username>
              <groupname>root</groupname>
              <sources>
                <source>
                  <location>conf/unix/install-helper.sh</location>
                </source>
              </sources>
            </mapping>
            <mapping>
              <directory>/var/lib/ambari-server/keys</directory>
              <sources>
                <source>
                  <location>conf/unix/ca.config</location>
                </source>
              </sources>
            </mapping>
            <mapping>
              <directory>/var/lib/ambari-server/keys/db</directory>
              <filemode>700</filemode>
              <username>root</username>
              <groupname>root</groupname>
              <sources>
                <source>
                  <location>src/main/resources/db</location>
                </source>
              </sources>
            </mapping>
            <mapping>
              <directory>/var/run/ambari-server/bootstrap</directory>
            </mapping>
            <mapping>
              <directory>/var/run/ambari-server/stack-recommendations</directory>
            </mapping>
            <mapping>
              <directory>/var/log/ambari-server</directory>
            </mapping>
            <mapping>
              <directory>/var/lib/ambari-server/resources</directory>
              <sources>
                <source>
                  <location>target/classes/Ambari-DDL-Postgres-CREATE.sql</location>
                </source>
                <source>
                  <location>src/main/resources/Ambari-DDL-Postgres-DROP.sql</location>
                </source>
                <source>
                  <location>target/classes/Ambari-DDL-Postgres-EMBEDDED-CREATE.sql</location>
                </source>
                <source>
                  <location>src/main/resources/Ambari-DDL-Postgres-EMBEDDED-DROP.sql</location>
                </source>
                <source>
                  <location>target/classes/Ambari-DDL-Oracle-CREATE.sql</location>
                </source>
                <source>
                  <location>target/classes/Ambari-DDL-MySQL-CREATE.sql</location>
                </source>
                <source>
                  <location>src/main/resources/Ambari-DDL-Oracle-DROP.sql</location>
                </source>
                <source>
                  <location>src/main/resources/Ambari-DDL-MySQL-DROP.sql</location>
                </source>
                <source>
                  <location>${project.build.directory}/DBConnectionVerification.jar</location>
                </source>
                <source>
                  <location>src/main/resources/role_command_order.json</location>
                </source>
              </sources>
            </mapping>
            <mapping>
              <directory>/var/lib/ambari-server/resources/scripts</directory>
              <filemode>755</filemode>
              <sources>
                <source>
                  <location>src/main/resources/scripts</location>
                </source>
                <source>
                  <location>src/main/python/UpgradeHelper_HDP2.py</location>
                </source>
              </sources>
            </mapping>
            <mapping>
              <directory>/var/lib/ambari-server/resources/views</directory>
              <filemode>755</filemode>
              <sources>
                <source>
                  <location>${ambari-admin-dir}/target</location>
                  <includes>
                    <include>*.jar</include>
                  </includes>
                </source>
              </sources>
            </mapping>
            <mapping>
              <directory>/var/lib/ambari-server/resources/upgrade</directory>
            </mapping>
            <mapping>
              <directory>/var/lib/ambari-server/resources/upgrade/ddl</directory>
              <sources>
                <source>
                  <location>src/main/resources/upgrade/ddl</location>
                </source>
              </sources>
            </mapping>
            <mapping>
              <directory>/var/lib/ambari-server/resources/upgrade/dml</directory>
              <sources>
                <source>
                  <location>src/main/resources/upgrade/dml</location>
                </source>
              </sources>
            </mapping>
            <mapping>
              <directory>/var/lib/ambari-server/resources/stacks/HDP</directory>
              <sources>
                <source>
                  <location>target/classes/stacks/HDP</location>
                </source>
              </sources>
            </mapping>
            <mapping>
              <directory>/usr/lib/python2.6/site-packages/ambari_server</directory>
              <filemode>755</filemode>
              <username>root</username>
              <groupname>root</groupname>
              <sources>
                <source>
                  <location>src/main/python/ambari_server</location>
                </source>
                <source>
                  <location>src/main/python/bootstrap.py</location>
                </source>
                <source>
                  <location>src/main/python/setupAgent.py</location>
                </source>
                <source>
                  <location>src/main/python/os_check_type.py</location>
                </source>
              </sources>
            </mapping>
            <mapping>
              <directory>/var/run/ambari-server</directory>
            </mapping>
            <mapping>
              <directory>/var/lib/ambari-server/resources</directory>
              <sources>
                <source>
                  <location>../version</location>
                  <filter>true</filter>
                </source>
              </sources>
            </mapping>
            <mapping>
              <directory>/var/lib/ambari-server/resources/custom_action_definitions</directory>
              <sources>
                <source>
                  <location>src/main/resources/custom_action_definitions</location>
                </source>
              </sources>
            </mapping>
            <mapping>
              <!-- custom actions root-->
              <directory>/var/lib/ambari-server/resources/custom_actions</directory>
              <filemode>755</filemode>
              <username>root</username>
              <groupname>root</groupname>
              <sources>
                <source>
                  <location>src/main/resources/custom_actions</location>
                </source>
              </sources>
            </mapping>
          </mappings>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.vafer</groupId>
        <artifactId>jdeb</artifactId>
        <version>1.0.1</version>
        <executions>
          <execution>
            <!-- unbinds rpm creation from maven lifecycle -->
            <phase>none</phase>
            <goals>
              <goal>jdeb</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <controlDir>${basedir}/src/main/package/deb/control</controlDir>
          <deb>${basedir}/target/${project.artifactId}_${package-version}-${package-release}.deb</deb>
          <dataSet>
            <data>
              <type>template</type>
              <paths>
                <path>/usr/lib/ambari-server</path>
                <path>/var/run/ambari-server</path>
                <path>/var/run/ambari-server/bootstrap</path>
                <path>/var/run/ambari-server/stack-recommendations</path>
                <path>/var/log/ambari-server</path>
                <path>/var/lib/ambari-server/resources/upgrade</path>
              </paths>
            </data>
            <!-- TODO: should be included all subdirs, if exists-->
            <data>
              <src>${basedir}/../ambari-web/public</src>
              <type>directory</type>
              <mapper>
                <type>perm</type>
                <prefix>/usr/lib/ambari-server/web</prefix>
              </mapper>
            </data>
            <data>
              <src>${project.build.directory}/${project.artifactId}-${project.version}-dist/${project.artifactId}-${project.version}/lib</src>
              <type>directory</type>
              <mapper>
                <type>perm</type>
                <prefix>/usr/lib</prefix>
              </mapper>
            </data>
            <data>
              <src>src/main/python/ambari-server.py</src>
              <type>file</type>
              <mapper>
                <type>perm</type>
                <prefix>/usr/sbin</prefix>
                <user>root</user>
                <group>root</group>
                <filemode>755</filemode>
              </mapper>
            </data>
            <data>
              <src>src/main/python/ambari-server.py</src>
              <type>file</type>
              <mapper>
                <type>perm</type>
                <prefix>/usr/sbin</prefix>
                <user>root</user>
                <group>root</group>
                <filemode>755</filemode>
              </mapper>
            </data>
            <data>
              <src>../ambari-common/src/main/unix/ambari-python-wrap</src>
              <type>file</type>
              <mapper>
                <type>perm</type>
                <prefix>/var/lib/ambari-server</prefix>
                <user>root</user>
                <group>root</group>
                <filemode>755</filemode>
              </mapper>
            </data>
            <data>
              <src>${basedir}/target/ambari-server</src>
              <type>file</type>
              <mapper>
                <type>perm</type>
                <prefix>/usr/sbin</prefix>
                <user>root</user>
                <group>root</group>
                <filemode>755</filemode>
              </mapper>
            </data>
          <data>
            <src>conf/unix/ambari.properties</src>
            <type>file</type>
            <mapper>
              <type>perm</type>
              <prefix>/etc/ambari-server/conf</prefix>
            </mapper>
          </data>
          <data>
            <src>conf/unix/log4j.properties</src>
            <type>file</type>
            <mapper>
              <type>perm</type>
              <prefix>/etc/ambari-server/conf</prefix>
            </mapper>
          </data>
          <data>
            <src>conf/unix/krb5JAASLogin.conf</src>
            <type>file</type>
            <mapper>
              <type>perm</type>
              <prefix>/etc/ambari-server/conf</prefix>
            </mapper>
          </data>
           <!-- /q001 -->
          <data>
            <src>conf/unix/ambari-env.sh</src>
            <type>file</type>
            <mapper>
              <type>perm</type>
              <prefix>/var/lib/ambari-server/</prefix>
              <user>root</user>
              <group>root</group>
              <filemode>700</filemode>
            </mapper>
          </data>
          <data>
            <src>conf/unix/install-helper.sh</src>
            <type>file</type>
            <mapper>
              <type>perm</type>
              <prefix>/var/lib/ambari-server/</prefix>
              <user>root</user>
              <group>root</group>
              <filemode>700</filemode>
            </mapper>
          </data>
          <data>
            <src>conf/unix/ca.config</src>
            <type>file</type>
            <mapper>
              <type>perm</type>
              <prefix>/var/lib/ambari-server/keys</prefix>
            </mapper>
          </data>
          <data>
            <src>src/main/resources/db</src>
            <type>directory</type>
            <mapper>
              <type>perm</type>
              <prefix>/var/lib/ambari-server/keys/db</prefix>
              <user>root</user>
              <group>root</group>
              <filemode>700</filemode>
            </mapper>
          </data>
          <data>
            <src>target/classes/Ambari-DDL-Postgres-CREATE.sql</src>
            <type>file</type>
            <mapper>
              <type>perm</type>
              <prefix>/var/lib/ambari-server/resources</prefix>
            </mapper>
          </data>
          <data>
            <src>src/main/resources/Ambari-DDL-Postgres-DROP.sql</src>
            <type>file</type>
            <mapper>
              <type>perm</type>
              <prefix>/var/lib/ambari-server/resources</prefix>
            </mapper>
          </data>
          <data>
            <src>target/classes/Ambari-DDL-Postgres-EMBEDDED-CREATE.sql</src>
            <type>file</type>
            <mapper>
              <type>perm</type>
              <prefix>/var/lib/ambari-server/resources</prefix>
            </mapper>
          </data>
          <data>
            <src>src/main/resources/Ambari-DDL-Postgres-EMBEDDED-DROP.sql</src>
            <type>file</type>
            <mapper>
              <type>perm</type>
              <prefix>/var/lib/ambari-server/resources</prefix>
            </mapper>
          </data>
          <data>
            <src>target/classes/Ambari-DDL-Oracle-CREATE.sql</src>
            <type>file</type>
            <mapper>
              <type>perm</type>
              <prefix>/var/lib/ambari-server/resources</prefix>
            </mapper>
          </data>
          <data>
            <src>target/classes/Ambari-DDL-MySQL-CREATE.sql</src>
            <type>file</type>
            <mapper>
              <type>perm</type>
              <prefix>/var/lib/ambari-server/resources</prefix>
            </mapper>
          </data>
          <data>
            <src>src/main/resources/Ambari-DDL-Oracle-DROP.sql</src>
            <type>file</type>
            <mapper>
              <type>perm</type>
              <prefix>/var/lib/ambari-server/resources</prefix>
            </mapper>
          </data>
          <data>
            <src>src/main/resources/Ambari-DDL-MySQL-DROP.sql</src>
            <type>file</type>
            <mapper>
              <type>perm</type>
              <prefix>/var/lib/ambari-server/resources</prefix>
            </mapper>
          </data>
          <data>
            <src>${project.build.directory}/DBConnectionVerification.jar</src>
            <type>file</type>
            <mapper>
              <type>perm</type>
              <prefix>/var/lib/ambari-server/resources</prefix>
            </mapper>
          </data>
          <data>
            <src>src/main/resources/role_command_order.json</src>
            <type>file</type>
            <mapper>
              <type>perm</type>
              <prefix>/var/lib/ambari-server/resources</prefix>
            </mapper>
          </data>
          <data>
            <src>src/main/resources/scripts</src>
            <type>directory</type>
            <mapper>
              <type>perm</type>
              <prefix>/var/lib/ambari-server/resources/scripts</prefix>
              <filemode>755</filemode>
            </mapper>
          </data>
          <data>
            <src>${ambari-admin-dir}/target</src>
            <type>directory</type>
            <includes>*.jar</includes>
            <mapper>
              <type>perm</type>
              <prefix>/var/lib/ambari-server/resources/views</prefix>
            </mapper>
          </data>
          <data>
            <src>src/main/python/UpgradeHelper_HDP2.py</src>
            <type>file</type>
            <mapper>
              <type>perm</type>
              <prefix>/var/lib/ambari-server/resources/scripts</prefix>
              <filemode>755</filemode>
            </mapper>
          </data>
          <data>
            <src>src/main/resources/upgrade/ddl</src>
            <type>directory</type>
            <mapper>
              <type>perm</type>
              <prefix>/var/lib/ambari-server/resources/upgrade/ddl</prefix>
            </mapper>
          </data>
          <data>
            <src>src/main/resources/upgrade/dml</src>
            <type>directory</type>
            <mapper>
              <type>perm</type>
              <prefix>/var/lib/ambari-server/resources/upgrade/dml</prefix>
            </mapper>
          </data>
          <data>
            <src>target/classes/stacks/HDP</src>
            <type>directory</type>
            <mapper>
              <type>perm</type>
              <prefix>/var/lib/ambari-server/resources/stacks/HDP</prefix>
            </mapper>
          </data>
          <data>
            <src>src/main/python/ambari_server</src>
            <type>directory</type>
            <mapper>
              <type>perm</type>
              <prefix>/usr/lib/python2.6/site-packages/ambari_server</prefix>
              <user>root</user>
              <group>root</group>
              <filemode>755</filemode>
            </mapper>
          </data>
          <data>
            <src>src/main/python/bootstrap.py</src>
            <type>file</type>
            <mapper>
              <type>perm</type>
              <prefix>/usr/lib/python2.6/site-packages/ambari_server</prefix>
              <user>root</user>
              <group>root</group>
              <filemode>755</filemode>
            </mapper>
          </data>
          <data>
            <src>src/main/python/setupAgent.py</src>
            <type>file</type>
            <mapper>
              <type>perm</type>
              <prefix>/usr/lib/python2.6/site-packages/ambari_server</prefix>
              <user>root</user>
              <group>root</group>
              <filemode>755</filemode>
            </mapper>
          </data>
          <data>
            <src>src/main/python/os_check_type.py</src>
            <type>file</type>
            <mapper>
              <type>perm</type>
              <prefix>/usr/lib/python2.6/site-packages/ambari_server</prefix>
              <user>root</user>
              <group>root</group>
              <filemode>755</filemode>
            </mapper>
          </data>
          <data>
            <src>${basedir}/target/version</src>
            <type>file</type>
            <mapper>
              <type>perm</type>
              <prefix>/var/lib/ambari-server/resources</prefix>
            </mapper>
          </data>
          <data>
            <src>src/main/resources/custom_action_definitions</src>
            <type>directory</type>
            <mapper>
              <type>perm</type>
              <prefix>/var/lib/ambari-server/resources/custom_action_definitions</prefix>
            </mapper>
          </data>
          <data>
            <src>src/main/resources/custom_actions</src>
            <type>directory</type>
            <mapper>
              <type>perm</type>
              <prefix>/var/lib/ambari-server/resources/custom_actions</prefix>
              <user>root</user>
              <group>root</group>
              <filemode>755</filemode>
            </mapper>
          </data>
            <data>
              <src>
                ${project.basedir}/../ambari-common/src/main/python/ambari_commons
              </src>
              <type>directory</type>
              <mapper>
                <type>perm</type>
                <prefix>${ambari_commons.install.dir}</prefix>
                <filemode>755</filemode>
                <user>root</user>
                <group>root</group>
              </mapper>
            </data>
            <data>
              <src>
                ${project.basedir}/../ambari-common/src/main/python/resource_management
              </src>
              <type>directory</type>
              <mapper>
                <type>perm</type>
                <prefix>${resource_management.install.dir}</prefix>
                <filemode>755</filemode>
                <user>root</user>
                <group>root</group>
              </mapper>
            </data>
          </dataSet>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>findbugs-maven-plugin</artifactId>
        <version>2.5.2</version>
        <configuration>
          <failOnError>false</failOnError>
        </configuration>
        <executions>
          <execution>
            <phase>verify</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.2</version>
        <executions>
          <execution>
            <configuration>
              <executable>${project.basedir}/../ambari-common/src/main/unix/ambari-python-wrap</executable>
              <workingDirectory>src/test/python</workingDirectory>
              <arguments>
                <argument>unitTests.py</argument>
                <argument>${custom.tests}</argument>
              </arguments>
              <environmentVariables>
                  <PYTHONPATH>${project.basedir}/../ambari-common/src/main/python:${project.basedir}/../ambari-agent/src/main/python:${project.basedir}/../ambari-common/src/main/python/jinja2:${project.basedir}/../ambari-common/src/main/python/ambari_commons:${project.basedir}/../ambari-common/src/test/python:${project.basedir}/src/main/python:${project.basedir}/src/main/python/ambari-server-state:${project.basedir}/src/test/python:$PYTHONPATH</PYTHONPATH>
              </environmentVariables>
              <skip>${skipTests}</skip>
            </configuration>
            <id>python-test</id>
            <phase>test</phase>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.atlassian.maven.plugins</groupId>
        <artifactId>maven-clover2-plugin</artifactId>
        <version>3.1.11</version>
        <!-- <configuration> <licenseLocation>/path/to/clover.license</licenseLocation>
          </configuration> -->
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>buildnumber-maven-plugin</artifactId>
        <version>${buildnumber-maven-plugin-version}</version>
        <configuration>
          <urlScm>scm:git:https://git-wip-us.apache.org/repos/asf/incubator-ambari.git</urlScm>
        </configuration>
        <executions>
          <execution>
            <phase>validate</phase>
            <goals>
              <goal>create</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>1.7</version>
        <executions>
          <execution>
            <phase>package</phase>
            <configuration>
              <tasks>
                <jar destfile="target/DBConnectionVerification.jar">
                  <fileset dir="${basedir}/target/classes/"
                    includes="**/DBConnectionVerification.class" />
                  <manifest>
                    <attribute name="Main-Class"
                      value="org.apache.ambari.server.DBConnectionVerification" />
                  </manifest>
                </jar>
              </tasks>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
          <!-- Copies compiled views into known location for RPM builds -->
          <execution>
            <id>copy-view-jars</id>
            <phase>package</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <copy todir="${ambari-admin-dir}/target" flatten="true">
                  <fileset dir="${contrib-views-dir}">
                    <include name="*/target/*jar" />
                  </fileset>
                </copy>
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
        <excludes>
          <exclude>stacks/**</exclude>
        </excludes>
      </resource>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>false</filtering>
        <includes>
          <include>stacks/**</include>
        </includes>
      </resource>
    </resources>
  </build>
  <profiles>
    <profile>
      <id>replaceurl</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <version>1.7</version>
            <executions>
              <execution>
                <id>set-hdp-url-classes</id>
                <phase>process-classes</phase>
                <goals>
                  <goal>run</goal>
                </goals>
                <configuration>
                  <target name="ambari-server-compile">
                    <exec dir="${basedir}" executable="bash"
                      failonerror="true">
                      <arg value="${basedir}/set-hdp-repo-url.sh" />
                      <arg value="${hdpUrlForCentos6}" />
                      <arg value="${hdpLatestUrl}" />
                    </exec>
                  </target>
                </configuration>
              </execution>
              <execution>
                <id>set-hdp-url-packages</id>
                <phase>package</phase>
                <goals>
                  <goal>run</goal>
                </goals>
                <configuration>
                  <target name="ambari-server-compile">
                    <exec dir="${basedir}" executable="bash"
                      failonerror="true">
                      <arg value="${basedir}/set-hdp-repo-url.sh" />
                      <arg value="${hdpUrlForCentos6}" />
                      <arg value="${hdpLatestUrl}" />
                      <arg
                        value="${project.build.directory}/ambari-server-${project.version}-dist/ambari-server-${project.version}" />
                    </exec>
                  </target>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
  <dependencies>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>ambari-views</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
    </dependency>
    <dependency>
      <groupId>com.google.inject.extensions</groupId>
      <artifactId>guice-assistedinject</artifactId>
    </dependency>
    <dependency>
      <groupId>com.google.inject.extensions</groupId>
      <artifactId>guice-persist</artifactId>
    </dependency>
    <dependency>
      <groupId>com.google.inject.extensions</groupId>
      <artifactId>guice-servlet</artifactId>
    </dependency>
    <dependency>
      <groupId>com.google.inject.extensions</groupId>
      <artifactId>guice-multibindings</artifactId>
      <version>3.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.derby</groupId>
      <artifactId>derby</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-config</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-mock</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-ldap</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.ldap</groupId>
      <artifactId>spring-ldap-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.directory.server</groupId>
      <artifactId>apacheds-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.directory.server</groupId>
      <artifactId>apacheds-protocol-ldap</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.directory.shared</groupId>
      <artifactId>shared-ldap</artifactId>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
    </dependency>
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
    </dependency>
    <dependency>
      <groupId>org.eclipse.persistence</groupId>
      <artifactId>eclipselink</artifactId>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-security</artifactId>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-servlet</artifactId>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-webapp</artifactId>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-server</artifactId>
    </dependency>
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
    </dependency>
    <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
    </dependency>
    <dependency>
      <groupId>commons-lang</groupId>
      <artifactId>commons-lang</artifactId>
    </dependency>
    <dependency>
      <groupId>commons-httpclient</groupId>
      <artifactId>commons-httpclient</artifactId>
    </dependency>
    <dependency>
      <groupId>commons-net</groupId>
      <artifactId>commons-net</artifactId>
      <version>1.4.1</version>
    </dependency>
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>servlet-api</artifactId>
    </dependency>
    <dependency>
      <groupId>com.sun.jersey</groupId>
      <artifactId>jersey-json</artifactId>
      <exclusions>
        <exclusion>
          <groupId>org.codehaus.jackson</groupId>
          <artifactId>jackson-xc</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.codehaus.jettison</groupId>
          <artifactId>jettison</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.codehaus.jackson</groupId>
          <artifactId>jackson-mapper-asl</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.sun.jersey</groupId>
      <artifactId>jersey-server</artifactId>
    </dependency>
    <dependency>
      <groupId>com.sun.jersey</groupId>
      <artifactId>jersey-client</artifactId>
    </dependency>
    <dependency>
      <groupId>com.sun.jersey.contribs</groupId>
      <artifactId>jersey-multipart</artifactId>
    </dependency>
    <dependency>
      <groupId>com.sun.jersey.contribs</groupId>
      <artifactId>jersey-guice</artifactId>
    </dependency>
    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-mapper-asl</artifactId>
      <version>1.9.2</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-core-asl</artifactId>
    </dependency>
    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-jaxrs</artifactId>
    </dependency>
    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-xc</artifactId>
    </dependency>
    <dependency>
      <groupId>com.sun.jersey.jersey-test-framework</groupId>
      <artifactId>jersey-test-framework-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.sun.jersey.jersey-test-framework</groupId>
      <artifactId>jersey-test-framework-grizzly2</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.codehaus.jettison</groupId>
      <artifactId>jettison</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.easymock</groupId>
      <artifactId>easymock</artifactId>
      <version>3.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-core</artifactId>
      <version>1.5</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-reflect</artifactId>
      <version>1.5</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-api-easymock</artifactId>
      <version>1.5</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-module-junit4</artifactId>
      <version>1.5</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.objenesis</groupId>
      <artifactId>objenesis-tck</artifactId>
      <version>1.2</version>
    </dependency>
    <dependency>
      <groupId>cglib</groupId>
      <artifactId>cglib</artifactId>
      <version>2.2.2</version>
    </dependency>
    <dependency>
      <groupId>asm</groupId>
      <artifactId>asm</artifactId>
      <version>3.3.1</version>
    </dependency>
    <dependency>
      <groupId>com.google.inject</groupId>
      <artifactId>guice</artifactId>
      <version>3.0</version>
    </dependency>
    <dependency>
      <groupId>com.google.code.gson</groupId>
      <artifactId>gson</artifactId>
      <version>2.2.2</version>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <version>9.3-1101-jdbc4</version>
    </dependency>
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpclient</artifactId>
      <version>4.2.5</version>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>14.0.1</version>
    </dependency>
    <dependency>
      <groupId>com.google.code.findbugs</groupId>
      <artifactId>jsr305</artifactId>
      <version>1.3.9</version>
    </dependency>
    <dependency>
      <groupId>org.quartz-scheduler</groupId>
      <artifactId>quartz</artifactId>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.quartz-scheduler</groupId>
      <artifactId>quartz-jobs</artifactId>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.velocity</groupId>
      <artifactId>velocity</artifactId>
      <version>1.7</version>
    </dependency>
  </dependencies>
  <!--<reporting> <plugins> <plugin> <groupId>org.codehaus.mojo</groupId>
    <artifactId>findbugs-maven-plugin</artifactId> <version>2.5.2</version> </plugin>
    </plugins> </reporting> -->
</project>
